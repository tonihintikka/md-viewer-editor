{"version":3,"file":"layout-96c79e73.js","sources":["../../node_modules/lodash-es/_trimmedEndIndex.js","../../node_modules/lodash-es/_baseTrim.js","../../node_modules/lodash-es/toNumber.js","../../node_modules/lodash-es/toFinite.js","../../node_modules/lodash-es/flatten.js","../../node_modules/lodash-es/now.js","../../node_modules/lodash-es/defaults.js","../../node_modules/lodash-es/last.js","../../node_modules/lodash-es/findIndex.js","../../node_modules/lodash-es/_createFind.js","../../node_modules/lodash-es/find.js","../../node_modules/lodash-es/toInteger.js","../../node_modules/lodash-es/_baseMap.js","../../node_modules/lodash-es/map.js","../../node_modules/lodash-es/_baseGt.js","../../node_modules/lodash-es/_baseLt.js","../../node_modules/lodash-es/mapValues.js","../../node_modules/lodash-es/_baseExtremum.js","../../node_modules/lodash-es/max.js","../../node_modules/lodash-es/min.js","../../node_modules/lodash-es/minBy.js","../../node_modules/lodash-es/_baseSet.js","../../node_modules/lodash-es/_compareAscending.js","../../node_modules/lodash-es/_baseOrderBy.js","../../node_modules/lodash-es/_baseSortBy.js","../../node_modules/lodash-es/_compareMultiple.js","../../node_modules/lodash-es/_basePick.js","../../node_modules/lodash-es/_basePickBy.js","../../node_modules/lodash-es/pick.js","../../node_modules/lodash-es/_flatRest.js","../../node_modules/lodash-es/_baseRange.js","../../node_modules/lodash-es/range.js","../../node_modules/lodash-es/_createRange.js","../../node_modules/lodash-es/sortBy.js","../../node_modules/lodash-es/uniqueId.js","../../node_modules/dagre-d3-es/src/dagre/data/list.js","../../node_modules/dagre-d3-es/src/dagre/greedy-fas.js","../../node_modules/dagre-d3-es/src/dagre/acyclic.js","../../node_modules/dagre-d3-es/src/dagre/util.js","../../node_modules/dagre-d3-es/src/dagre/add-border-segments.js","../../node_modules/dagre-d3-es/src/dagre/coordinate-system.js","../../node_modules/dagre-d3-es/src/dagre/normalize.js","../../node_modules/dagre-d3-es/src/dagre/rank/util.js","../../node_modules/dagre-d3-es/src/dagre/rank/feasible-tree.js","../../node_modules/dagre-d3-es/src/graphlib/alg/dfs.js","../../node_modules/dagre-d3-es/src/dagre/rank/network-simplex.js","../../node_modules/dagre-d3-es/src/graphlib/alg/postorder.js","../../node_modules/dagre-d3-es/src/graphlib/alg/preorder.js","../../node_modules/dagre-d3-es/src/dagre/rank/index.js","../../node_modules/dagre-d3-es/src/graphlib/alg/topsort.js","../../node_modules/dagre-d3-es/src/dagre/nesting-graph.js","../../node_modules/dagre-d3-es/src/dagre/order/build-layer-graph.js","../../node_modules/dagre-d3-es/src/dagre/order/cross-count.js","../../node_modules/lodash-es/zipObject.js","../../node_modules/lodash-es/_baseZipObject.js","../../node_modules/dagre-d3-es/src/dagre/order/resolve-conflicts.js","../../node_modules/dagre-d3-es/src/dagre/order/sort.js","../../node_modules/dagre-d3-es/src/dagre/order/sort-subgraph.js","../../node_modules/dagre-d3-es/src/dagre/order/barycenter.js","../../node_modules/dagre-d3-es/src/dagre/order/index.js","../../node_modules/dagre-d3-es/src/dagre/order/init-order.js","../../node_modules/lodash-es/cloneDeep.js","../../node_modules/dagre-d3-es/src/dagre/order/add-subgraph-constraints.js","../../node_modules/dagre-d3-es/src/dagre/parent-dummy-chains.js","../../node_modules/dagre-d3-es/src/dagre/position/bk.js","../../node_modules/lodash-es/forIn.js","../../node_modules/dagre-d3-es/src/dagre/position/index.js","../../node_modules/lodash-es/forOwn.js","../../node_modules/dagre-d3-es/src/dagre/layout.js"],"sourcesContent":["/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import toNumber from './toNumber.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nexport default toFinite;\n","import baseFlatten from './_baseFlatten.js';\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nexport default flatten;\n","import root from './_root.js';\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nexport default now;\n","import baseRest from './_baseRest.js';\nimport eq from './eq.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport keysIn from './keysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(object, sources) {\n  object = Object(object);\n\n  var index = -1;\n  var length = sources.length;\n  var guard = length > 2 ? sources[2] : undefined;\n\n  if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n    length = 1;\n  }\n\n  while (++index < length) {\n    var source = sources[index];\n    var props = keysIn(source);\n    var propsIndex = -1;\n    var propsLength = props.length;\n\n    while (++propsIndex < propsLength) {\n      var key = props[propsIndex];\n      var value = object[key];\n\n      if (value === undefined ||\n          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        object[key] = source[key];\n      }\n    }\n  }\n\n  return object;\n});\n\nexport default defaults;\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","import baseFindIndex from './_baseFindIndex.js';\nimport baseIteratee from './_baseIteratee.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nexport default findIndex;\n","import baseIteratee from './_baseIteratee.js';\nimport isArrayLike from './isArrayLike.js';\nimport keys from './keys.js';\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nexport default createFind;\n","import createFind from './_createFind.js';\nimport findIndex from './findIndex.js';\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nexport default find;\n","import toFinite from './toFinite.js';\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nexport default toInteger;\n","import baseEach from './_baseEach.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nexport default baseMap;\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nexport default map;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nexport default baseGt;\n","/**\n * The base implementation of `_.lt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n */\nfunction baseLt(value, other) {\n  return value < other;\n}\n\nexport default baseLt;\n","import baseAssignValue from './_baseAssignValue.js';\nimport baseForOwn from './_baseForOwn.js';\nimport baseIteratee from './_baseIteratee.js';\n\n/**\n * Creates an object with the same keys as `object` and values generated\n * by running each own enumerable string keyed property of `object` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapKeys\n * @example\n *\n * var users = {\n *   'fred':    { 'user': 'fred',    'age': 40 },\n *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n * };\n *\n * _.mapValues(users, function(o) { return o.age; });\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n *\n * // The `_.property` iteratee shorthand.\n * _.mapValues(users, 'age');\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n */\nfunction mapValues(object, iteratee) {\n  var result = {};\n  iteratee = baseIteratee(iteratee, 3);\n\n  baseForOwn(object, function(value, key, object) {\n    baseAssignValue(result, key, iteratee(value, key, object));\n  });\n  return result;\n}\n\nexport default mapValues;\n","import isSymbol from './isSymbol.js';\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nexport default baseExtremum;\n","import baseExtremum from './_baseExtremum.js';\nimport baseGt from './_baseGt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nexport default max;\n","import baseExtremum from './_baseExtremum.js';\nimport baseLt from './_baseLt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the minimum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * _.min([4, 2, 8, 6]);\n * // => 2\n *\n * _.min([]);\n * // => undefined\n */\nfunction min(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseLt)\n    : undefined;\n}\n\nexport default min;\n","import baseExtremum from './_baseExtremum.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseLt from './_baseLt.js';\n\n/**\n * This method is like `_.min` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * the value is ranked. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * var objects = [{ 'n': 1 }, { 'n': 2 }];\n *\n * _.minBy(objects, function(o) { return o.n; });\n * // => { 'n': 1 }\n *\n * // The `_.property` iteratee shorthand.\n * _.minBy(objects, 'n');\n * // => { 'n': 1 }\n */\nfunction minBy(array, iteratee) {\n  return (array && array.length)\n    ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt)\n    : undefined;\n}\n\nexport default minBy;\n","import assignValue from './_assignValue.js';\nimport castPath from './_castPath.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nexport default baseSet;\n","import isSymbol from './isSymbol.js';\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nexport default compareAscending;\n","import arrayMap from './_arrayMap.js';\nimport baseGet from './_baseGet.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport baseSortBy from './_baseSortBy.js';\nimport baseUnary from './_baseUnary.js';\nimport compareMultiple from './_compareMultiple.js';\nimport identity from './identity.js';\nimport isArray from './isArray.js';\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        }\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nexport default baseOrderBy;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nexport default baseSortBy;\n","import compareAscending from './_compareAscending.js';\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nexport default compareMultiple;\n","import basePickBy from './_basePickBy.js';\nimport hasIn from './hasIn.js';\n\n/**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @returns {Object} Returns the new object.\n */\nfunction basePick(object, paths) {\n  return basePickBy(object, paths, function(value, path) {\n    return hasIn(object, path);\n  });\n}\n\nexport default basePick;\n","import baseGet from './_baseGet.js';\nimport baseSet from './_baseSet.js';\nimport castPath from './_castPath.js';\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nexport default basePickBy;\n","import basePick from './_basePick.js';\nimport flatRest from './_flatRest.js';\n\n/**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */\nvar pick = flatRest(function(object, paths) {\n  return object == null ? {} : basePick(object, paths);\n});\n\nexport default pick;\n","import flatten from './flatten.js';\nimport overRest from './_overRest.js';\nimport setToString from './_setToString.js';\n\n/**\n * A specialized version of `baseRest` which flattens the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @returns {Function} Returns the new function.\n */\nfunction flatRest(func) {\n  return setToString(overRest(func, undefined, flatten), func + '');\n}\n\nexport default flatRest;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * The base implementation of `_.range` and `_.rangeRight` which doesn't\n * coerce arguments.\n *\n * @private\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @param {number} step The value to increment or decrement by.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the range of numbers.\n */\nfunction baseRange(start, end, step, fromRight) {\n  var index = -1,\n      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n      result = Array(length);\n\n  while (length--) {\n    result[fromRight ? length : ++index] = start;\n    start += step;\n  }\n  return result;\n}\n\nexport default baseRange;\n","import createRange from './_createRange.js';\n\n/**\n * Creates an array of numbers (positive and/or negative) progressing from\n * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n * `start` is specified without an `end` or `step`. If `end` is not specified,\n * it's set to `start` with `start` then set to `0`.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @param {number} [step=1] The value to increment or decrement by.\n * @returns {Array} Returns the range of numbers.\n * @see _.inRange, _.rangeRight\n * @example\n *\n * _.range(4);\n * // => [0, 1, 2, 3]\n *\n * _.range(-4);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 5);\n * // => [1, 2, 3, 4]\n *\n * _.range(0, 20, 5);\n * // => [0, 5, 10, 15]\n *\n * _.range(0, -4, -1);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 4, 0);\n * // => [1, 1, 1]\n *\n * _.range(0);\n * // => []\n */\nvar range = createRange();\n\nexport default range;\n","import baseRange from './_baseRange.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport toFinite from './toFinite.js';\n\n/**\n * Creates a `_.range` or `_.rangeRight` function.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new range function.\n */\nfunction createRange(fromRight) {\n  return function(start, end, step) {\n    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n      end = step = undefined;\n    }\n    // Ensure the sign of `-0` is preserved.\n    start = toFinite(start);\n    if (end === undefined) {\n      end = start;\n      start = 0;\n    } else {\n      end = toFinite(end);\n    }\n    step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n    return baseRange(start, end, step, fromRight);\n  };\n}\n\nexport default createRange;\n","import baseFlatten from './_baseFlatten.js';\nimport baseOrderBy from './_baseOrderBy.js';\nimport baseRest from './_baseRest.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 30 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\nexport default sortBy;\n","import toString from './toString.js';\n\n/** Used to generate unique IDs. */\nvar idCounter = 0;\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nexport default uniqueId;\n","/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */\n\nexport { List };\n\nclass List {\n  constructor() {\n    var sentinel = {};\n    sentinel._next = sentinel._prev = sentinel;\n    this._sentinel = sentinel;\n  }\n  dequeue() {\n    var sentinel = this._sentinel;\n    var entry = sentinel._prev;\n    if (entry !== sentinel) {\n      unlink(entry);\n      return entry;\n    }\n  }\n  enqueue(entry) {\n    var sentinel = this._sentinel;\n    if (entry._prev && entry._next) {\n      unlink(entry);\n    }\n    entry._next = sentinel._next;\n    sentinel._next._prev = entry;\n    sentinel._next = entry;\n    entry._prev = sentinel;\n  }\n  toString() {\n    var strs = [];\n    var sentinel = this._sentinel;\n    var curr = sentinel._prev;\n    while (curr !== sentinel) {\n      strs.push(JSON.stringify(curr, filterOutLinks));\n      curr = curr._prev;\n    }\n    return '[' + strs.join(', ') + ']';\n  }\n}\n\nfunction unlink(entry) {\n  entry._prev._next = entry._next;\n  entry._next._prev = entry._prev;\n  delete entry._next;\n  delete entry._prev;\n}\n\nfunction filterOutLinks(k, v) {\n  if (k !== '_next' && k !== '_prev') {\n    return v;\n  }\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { List } from './data/list.js';\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nexport { greedyFAS };\n\nvar DEFAULT_WEIGHT_FN = _.constant(1);\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return _.flatten(\n    _.map(results, function (e) {\n      return g.outEdges(e.v, e.w);\n    })\n  );\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  var results = [];\n  var sources = buckets[buckets.length - 1];\n  var sinks = buckets[0];\n\n  var entry;\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    while ((entry = sources.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    if (g.nodeCount()) {\n      for (var i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  var results = collectPredecessors ? [] : undefined;\n\n  _.forEach(g.inEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  _.forEach(g.outEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var w = edge.w;\n    var wEntry = g.node(w);\n    wEntry['in'] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  var fasGraph = new Graph();\n  var maxIn = 0;\n  var maxOut = 0;\n\n  _.forEach(g.nodes(), function (v) {\n    fasGraph.setNode(v, { v: v, in: 0, out: 0 });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  _.forEach(g.edges(), function (e) {\n    var prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    var weight = weightFn(e);\n    var edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, (fasGraph.node(e.v).out += weight));\n    maxIn = Math.max(maxIn, (fasGraph.node(e.w)['in'] += weight));\n  });\n\n  var buckets = _.range(maxOut + maxIn + 3).map(function () {\n    return new List();\n  });\n  var zeroIdx = maxIn + 1;\n\n  _.forEach(fasGraph.nodes(), function (v) {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry['in']) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry);\n  }\n}\n","import * as _ from 'lodash-es';\nimport { greedyFAS } from './greedy-fas.js';\n\nexport { run, undo };\n\nfunction run(g) {\n  var fas = g.graph().acyclicer === 'greedy' ? greedyFAS(g, weightFn(g)) : dfsFAS(g);\n  _.forEach(fas, function (e) {\n    var label = g.edge(e);\n    g.removeEdge(e);\n    label.forwardName = e.name;\n    label.reversed = true;\n    g.setEdge(e.w, e.v, label, _.uniqueId('rev'));\n  });\n\n  function weightFn(g) {\n    return function (e) {\n      return g.edge(e).weight;\n    };\n  }\n}\n\nfunction dfsFAS(g) {\n  var fas = [];\n  var stack = {};\n  var visited = {};\n\n  function dfs(v) {\n    if (_.has(visited, v)) {\n      return;\n    }\n    visited[v] = true;\n    stack[v] = true;\n    _.forEach(g.outEdges(v), function (e) {\n      if (_.has(stack, e.w)) {\n        fas.push(e);\n      } else {\n        dfs(e.w);\n      }\n    });\n    delete stack[v];\n  }\n\n  _.forEach(g.nodes(), dfs);\n  return fas;\n}\n\nfunction undo(g) {\n  _.forEach(g.edges(), function (e) {\n    var label = g.edge(e);\n    if (label.reversed) {\n      g.removeEdge(e);\n\n      var forwardName = label.forwardName;\n      delete label.reversed;\n      delete label.forwardName;\n      g.setEdge(e.w, e.v, label, forwardName);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\n\nexport {\n  addDummyNode,\n  simplify,\n  asNonCompoundGraph,\n  successorWeights,\n  predecessorWeights,\n  intersectRect,\n  buildLayerMatrix,\n  normalizeRanks,\n  removeEmptyRanks,\n  addBorderNode,\n  maxRank,\n  partition,\n  time,\n  notime,\n};\n\n/*\n * Adds a dummy node to the graph and return v.\n */\nfunction addDummyNode(g, type, attrs, name) {\n  var v;\n  do {\n    v = _.uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nfunction simplify(g) {\n  var simplified = new Graph().setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    simplified.setNode(v, g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };\n    var label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen),\n    });\n  });\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n  _.forEach(g.edges(), function (e) {\n    simplified.setEdge(e, g.edge(e));\n  });\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var sucs = {};\n    _.forEach(g.outEdges(v), function (e) {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n    return sucs;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var preds = {};\n    _.forEach(g.inEdges(v), function (e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n    return preds;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nfunction intersectRect(rect, point) {\n  var x = rect.x;\n  var y = rect.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = rect.width / 2;\n  var h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error('Not possible to find intersection inside of the rectangle');\n  }\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = (h * dx) / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = (w * dy) / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\nfunction buildLayerMatrix(g) {\n  var layering = _.map(_.range(maxRank(g) + 1), function () {\n    return [];\n  });\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    var rank = node.rank;\n    if (!_.isUndefined(rank)) {\n      layering[rank][node.order] = v;\n    }\n  });\n  return layering;\n}\n\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nfunction normalizeRanks(g) {\n  var min = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (_.has(node, 'rank')) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  var offset = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n\n  var layers = [];\n  _.forEach(g.nodes(), function (v) {\n    var rank = g.node(v).rank - offset;\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n    layers[rank].push(v);\n  });\n\n  var delta = 0;\n  var nodeRankFactor = g.graph().nodeRankFactor;\n  _.forEach(layers, function (vs, i) {\n    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (delta) {\n      _.forEach(vs, function (v) {\n        g.node(v).rank += delta;\n      });\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  var node = {\n    width: 0,\n    height: 0,\n  };\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n  return addDummyNode(g, 'border', node, prefix);\n}\n\nfunction maxRank(g) {\n  return _.max(\n    _.map(g.nodes(), function (v) {\n      var rank = g.node(v).rank;\n      if (!_.isUndefined(rank)) {\n        return rank;\n      }\n    })\n  );\n}\n\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nfunction partition(collection, fn) {\n  var result = { lhs: [], rhs: [] };\n  _.forEach(collection, function (value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n}\n\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\nfunction time(name, fn) {\n  var start = _.now();\n  try {\n    return fn();\n  } finally {\n    console.log(name + ' time: ' + (_.now() - start) + 'ms');\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { addBorderSegments };\n\nfunction addBorderSegments(g) {\n  function dfs(v) {\n    var children = g.children(v);\n    var node = g.node(v);\n    if (children.length) {\n      _.forEach(children, dfs);\n    }\n\n    if (_.has(node, 'minRank')) {\n      node.borderLeft = [];\n      node.borderRight = [];\n      for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {\n        addBorderNode(g, 'borderLeft', '_bl', v, node, rank);\n        addBorderNode(g, 'borderRight', '_br', v, node, rank);\n      }\n    }\n  }\n\n  _.forEach(g.children(), dfs);\n}\n\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n  var label = { width: 0, height: 0, rank: rank, borderType: prop };\n  var prev = sgNode[prop][rank - 1];\n  var curr = util.addDummyNode(g, 'border', label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n  if (prev) {\n    g.setEdge(prev, curr, { weight: 1 });\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { adjust, undo };\n\nfunction adjust(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapWidthHeight(g);\n  }\n}\n\nfunction undo(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'bt' || rankDir === 'rl') {\n    reverseY(g);\n  }\n\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapXY(g);\n    swapWidthHeight(g);\n  }\n}\n\nfunction swapWidthHeight(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapWidthHeightOne(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    swapWidthHeightOne(g.edge(e));\n  });\n}\n\nfunction swapWidthHeightOne(attrs) {\n  var w = attrs.width;\n  attrs.width = attrs.height;\n  attrs.height = w;\n}\n\nfunction reverseY(g) {\n  _.forEach(g.nodes(), function (v) {\n    reverseYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, reverseYOne);\n    if (_.has(edge, 'y')) {\n      reverseYOne(edge);\n    }\n  });\n}\n\nfunction reverseYOne(attrs) {\n  attrs.y = -attrs.y;\n}\n\nfunction swapXY(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapXYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, swapXYOne);\n    if (_.has(edge, 'x')) {\n      swapXYOne(edge);\n    }\n  });\n}\n\nfunction swapXYOne(attrs) {\n  var x = attrs.x;\n  attrs.x = attrs.y;\n  attrs.y = x;\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, undo };\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  _.forEach(g.edges(), function (edge) {\n    normalizeEdge(g, edge);\n  });\n}\n\nfunction normalizeEdge(g, e) {\n  var v = e.v;\n  var vRank = g.node(v).rank;\n  var w = e.w;\n  var wRank = g.node(w).rank;\n  var name = e.name;\n  var edgeLabel = g.edge(e);\n  var labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdge(e);\n\n  var dummy, attrs, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0,\n      height: 0,\n      edgeLabel: edgeLabel,\n      edgeObj: e,\n      rank: vRank,\n    };\n    dummy = util.addDummyNode(g, 'edge', attrs, '_d');\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      // @ts-expect-error\n      attrs.dummy = 'edge-label';\n      // @ts-expect-error\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\n\nfunction undo(g) {\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var origLabel = node.edgeLabel;\n    var w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === 'edge-label') {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { longestPath, slack };\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (_.has(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = _.min(\n      _.map(g.outEdges(v), function (e) {\n        return dfs(e.w) - g.edge(e).minlen;\n      })\n    );\n\n    if (\n      rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n      rank === undefined || // return value of _.map([]) for Lodash 4\n      rank === null\n    ) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  _.forEach(g.sources(), dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport { slack } from './util.js';\n\nexport { feasibleTree };\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function (e) {\n      var edgeV = e.v,\n        w = v === edgeV ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function (e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function (v) {\n    g.node(v).rank += delta;\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { dfs };\n\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * Order must be one of \"pre\" or \"post\".\n */\nfunction dfs(g, vs, order) {\n  if (!_.isArray(vs)) {\n    vs = [vs];\n  }\n\n  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n\n  var acc = [];\n  var visited = {};\n  _.each(vs, function (v) {\n    if (!g.hasNode(v)) {\n      throw new Error('Graph does not have node: ' + v);\n    }\n\n    doDfs(g, v, order === 'post', visited, navigation, acc);\n  });\n  return acc;\n}\n\nfunction doDfs(g, v, postorder, visited, navigation, acc) {\n  if (!_.has(visited, v)) {\n    visited[v] = true;\n\n    if (!postorder) {\n      acc.push(v);\n    }\n    _.each(navigation(v), function (w) {\n      doDfs(g, w, postorder, visited, navigation, acc);\n    });\n    if (postorder) {\n      acc.push(v);\n    }\n  }\n}\n","import * as _ from 'lodash-es';\nimport * as alg from '../../graphlib/alg/index.js';\nimport { simplify } from '../util.js';\nimport { feasibleTree } from './feasible-tree.js';\nimport { longestPath, slack } from './util.js';\n\nexport { networkSimplex };\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  longestPath(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n\n  var e, f;\n  while ((e = leaveEdge(t))) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = alg.postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  _.forEach(vs, function (v) {\n    assignCutValue(t, g, v);\n  });\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  var childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  var graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  var cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  _.forEach(g.nodeEdges(child), function (e) {\n    var isOutEdge = e.v === child,\n      other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n        otherWeight = g.edge(e).weight;\n\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n\n  visited[v] = true;\n  _.forEach(tree.neighbors(v), function (w) {\n    if (!_.has(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return _.find(tree.edges(), function (e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = _.filter(g.edges(), function (edge) {\n    return (\n      flip === isDescendant(t, t.node(edge.v), tailLabel) &&\n      flip !== isDescendant(t, t.node(edge.w), tailLabel)\n    );\n  });\n\n  return _.minBy(candidates, function (edge) {\n    return slack(g, edge);\n  });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = _.find(t.nodes(), function (v) {\n    return !g.node(v).parent;\n  });\n  var vs = alg.preorder(t, root);\n  vs = vs.slice(1);\n  _.forEach(vs, function (v) {\n    var parent = t.node(v).parent,\n      edge = g.edge(v, parent),\n      flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n","import { dfs } from './dfs.js';\n\nexport { postorder };\n\nfunction postorder(g, vs) {\n  return dfs(g, vs, 'post');\n}\n","import { dfs } from './dfs.js';\n\nexport { preorder };\n\nfunction preorder(g, vs) {\n  return dfs(g, vs, 'pre');\n}\n","import { feasibleTree } from './feasible-tree.js';\nimport { networkSimplex } from './network-simplex.js';\nimport { longestPath } from './util.js';\n\nexport { rank };\n\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */\nfunction rank(g) {\n  switch (g.graph().ranker) {\n    case 'network-simplex':\n      networkSimplexRanker(g);\n      break;\n    case 'tight-tree':\n      tightTreeRanker(g);\n      break;\n    case 'longest-path':\n      longestPathRanker(g);\n      break;\n    default:\n      networkSimplexRanker(g);\n  }\n}\n\n// A fast and simple ranker, but results are far from optimal.\nvar longestPathRanker = longestPath;\n\nfunction tightTreeRanker(g) {\n  longestPath(g);\n  feasibleTree(g);\n}\n\nfunction networkSimplexRanker(g) {\n  networkSimplex(g);\n}\n","import * as _ from 'lodash-es';\n\nexport { topsort, CycleException };\n\ntopsort.CycleException = CycleException;\n\nfunction topsort(g) {\n  var visited = {};\n  var stack = {};\n  var results = [];\n\n  function visit(node) {\n    if (_.has(stack, node)) {\n      throw new CycleException();\n    }\n\n    if (!_.has(visited, node)) {\n      stack[node] = true;\n      visited[node] = true;\n      _.each(g.predecessors(node), visit);\n      delete stack[node];\n      results.push(node);\n    }\n  }\n\n  _.each(g.sinks(), visit);\n\n  if (_.size(visited) !== g.nodeCount()) {\n    throw new CycleException();\n  }\n\n  return results;\n}\n\nfunction CycleException() {}\nCycleException.prototype = new Error(); // must be an instance of Error to pass testing\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, cleanup };\n\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nfunction run(g) {\n  var root = util.addDummyNode(g, 'root', {}, '_root');\n  var depths = treeDepths(g);\n  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array\n  var nodeSep = 2 * height + 1;\n\n  g.graph().nestingRoot = root;\n\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  _.forEach(g.edges(), function (e) {\n    g.edge(e).minlen *= nodeSep;\n  });\n\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  var weight = sumWeights(g) + 1;\n\n  // Create border nodes and link them up\n  _.forEach(g.children(), function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  });\n\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n}\n\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n    }\n    return;\n  }\n\n  var top = util.addBorderNode(g, '_bt');\n  var bottom = util.addBorderNode(g, '_bb');\n  var label = g.node(v);\n\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  _.forEach(children, function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n  }\n}\n\nfunction treeDepths(g) {\n  var depths = {};\n  function dfs(v, depth) {\n    var children = g.children(v);\n    if (children && children.length) {\n      _.forEach(children, function (child) {\n        dfs(child, depth + 1);\n      });\n    }\n    depths[v] = depth;\n  }\n  _.forEach(g.children(), function (v) {\n    dfs(v, 1);\n  });\n  return depths;\n}\n\nfunction sumWeights(g) {\n  return _.reduce(\n    g.edges(),\n    function (acc, e) {\n      return acc + g.edge(e).weight;\n    },\n    0\n  );\n}\n\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\n\nexport { buildLayerGraph };\n\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nfunction buildLayerGraph(g, rank, relationship) {\n  var root = createRootNode(g),\n    result = new Graph({ compound: true })\n      .setGraph({ root: root })\n      .setDefaultNodeLabel(function (v) {\n        return g.node(v);\n      });\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v),\n      parent = g.parent(v);\n\n    if (node.rank === rank || (node.minRank <= rank && rank <= node.maxRank)) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n\n      // This assumes we have only short edges!\n      _.forEach(g[relationship](v), function (e) {\n        var u = e.v === v ? e.w : e.v,\n          edge = result.edge(u, v),\n          weight = !_.isUndefined(edge) ? edge.weight : 0;\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\n      });\n\n      if (_.has(node, 'minRank')) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank],\n        });\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode((v = _.uniqueId('_root'))));\n  return v;\n}\n","import * as _ from 'lodash-es';\n\nexport { crossCount };\n\n/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */\nfunction crossCount(g, layering) {\n  var cc = 0;\n  for (var i = 1; i < layering.length; ++i) {\n    cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);\n  }\n  return cc;\n}\n\nfunction twoLayerCrossCount(g, northLayer, southLayer) {\n  // Sort all of the edges between the north and south layers by their position\n  // in the north layer and then the south. Map these edges to the position of\n  // their head in the south layer.\n  var southPos = _.zipObject(\n    southLayer,\n    _.map(southLayer, function (v, i) {\n      return i;\n    })\n  );\n  var southEntries = _.flatten(\n    _.map(northLayer, function (v) {\n      return _.sortBy(\n        _.map(g.outEdges(v), function (e) {\n          return { pos: southPos[e.w], weight: g.edge(e).weight };\n        }),\n        'pos'\n      );\n    })\n  );\n\n  // Build the accumulator tree\n  var firstIndex = 1;\n  while (firstIndex < southLayer.length) firstIndex <<= 1;\n  var treeSize = 2 * firstIndex - 1;\n  firstIndex -= 1;\n  var tree = _.map(new Array(treeSize), function () {\n    return 0;\n  });\n\n  // Calculate the weighted crossings\n  var cc = 0;\n  _.forEach(\n    // @ts-expect-error\n    southEntries.forEach(function (entry) {\n      var index = entry.pos + firstIndex;\n      tree[index] += entry.weight;\n      var weightSum = 0;\n      // @ts-expect-error\n      while (index > 0) {\n        // @ts-expect-error\n        if (index % 2) {\n          weightSum += tree[index + 1];\n        }\n        // @ts-expect-error\n        index = (index - 1) >> 1;\n        tree[index] += entry.weight;\n      }\n      cc += entry.weight * weightSum;\n    })\n  );\n\n  return cc;\n}\n","import assignValue from './_assignValue.js';\nimport baseZipObject from './_baseZipObject.js';\n\n/**\n * This method is like `_.fromPairs` except that it accepts two arrays,\n * one of property identifiers and one of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 0.4.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.zipObject(['a', 'b'], [1, 2]);\n * // => { 'a': 1, 'b': 2 }\n */\nfunction zipObject(props, values) {\n  return baseZipObject(props || [], values || [], assignValue);\n}\n\nexport default zipObject;\n","/**\n * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n *\n * @private\n * @param {Array} props The property identifiers.\n * @param {Array} values The property values.\n * @param {Function} assignFunc The function to assign values.\n * @returns {Object} Returns the new object.\n */\nfunction baseZipObject(props, values, assignFunc) {\n  var index = -1,\n      length = props.length,\n      valsLength = values.length,\n      result = {};\n\n  while (++index < length) {\n    var value = index < valsLength ? values[index] : undefined;\n    assignFunc(result, props[index], value);\n  }\n  return result;\n}\n\nexport default baseZipObject;\n","import * as _ from 'lodash-es';\n\nexport { resolveConflicts };\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nfunction resolveConflicts(entries, cg) {\n  var mappedEntries = {};\n  _.forEach(entries, function (entry, i) {\n    var tmp = (mappedEntries[entry.v] = {\n      indegree: 0,\n      in: [],\n      out: [],\n      vs: [entry.v],\n      i: i,\n    });\n    if (!_.isUndefined(entry.barycenter)) {\n      // @ts-expect-error\n      tmp.barycenter = entry.barycenter;\n      // @ts-expect-error\n      tmp.weight = entry.weight;\n    }\n  });\n\n  _.forEach(cg.edges(), function (e) {\n    var entryV = mappedEntries[e.v];\n    var entryW = mappedEntries[e.w];\n    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n\n  var sourceSet = _.filter(mappedEntries, function (entry) {\n    // @ts-expect-error\n    return !entry.indegree;\n  });\n\n  return doResolveConflicts(sourceSet);\n}\n\nfunction doResolveConflicts(sourceSet) {\n  var entries = [];\n\n  function handleIn(vEntry) {\n    return function (uEntry) {\n      if (uEntry.merged) {\n        return;\n      }\n      if (\n        _.isUndefined(uEntry.barycenter) ||\n        _.isUndefined(vEntry.barycenter) ||\n        uEntry.barycenter >= vEntry.barycenter\n      ) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n\n  function handleOut(vEntry) {\n    return function (wEntry) {\n      wEntry['in'].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n\n  while (sourceSet.length) {\n    var entry = sourceSet.pop();\n    entries.push(entry);\n    _.forEach(entry['in'].reverse(), handleIn(entry));\n    _.forEach(entry.out, handleOut(entry));\n  }\n\n  return _.map(\n    _.filter(entries, function (entry) {\n      return !entry.merged;\n    }),\n    function (entry) {\n      return _.pick(entry, ['vs', 'i', 'barycenter', 'weight']);\n    }\n  );\n}\n\nfunction mergeEntries(target, source) {\n  var sum = 0;\n  var weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\n\nexport { sort };\n\nfunction sort(entries, biasRight) {\n  var parts = util.partition(entries, function (entry) {\n    return _.has(entry, 'barycenter');\n  });\n  var sortable = parts.lhs,\n    unsortable = _.sortBy(parts.rhs, function (entry) {\n      return -entry.i;\n    }),\n    vs = [],\n    sum = 0,\n    weight = 0,\n    vsIndex = 0;\n\n  sortable.sort(compareWithBias(!!biasRight));\n\n  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n\n  _.forEach(sortable, function (entry) {\n    vsIndex += entry.vs.length;\n    vs.push(entry.vs);\n    sum += entry.barycenter * entry.weight;\n    weight += entry.weight;\n    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n  });\n\n  var result = { vs: _.flatten(vs) };\n  if (weight) {\n    result.barycenter = sum / weight;\n    result.weight = weight;\n  }\n  return result;\n}\n\nfunction consumeUnsortable(vs, unsortable, index) {\n  var last;\n  while (unsortable.length && (last = _.last(unsortable)).i <= index) {\n    unsortable.pop();\n    vs.push(last.vs);\n    index++;\n  }\n  return index;\n}\n\nfunction compareWithBias(bias) {\n  return function (entryV, entryW) {\n    if (entryV.barycenter < entryW.barycenter) {\n      return -1;\n    } else if (entryV.barycenter > entryW.barycenter) {\n      return 1;\n    }\n\n    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n  };\n}\n","import * as _ from 'lodash-es';\nimport { barycenter } from './barycenter.js';\nimport { resolveConflicts } from './resolve-conflicts.js';\nimport { sort } from './sort.js';\n\nexport { sortSubgraph };\n\nfunction sortSubgraph(g, v, cg, biasRight) {\n  var movable = g.children(v);\n  var node = g.node(v);\n  var bl = node ? node.borderLeft : undefined;\n  var br = node ? node.borderRight : undefined;\n  var subgraphs = {};\n\n  if (bl) {\n    movable = _.filter(movable, function (w) {\n      return w !== bl && w !== br;\n    });\n  }\n\n  var barycenters = barycenter(g, movable);\n  _.forEach(barycenters, function (entry) {\n    if (g.children(entry.v).length) {\n      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n      subgraphs[entry.v] = subgraphResult;\n      if (_.has(subgraphResult, 'barycenter')) {\n        mergeBarycenters(entry, subgraphResult);\n      }\n    }\n  });\n\n  var entries = resolveConflicts(barycenters, cg);\n  expandSubgraphs(entries, subgraphs);\n\n  var result = sort(entries, biasRight);\n\n  if (bl) {\n    result.vs = _.flatten([bl, result.vs, br]);\n    if (g.predecessors(bl).length) {\n      var blPred = g.node(g.predecessors(bl)[0]),\n        brPred = g.node(g.predecessors(br)[0]);\n      if (!_.has(result, 'barycenter')) {\n        result.barycenter = 0;\n        result.weight = 0;\n      }\n      result.barycenter =\n        (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);\n      result.weight += 2;\n    }\n  }\n\n  return result;\n}\n\nfunction expandSubgraphs(entries, subgraphs) {\n  _.forEach(entries, function (entry) {\n    entry.vs = _.flatten(\n      entry.vs.map(function (v) {\n        if (subgraphs[v]) {\n          return subgraphs[v].vs;\n        }\n        return v;\n      })\n    );\n  });\n}\n\nfunction mergeBarycenters(target, other) {\n  if (!_.isUndefined(target.barycenter)) {\n    target.barycenter =\n      (target.barycenter * target.weight + other.barycenter * other.weight) /\n      (target.weight + other.weight);\n    target.weight += other.weight;\n  } else {\n    target.barycenter = other.barycenter;\n    target.weight = other.weight;\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { barycenter };\n\nfunction barycenter(g, movable) {\n  return _.map(movable, function (v) {\n    var inV = g.inEdges(v);\n    if (!inV.length) {\n      return { v: v };\n    } else {\n      var result = _.reduce(\n        inV,\n        function (acc, e) {\n          var edge = g.edge(e),\n            nodeU = g.node(e.v);\n          return {\n            sum: acc.sum + edge.weight * nodeU.order,\n            weight: acc.weight + edge.weight,\n          };\n        },\n        { sum: 0, weight: 0 }\n      );\n\n      return {\n        v: v,\n        barycenter: result.sum / result.weight,\n        weight: result.weight,\n      };\n    }\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\nimport { addSubgraphConstraints } from './add-subgraph-constraints.js';\nimport { buildLayerGraph } from './build-layer-graph.js';\nimport { crossCount } from './cross-count.js';\nimport { initOrder } from './init-order.js';\nimport { sortSubgraph } from './sort-subgraph.js';\n\nexport { order };\n\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nfunction order(g) {\n  var maxRank = util.maxRank(g),\n    downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), 'inEdges'),\n    upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), 'outEdges');\n\n  var layering = initOrder(g);\n  assignOrder(g, layering);\n\n  var bestCC = Number.POSITIVE_INFINITY,\n    best;\n\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n\n    layering = util.buildLayerMatrix(g);\n    var cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = _.cloneDeep(layering);\n      bestCC = cc;\n    }\n  }\n\n  assignOrder(g, best);\n}\n\nfunction buildLayerGraphs(g, ranks, relationship) {\n  return _.map(ranks, function (rank) {\n    return buildLayerGraph(g, rank, relationship);\n  });\n}\n\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\n  var cg = new Graph();\n  _.forEach(layerGraphs, function (lg) {\n    var root = lg.graph().root;\n    var sorted = sortSubgraph(lg, root, cg, biasRight);\n    _.forEach(sorted.vs, function (v, i) {\n      lg.node(v).order = i;\n    });\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n}\n\nfunction assignOrder(g, layering) {\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, i) {\n      g.node(v).order = i;\n    });\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { initOrder };\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nfunction initOrder(g) {\n  var visited = {};\n  var simpleNodes = _.filter(g.nodes(), function (v) {\n    return !g.children(v).length;\n  });\n  var maxRank = _.max(\n    _.map(simpleNodes, function (v) {\n      return g.node(v).rank;\n    })\n  );\n  var layers = _.map(_.range(maxRank + 1), function () {\n    return [];\n  });\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n    layers[node.rank].push(v);\n    _.forEach(g.successors(v), dfs);\n  }\n\n  var orderedVs = _.sortBy(simpleNodes, function (v) {\n    return g.node(v).rank;\n  });\n  _.forEach(orderedVs, dfs);\n\n  return layers;\n}\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nexport default cloneDeep;\n","import * as _ from 'lodash-es';\n\nexport { addSubgraphConstraints };\n\nfunction addSubgraphConstraints(g, cg, vs) {\n  var prev = {},\n    rootPrev;\n\n  _.forEach(vs, function (v) {\n    var child = g.parent(v),\n      parent,\n      prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n\n  /*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      _.each(children, function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */\n}\n","import * as _ from 'lodash-es';\n\nexport { parentDummyChains };\n\nfunction parentDummyChains(g) {\n  var postorderNums = postorder(g);\n\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var edgeObj = node.edgeObj;\n    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    var path = pathData.path;\n    var lca = pathData.lca;\n    var pathIdx = 0;\n    var pathV = path[pathIdx];\n    var ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (\n          pathIdx < path.length - 1 &&\n          g.node((pathV = path[pathIdx + 1])).minRank <= node.rank\n        ) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n}\n\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction findPath(g, postorderNums, v, w) {\n  var vPath = [];\n  var wPath = [];\n  var low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  var parent;\n  var lca;\n\n  // Traverse up from v to find the LCA\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n\n  // Traverse from w to LCA\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return { path: vPath.concat(wPath.reverse()), lca: lca };\n}\n\nfunction postorder(g) {\n  var result = {};\n  var lim = 0;\n\n  function dfs(v) {\n    var low = lim;\n    _.forEach(g.children(v), dfs);\n    result[v] = { low: low, lim: lim++ };\n  }\n  _.forEach(g.children(), dfs);\n\n  return result;\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\n\n/*\n * This module provides coordinate assignment based on Brandes and Köpf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nexport {\n  positionX,\n  findType1Conflicts,\n  findType2Conflicts,\n  addConflict,\n  hasConflict,\n  verticalAlignment,\n  horizontalCompaction,\n  alignCoordinates,\n  findSmallestWidthAlignment,\n  balance,\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  var conflicts = {};\n\n  function visitLayer(prevLayer, layer) {\n    var // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = _.last(layer);\n\n    _.forEach(layer, function (v, i) {\n      var w = findOtherInnerSegmentNode(g, v),\n        k1 = w ? g.node(w).order : prevLayerLength;\n\n      if (w || v === lastNode) {\n        _.forEach(layer.slice(scanPos, i + 1), function (scanNode) {\n          _.forEach(g.predecessors(scanNode), function (u) {\n            var uLabel = g.node(u),\n              uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        // @ts-expect-error\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n\n    return layer;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findType2Conflicts(g, layering) {\n  var conflicts = {};\n\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    var v;\n    _.forEach(_.range(southPos, southEnd), function (i) {\n      v = south[i];\n      if (g.node(v).dummy) {\n        _.forEach(g.predecessors(v), function (u) {\n          var uNode = g.node(u);\n          if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n\n  function visitLayer(north, south) {\n    var prevNorthPos = -1,\n      nextNorthPos,\n      southPos = 0;\n\n    _.forEach(south, function (v, southLookahead) {\n      if (g.node(v).dummy === 'border') {\n        var predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          // @ts-expect-error\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n\n    return south;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return _.find(g.predecessors(v), function (u) {\n      return g.node(u).dummy;\n    });\n  }\n}\n\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  var conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\n\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return _.has(conflicts[v], w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  var root = {},\n    align = {},\n    pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, order) {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n\n  _.forEach(layering, function (layer) {\n    var prevIdx = -1;\n    _.forEach(layer, function (v) {\n      var ws = neighborFn(v);\n      if (ws.length) {\n        ws = _.sortBy(ws, function (w) {\n          return pos[w];\n        });\n        var mp = (ws.length - 1) / 2;\n        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          var w = ws[i];\n          if (align[v] === v && prevIdx < pos[w] && !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n\n  return { root: root, align: align };\n}\n\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  var xs = {},\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\n    borderType = reverseSep ? 'borderLeft' : 'borderRight';\n\n  function iterate(setXsFunc, nextNodesFunc) {\n    var stack = blockG.nodes();\n    var elem = stack.pop();\n    var visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n\n      elem = stack.pop();\n    }\n  }\n\n  // First pass, assign smallest coordinates\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce(function (acc, e) {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n\n  // Second pass, assign greatest coordinates\n  function pass2(elem) {\n    var min = blockG.outEdges(elem).reduce(function (acc, e) {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n\n    var node = g.node(elem);\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min);\n    }\n  }\n\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n\n  // Assign x coordinates to all nodes\n  _.forEach(align, function (v) {\n    xs[v] = xs[root[v]];\n  });\n\n  return xs;\n}\n\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  var blockGraph = new Graph(),\n    graphLabel = g.graph(),\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n\n  _.forEach(layering, function (layer) {\n    var u;\n    _.forEach(layer, function (v) {\n      var vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n          prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return _.minBy(_.values(xss), function (xs) {\n    var max = Number.NEGATIVE_INFINITY;\n    var min = Number.POSITIVE_INFINITY;\n\n    _.forIn(xs, function (x, v) {\n      var halfWidth = width(g, v) / 2;\n\n      max = Math.max(x + halfWidth, max);\n      min = Math.min(x - halfWidth, min);\n    });\n\n    return max - min;\n  });\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  var alignToVals = _.values(alignTo),\n    alignToMin = _.min(alignToVals),\n    alignToMax = _.max(alignToVals);\n\n  _.forEach(['u', 'd'], function (vert) {\n    _.forEach(['l', 'r'], function (horiz) {\n      var alignment = vert + horiz,\n        xs = xss[alignment],\n        delta;\n      if (xs === alignTo) return;\n\n      var xsVals = _.values(xs);\n      delta = horiz === 'l' ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);\n\n      if (delta) {\n        xss[alignment] = _.mapValues(xs, function (x) {\n          return x + delta;\n        });\n      }\n    });\n  });\n}\n\nfunction balance(xss, align) {\n  return _.mapValues(xss.ul, function (ignore, v) {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      var xs = _.sortBy(_.map(xss, v));\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\n\nfunction positionX(g) {\n  var layering = util.buildLayerMatrix(g);\n  var conflicts = _.merge(findType1Conflicts(g, layering), findType2Conflicts(g, layering));\n\n  var xss = {};\n  var adjustedLayering;\n  _.forEach(['u', 'd'], function (vert) {\n    adjustedLayering = vert === 'u' ? layering : _.values(layering).reverse();\n    _.forEach(['l', 'r'], function (horiz) {\n      if (horiz === 'r') {\n        adjustedLayering = _.map(adjustedLayering, function (inner) {\n          return _.values(inner).reverse();\n        });\n      }\n\n      var neighborFn = (vert === 'u' ? g.predecessors : g.successors).bind(g);\n      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      var xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === 'r');\n      if (horiz === 'r') {\n        xs = _.mapValues(xs, function (x) {\n          return -x;\n        });\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n\n  var smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\n\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return function (g, v, w) {\n    var vLabel = g.node(v);\n    var wLabel = g.node(w);\n    var sum = 0;\n    var delta;\n\n    sum += vLabel.width / 2;\n    if (_.has(vLabel, 'labelpos')) {\n      switch (vLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = -vLabel.width / 2;\n          break;\n        case 'r':\n          delta = vLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n\n    sum += wLabel.width / 2;\n    if (_.has(wLabel, 'labelpos')) {\n      switch (wLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = wLabel.width / 2;\n          break;\n        case 'r':\n          delta = -wLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    return sum;\n  };\n}\n\nfunction width(g, v) {\n  return g.node(v).width;\n}\n","import baseFor from './_baseFor.js';\nimport castFunction from './_castFunction.js';\nimport keysIn from './keysIn.js';\n\n/**\n * Iterates over own and inherited enumerable string keyed properties of an\n * object and invokes `iteratee` for each property. The iteratee is invoked\n * with three arguments: (value, key, object). Iteratee functions may exit\n * iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forInRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forIn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n */\nfunction forIn(object, iteratee) {\n  return object == null\n    ? object\n    : baseFor(object, castFunction(iteratee), keysIn);\n}\n\nexport default forIn;\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\nimport { positionX } from './bk.js';\n\nexport { position };\n\nfunction position(g) {\n  g = util.asNonCompoundGraph(g);\n\n  positionY(g);\n  _.forOwn(positionX(g), function (x, v) {\n    g.node(v).x = x;\n  });\n}\n\nfunction positionY(g) {\n  var layering = util.buildLayerMatrix(g);\n  var rankSep = g.graph().ranksep;\n  var prevY = 0;\n  _.forEach(layering, function (layer) {\n    var maxHeight = _.max(\n      _.map(layer, function (v) {\n        return g.node(v).height;\n      })\n    );\n    _.forEach(layer, function (v) {\n      g.node(v).y = prevY + maxHeight / 2;\n    });\n    prevY += maxHeight + rankSep;\n  });\n}\n","import baseForOwn from './_baseForOwn.js';\nimport castFunction from './_castFunction.js';\n\n/**\n * Iterates over own enumerable string keyed properties of an object and\n * invokes `iteratee` for each property. The iteratee is invoked with three\n * arguments: (value, key, object). Iteratee functions may exit iteration\n * early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forOwnRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forOwn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n */\nfunction forOwn(object, iteratee) {\n  return object && baseForOwn(object, castFunction(iteratee));\n}\n\nexport default forOwn;\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { addBorderSegments } from './add-border-segments.js';\nimport * as coordinateSystem from './coordinate-system.js';\nimport * as acyclic from './acyclic.js';\nimport * as normalize from './normalize.js';\nimport { rank } from './rank/index.js';\nimport * as nestingGraph from './nesting-graph.js';\nimport { order } from './order/index.js';\nimport { parentDummyChains } from './parent-dummy-chains.js';\nimport { position } from './position/index.js';\nimport * as util from './util.js';\n\nexport { layout };\n\nfunction layout(g, opts) {\n  var time = opts && opts.debugTiming ? util.time : util.notime;\n  time('layout', function () {\n    var layoutGraph = time('  buildLayoutGraph', function () {\n      return buildLayoutGraph(g);\n    });\n    time('  runLayout', function () {\n      runLayout(layoutGraph, time);\n    });\n    time('  updateInputGraph', function () {\n      updateInputGraph(g, layoutGraph);\n    });\n  });\n}\n\nfunction runLayout(g, time) {\n  time('    makeSpaceForEdgeLabels', function () {\n    makeSpaceForEdgeLabels(g);\n  });\n  time('    removeSelfEdges', function () {\n    removeSelfEdges(g);\n  });\n  time('    acyclic', function () {\n    acyclic.run(g);\n  });\n  time('    nestingGraph.run', function () {\n    nestingGraph.run(g);\n  });\n  time('    rank', function () {\n    rank(util.asNonCompoundGraph(g));\n  });\n  time('    injectEdgeLabelProxies', function () {\n    injectEdgeLabelProxies(g);\n  });\n  time('    removeEmptyRanks', function () {\n    util.removeEmptyRanks(g);\n  });\n  time('    nestingGraph.cleanup', function () {\n    nestingGraph.cleanup(g);\n  });\n  time('    normalizeRanks', function () {\n    util.normalizeRanks(g);\n  });\n  time('    assignRankMinMax', function () {\n    assignRankMinMax(g);\n  });\n  time('    removeEdgeLabelProxies', function () {\n    removeEdgeLabelProxies(g);\n  });\n  time('    normalize.run', function () {\n    normalize.run(g);\n  });\n  time('    parentDummyChains', function () {\n    parentDummyChains(g);\n  });\n  time('    addBorderSegments', function () {\n    addBorderSegments(g);\n  });\n  time('    order', function () {\n    order(g);\n  });\n  time('    insertSelfEdges', function () {\n    insertSelfEdges(g);\n  });\n  time('    adjustCoordinateSystem', function () {\n    coordinateSystem.adjust(g);\n  });\n  time('    position', function () {\n    position(g);\n  });\n  time('    positionSelfEdges', function () {\n    positionSelfEdges(g);\n  });\n  time('    removeBorderNodes', function () {\n    removeBorderNodes(g);\n  });\n  time('    normalize.undo', function () {\n    normalize.undo(g);\n  });\n  time('    fixupEdgeLabelCoords', function () {\n    fixupEdgeLabelCoords(g);\n  });\n  time('    undoCoordinateSystem', function () {\n    coordinateSystem.undo(g);\n  });\n  time('    translateGraph', function () {\n    translateGraph(g);\n  });\n  time('    assignNodeIntersects', function () {\n    assignNodeIntersects(g);\n  });\n  time('    reversePoints', function () {\n    reversePointsForReversedEdges(g);\n  });\n  time('    acyclic.undo', function () {\n    acyclic.undo(g);\n  });\n}\n\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction updateInputGraph(inputGraph, layoutGraph) {\n  _.forEach(inputGraph.nodes(), function (v) {\n    var inputLabel = inputGraph.node(v);\n    var layoutLabel = layoutGraph.node(v);\n\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n\n      if (layoutGraph.children(v).length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var inputLabel = inputGraph.edge(e);\n    var layoutLabel = layoutGraph.edge(e);\n\n    inputLabel.points = layoutLabel.points;\n    if (_.has(layoutLabel, 'x')) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n}\n\nvar graphNumAttrs = ['nodesep', 'edgesep', 'ranksep', 'marginx', 'marginy'];\nvar graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: 'tb' };\nvar graphAttrs = ['acyclicer', 'ranker', 'rankdir', 'align'];\nvar nodeNumAttrs = ['width', 'height'];\nvar nodeDefaults = { width: 0, height: 0 };\nvar edgeNumAttrs = ['minlen', 'weight', 'width', 'height', 'labeloffset'];\nvar edgeDefaults = {\n  minlen: 1,\n  weight: 1,\n  width: 0,\n  height: 0,\n  labeloffset: 10,\n  labelpos: 'r',\n};\nvar edgeAttrs = ['labelpos'];\n\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction buildLayoutGraph(inputGraph) {\n  var g = new Graph({ multigraph: true, compound: true });\n  var graph = canonicalize(inputGraph.graph());\n\n  g.setGraph(\n    _.merge({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), _.pick(graph, graphAttrs))\n  );\n\n  _.forEach(inputGraph.nodes(), function (v) {\n    var node = canonicalize(inputGraph.node(v));\n    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));\n    g.setParent(v, inputGraph.parent(v));\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var edge = canonicalize(inputGraph.edge(e));\n    g.setEdge(\n      e,\n      _.merge({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), _.pick(edge, edgeAttrs))\n    );\n  });\n\n  return g;\n}\n\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nfunction makeSpaceForEdgeLabels(g) {\n  var graph = g.graph();\n  graph.ranksep /= 2;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    edge.minlen *= 2;\n    if (edge.labelpos.toLowerCase() !== 'c') {\n      if (graph.rankdir === 'TB' || graph.rankdir === 'BT') {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n}\n\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nfunction injectEdgeLabelProxies(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.width && edge.height) {\n      var v = g.node(e.v);\n      var w = g.node(e.w);\n      var label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };\n      util.addDummyNode(g, 'edge-proxy', label, '_ep');\n    }\n  });\n}\n\nfunction assignRankMinMax(g) {\n  var maxRank = 0;\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      // @ts-expect-error\n      maxRank = _.max(maxRank, node.maxRank);\n    }\n  });\n  g.graph().maxRank = maxRank;\n}\n\nfunction removeEdgeLabelProxies(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'edge-proxy') {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction translateGraph(g) {\n  var minX = Number.POSITIVE_INFINITY;\n  var maxX = 0;\n  var minY = Number.POSITIVE_INFINITY;\n  var maxY = 0;\n  var graphLabel = g.graph();\n  var marginX = graphLabel.marginx || 0;\n  var marginY = graphLabel.marginy || 0;\n\n  function getExtremes(attrs) {\n    var x = attrs.x;\n    var y = attrs.y;\n    var w = attrs.width;\n    var h = attrs.height;\n    minX = Math.min(minX, x - w / 2);\n    maxX = Math.max(maxX, x + w / 2);\n    minY = Math.min(minY, y - h / 2);\n    maxY = Math.max(maxY, y + h / 2);\n  }\n\n  _.forEach(g.nodes(), function (v) {\n    getExtremes(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      getExtremes(edge);\n    }\n  });\n\n  minX -= marginX;\n  minY -= marginY;\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, function (p) {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (_.has(edge, 'x')) {\n      edge.x -= minX;\n    }\n    if (_.has(edge, 'y')) {\n      edge.y -= minY;\n    }\n  });\n\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n}\n\nfunction assignNodeIntersects(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    var nodeV = g.node(e.v);\n    var nodeW = g.node(e.w);\n    var p1, p2;\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n}\n\nfunction fixupEdgeLabelCoords(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      if (edge.labelpos === 'l' || edge.labelpos === 'r') {\n        edge.width -= edge.labeloffset;\n      }\n      switch (edge.labelpos) {\n        case 'l':\n          edge.x -= edge.width / 2 + edge.labeloffset;\n          break;\n        case 'r':\n          edge.x += edge.width / 2 + edge.labeloffset;\n          break;\n      }\n    }\n  });\n}\n\nfunction reversePointsForReversedEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n}\n\nfunction removeBorderNodes(g) {\n  _.forEach(g.nodes(), function (v) {\n    if (g.children(v).length) {\n      var node = g.node(v);\n      var t = g.node(node.borderTop);\n      var b = g.node(node.borderBottom);\n      var l = g.node(_.last(node.borderLeft));\n      var r = g.node(_.last(node.borderRight));\n\n      node.width = Math.abs(r.x - l.x);\n      node.height = Math.abs(b.y - t.y);\n      node.x = l.x + node.width / 2;\n      node.y = t.y + node.height / 2;\n    }\n  });\n\n  _.forEach(g.nodes(), function (v) {\n    if (g.node(v).dummy === 'border') {\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction removeSelfEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    if (e.v === e.w) {\n      var node = g.node(e.v);\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n      node.selfEdges.push({ e: e, label: g.edge(e) });\n      g.removeEdge(e);\n    }\n  });\n}\n\nfunction insertSelfEdges(g) {\n  var layers = util.buildLayerMatrix(g);\n  _.forEach(layers, function (layer) {\n    var orderShift = 0;\n    _.forEach(layer, function (v, i) {\n      var node = g.node(v);\n      node.order = i + orderShift;\n      _.forEach(node.selfEdges, function (selfEdge) {\n        util.addDummyNode(\n          g,\n          'selfedge',\n          {\n            width: selfEdge.label.width,\n            height: selfEdge.label.height,\n            rank: node.rank,\n            order: i + ++orderShift,\n            e: selfEdge.e,\n            label: selfEdge.label,\n          },\n          '_se'\n        );\n      });\n      delete node.selfEdges;\n    });\n  });\n}\n\nfunction positionSelfEdges(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'selfedge') {\n      var selfNode = g.node(node.e.v);\n      var x = selfNode.x + selfNode.width / 2;\n      var y = selfNode.y;\n      var dx = node.x - x;\n      var dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [\n        { x: x + (2 * dx) / 3, y: y - dy },\n        { x: x + (5 * dx) / 6, y: y - dy },\n        { x: x + dx, y: y },\n        { x: x + (5 * dx) / 6, y: y + dy },\n        { x: x + (2 * dx) / 3, y: y + dy },\n      ];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n}\n\nfunction selectNumberAttrs(obj, attrs) {\n  return _.mapValues(_.pick(obj, attrs), Number);\n}\n\nfunction canonicalize(attrs) {\n  var newAttrs = {};\n  _.forEach(attrs, function (v, k) {\n    newAttrs[k.toLowerCase()] = v;\n  });\n  return newAttrs;\n}\n"],"names":["reWhitespace","reTrimStart","baseTrim","string","slice","index","length","test","charAt","trimmedEndIndex","replace","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","INFINITY","toFinite","value","isSymbol","isObject","other","valueOf","isBinary","toNumber","flatten","array","baseFlatten","now$1","root","Date","now","objectProto","Object","prototype","hasOwnProperty","defaults$1","baseRest","object","sources","guard","isIterateeCall","source","props","keysIn","propsIndex","propsLength","key","eq","call","last","findIndexFunc","nativeMax","Math","max","find$1","predicate","fromIndex","result","remainder","baseFindIndex","baseIteratee","collection","iterable","isArrayLike","iteratee","keys","baseMap","Array","baseEach","map","isArray","arrayMap","baseGt","baseLt","mapValues","baseForOwn","baseAssignValue","baseExtremum","comparator","current","computed","identity","min","minBy","baseSet","path","customizer","castPath","lastIndex","nested","toKey","newValue","objValue","isIndex","assignValue","compareAscending","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","baseOrderBy","iteratees","orders","baseGet","baseUnary","comparer","sort","baseSortBy","criteria","objCriteria","othCriteria","ordersLength","compareMultiple","basePick","paths","basePickBy","hasIn","func","pick$1","setToString","overRest","nativeCeil","ceil","fromRight","range","start","end","step","baseRange","range$1","sortBy$1","idCounter","uniqueId","prefix","id","toString","List","constructor","sentinel","_next","_prev","this","_sentinel","dequeue","entry","unlink","enqueue","strs","curr","push","JSON","stringify","filterOutLinks","join","k","v","DEFAULT_WEIGHT_FN","_.constant","greedyFAS","g","weightFn","nodeCount","state","fasGraph","Graph","maxIn","maxOut","_.forEach","nodes","setNode","in","out","edges","e","prevWeight","edge","w","weight","edgeWeight","setEdge","node","buckets","_.range","zeroIdx","assignBucket","graph","buildState","results","sinks","removeNode","i","concat","doGreedyFAS","_.flatten","_.map","outEdges","collectPredecessors","inEdges","uEntry","wEntry","run","fas","acyclicer","stack","visited","dfs","_.has","forEach","dfsFAS","label","removeEdge","forwardName","name","reversed","_.uniqueId","addDummyNode","type","attrs","hasNode","dummy","asNonCompoundGraph","simplified","multigraph","isMultigraph","setGraph","children","intersectRect","rect","point","sx","sy","x","y","dx","dy","width","h","height","Error","abs","buildLayerMatrix","layering","maxRank","rank","_.isUndefined","order","addBorderNode","arguments","_.max","time","fn","_.now","console","log","notime","prop","sg","sgNode","borderType","prev","util.addDummyNode","setParent","undo","rankDir","rankdir","toLowerCase","reverseYOne","points","reverseY","swapXYOne","swapXY","swapWidthHeight","swapWidthHeightOne","dummyChains","vRank","wRank","edgeLabel","labelRank","edgeObj","labelpos","normalizeEdge","longestPath","_.min","minlen","Number","POSITIVE_INFINITY","slack","feasibleTree","delta","t","directed","size","tightTree","findMinSlackEdge","shiftRanks","nodeEdges","edgeV","_.minBy","vs","_.isArray","navigation","isDirected","successors","neighbors","bind","acc","doDfs","postorder","_.each","networkSimplex","simpleLabel","simplify","initLowLimValues","initCutValues","leaveEdge","exchangeEdges","enterEdge","alg.postorder","child","childLab","parent","cutvalue","calcCutValue","assignCutValue","childIsTail","graphEdge","cutValue","u","isOutEdge","pointsToHead","otherWeight","hasEdge","otherCutValue","tree","dfsAssignLowLim","nextLim","low","lim","_.find","vLabel","wLabel","tailLabel","flip","_.filter","isDescendant","f","alg.preorder","flipped","updateRanks","rootLabel","ranker","networkSimplexRanker","tightTreeRanker","longestPathRanker","depths","depth","treeDepths","_.values","nodeSep","nestingRoot","_.reduce","sumWeights","nodeRankFactor","top","util.addBorderNode","bottom","borderTop","borderBottom","childNode","childTop","childBottom","thisWeight","nestingEdge","buildLayerGraph","relationship","createRootNode","compound","setDefaultNodeLabel","minRank","borderLeft","borderRight","crossCount","cc","twoLayerCrossCount","northLayer","southLayer","values","southPos","assignFunc","valsLength","baseZipObject","southEntries","_.sortBy","pos","firstIndex","treeSize","weightSum","resolveConflicts","entries","cg","mappedEntries","tmp","indegree","barycenter","entryV","entryW","sourceSet","handleIn","vEntry","merged","target","sum","mergeEntries","handleOut","pop","reverse","_.pick","doResolveConflicts","biasRight","bias","parts","lhs","rhs","util.partition","sortable","unsortable","vsIndex","consumeUnsortable","_.last","sortSubgraph","movable","bl","br","subgraphs","barycenters","inV","nodeU","subgraphResult","expandSubgraphs","predecessors","blPred","brPred","util.maxRank","downLayerGraphs","buildLayerGraphs","upLayerGraphs","simpleNodes","layers","orderedVs","initOrder","assignOrder","best","bestCC","lastBest","sweepLayerGraphs","util.buildLayerMatrix","baseClone","CLONE_DEEP_FLAG","ranks","layerGraphs","lg","sorted","rootPrev","prevChild","addSubgraphConstraints","layer","parentDummyChains","postorderNums","pathData","lca","vPath","wPath","findPath","pathIdx","pathV","ascending","findType1Conflicts","conflicts","prevLayer","k0","scanPos","prevLayerLength","lastNode","findOtherInnerSegmentNode","k1","scanNode","uLabel","uPos","addConflict","conflictsV","hasConflict","horizontalCompaction","align","reverseSep","xs","blockG","blockGraph","graphLabel","sepFn","edgeSep","sep","nodesep","edgesep","vRoot","uRoot","prevMax","buildBlockGraph","iterate","setXsFunc","nextNodesFunc","elem","reduce","findSmallestWidthAlignment","xss","NEGATIVE_INFINITY","halfWidth","baseFor","castFunction","positionX","adjustedLayering","_.merge","scan","south","southEnd","prevNorthBorder","nextNorthBorder","uNode","north","nextNorthPos","prevNorthPos","southLookahead","findType2Conflicts","vert","horiz","inner","neighborFn","prevIdx","ws","mp","floor","il","verticalAlignment","_.mapValues","smallestWidth","alignTo","alignToVals","alignToMin","alignToMax","alignment","xsVals","alignCoordinates","ul","ignore","balance","position","rankSep","ranksep","prevY","maxHeight","positionY","util.asNonCompoundGraph","layout","opts","debugTiming","util.time","util.notime","layoutGraph","inputGraph","canonicalize","graphDefaults","selectNumberAttrs","graphNumAttrs","graphAttrs","_.defaults","nodeNumAttrs","nodeDefaults","edgeDefaults","edgeNumAttrs","edgeAttrs","buildLayoutGraph","labeloffset","makeSpaceForEdgeLabels","selfEdges","removeSelfEdges","acyclic.run","nestingGraph.run","injectEdgeLabelProxies","offset","util.removeEmptyRanks","nestingGraph.cleanup","util.normalizeRanks","assignRankMinMax","removeEdgeLabelProxies","normalize.run","addBorderSegments","orderShift","selfEdge","insertSelfEdges","coordinateSystem.adjust","selfNode","positionSelfEdges","b","l","r","removeBorderNodes","origLabel","normalize.undo","fixupEdgeLabelCoords","coordinateSystem.undo","minX","maxX","minY","maxY","marginX","marginx","marginY","marginy","getExtremes","p","translateGraph","p1","p2","nodeV","nodeW","unshift","util.intersectRect","assignNodeIntersects","reversePointsForReversedEdges","acyclic.undo","runLayout","inputLabel","layoutLabel","updateInputGraph","obj","newAttrs"],"mappings":"4WACA,IAAIA,EAAe,KCEnB,IAAIC,EAAc,OASlB,SAASC,EAASC,GAChB,OAAOA,EACHA,EAAOC,MAAM,EDHnB,SAAyBD,GAGvB,IAFA,IAAIE,EAAQF,EAAOG,OAEZD,KAAWL,EAAaO,KAAKJ,EAAOK,OAAOH,MAC3C,OAAAA,CACT,CCFsBI,CAAgBN,GAAU,GAAGO,QAAQT,EAAa,IAClEE,CACN,CCXA,IAGIQ,EAAa,qBAGbC,EAAa,aAGbC,EAAY,cAGZC,EAAeC,SCdnB,IAAIC,EAAW,IA0Bf,SAASC,EAASC,GAChB,OAAKA,GAGLA,EDSF,SAAkBA,GACZ,GAAgB,iBAATA,EACF,OAAAA,EAEL,GAAAC,EAASD,GACJ,OA1CD,IA4CJ,GAAAE,EAASF,GAAQ,CACnB,IAAIG,EAAgC,mBAAjBH,EAAMI,QAAwBJ,EAAMI,UAAYJ,EACnEA,EAAQE,EAASC,GAAUA,EAAQ,GAAMA,CAC1C,CACG,GAAgB,iBAATH,EACF,OAAU,IAAVA,EAAcA,GAASA,EAEhCA,EAAQhB,EAASgB,GACb,IAAAK,EAAWX,EAAWL,KAAKW,GAC/B,OAAQK,GAAYV,EAAUN,KAAKW,GAC/BJ,EAAaI,EAAMd,MAAM,GAAImB,EAAW,EAAI,GAC3CZ,EAAWJ,KAAKW,GAvDb,KAuD6BA,CACvC,CC5BUM,CAASN,MACHF,GAAYE,KAAU,IA9BpB,uBA+BFA,EAAQ,GAAS,EAAA,GAGxBA,GAAUA,EAAQA,EAAQ,EAPd,IAAVA,EAAcA,EAAQ,CAQjC,CCvBA,SAASO,EAAQC,GAEf,OADsB,MAATA,EAAgB,EAAIA,EAAMpB,QACvBqB,EAAYD,EAAO,GAAK,EAC1C,CCGA,MAAAE,EAJU,WACD,OAAAC,EAAKC,KAAKC,KACnB,ECdA,IAAIC,EAAcC,OAAOC,UAGrBC,EAAiBH,EAAYG,eAsDjC,MAAAC,EA/BeC,GAAS,SAASC,EAAQC,GACvCD,EAASL,OAAOK,GAEhB,IAAIjC,GAAQ,EACRC,EAASiC,EAAQjC,OACjBkC,EAAQlC,EAAS,EAAIiC,EAAQ,QAAK,EAM/B,IAJHC,GAASC,EAAeF,EAAQ,GAAIA,EAAQ,GAAIC,KACzClC,EAAA,KAGFD,EAAQC,GAMR,IALH,IAAAoC,EAASH,EAAQlC,GACjBsC,EAAQC,EAAOF,GACfG,GAAa,EACbC,EAAcH,EAAMrC,SAEfuC,EAAaC,GAAa,CAC7B,IAAAC,EAAMJ,EAAME,GACZ3B,EAAQoB,EAAOS,SAEL,IAAV7B,GACC8B,EAAG9B,EAAOc,EAAYe,MAAUZ,EAAec,KAAKX,EAAQS,MACxDT,EAAAS,GAAOL,EAAOK,GAExB,CAGI,OAAAT,CACT,IC/CA,SAASY,GAAKxB,GACZ,IAAIpB,EAAkB,MAAToB,EAAgB,EAAIA,EAAMpB,OACvC,OAAOA,EAASoB,EAAMpB,EAAS,QAAK,CACtC,CCZA,ICMoB6C,GDNhBC,GAAYC,KAAKC,IEoCrB,MAAAC,ID9BoBJ,GD+BpB,SAAmBzB,EAAO8B,EAAWC,GACnC,IAAInD,EAAkB,MAAToB,EAAgB,EAAIA,EAAMpB,OACvC,IAAKA,EACI,OAAA,EAET,IGlBIoD,EACAC,EHiBAtD,EAAqB,MAAboD,EAAoB,GGlB5BC,EAASzC,EHkBiCwC,GGjB1CE,EAAYD,EAAS,EAElBA,GAAWA,EAAUC,EAAYD,EAASC,EAAYD,EAAU,GHmBvE,OAHIrD,EAAQ,IACF+C,EAAAA,GAAU9C,EAASD,EAAO,IAE7BuD,EAAclC,EAAOmC,EAAaL,GAAenD,EAC1D,ECxCS,SAASyD,EAAYN,EAAWC,GACjC,IAAAM,EAAW9B,OAAO6B,GAClB,IAACE,EAAYF,GAAa,CACxB,IAAAG,EAAWJ,EAAaL,GAC5BM,EAAaI,EAAKJ,GAClBN,EAAY,SAAST,GAAO,OAAOkB,EAASF,EAAShB,GAAMA,EAAKgB,GACjE,CACD,IAAI1D,EAAQ8C,GAAcW,EAAYN,EAAWC,GAC1C,OAAApD,KAAa0D,EAASE,EAAWH,EAAWzD,GAASA,QAAS,CACzE,GGVA,SAAS8D,GAAQL,EAAYG,GACvB,IAAA5D,GACA,EAAAqD,EAASM,EAAYF,GAAcM,MAAMN,EAAWxD,QAAU,GAK3D,OAHP+D,EAASP,GAAY,SAAS5C,EAAO6B,EAAKe,GACxCJ,IAASrD,GAAS4D,EAAS/C,EAAO6B,EAAKe,EAC3C,IACSJ,CACT,CC4BA,SAASY,GAAIR,EAAYG,GAEvB,OADWM,EAAQT,GAAcU,EAAWL,IAChCL,EAAYD,EAAaI,GACvC,CCzCA,SAASQ,GAAOvD,EAAOG,GACrB,OAAOH,EAAQG,CACjB,CCFA,SAASqD,GAAOxD,EAAOG,GACrB,OAAOH,EAAQG,CACjB,CCqBA,SAASsD,GAAUrC,EAAQ2B,GACzB,IAAIP,EAAS,CAAA,EAMN,OALPO,EAAWJ,EAAaI,GAExBW,EAAWtC,GAAQ,SAASpB,EAAO6B,EAAKT,GACtCuC,EAAgBnB,EAAQX,EAAKkB,EAAS/C,EAAO6B,EAAKT,GACtD,IACSoB,CACT,CC5BA,SAASoB,GAAapD,EAAOuC,EAAUc,GAI9B,IAHH,IAAA1E,GACA,EAAAC,EAASoB,EAAMpB,SAEVD,EAAQC,GAAQ,CACvB,IAAIY,EAAQQ,EAAMrB,GACd2E,EAAUf,EAAS/C,GAEvB,GAAe,MAAX8D,SAAiC,IAAbC,EACfD,GAAYA,IAAY7D,EAAS6D,GAClCD,EAAWC,EAASC,IAEtB,IAAAA,EAAWD,EACXtB,EAASxC,CAEhB,CACM,OAAAwC,CACT,CCPA,SAASJ,GAAI5B,GACX,OAAQA,GAASA,EAAMpB,OACnBwE,GAAapD,EAAOwD,EAAUT,SAC9B,CACN,CCJA,SAASU,GAAIzD,GACX,OAAQA,GAASA,EAAMpB,OACnBwE,GAAapD,EAAOwD,EAAUR,SAC9B,CACN,CCCA,SAASU,GAAM1D,EAAOuC,GACZ,OAAAvC,GAASA,EAAMpB,OACnBwE,GAAapD,EAAOmC,EAAaI,GAAcS,SAC/C,CACN,CCfA,SAASW,GAAQ/C,EAAQgD,EAAMpE,EAAOqE,GAChC,IAACnE,EAASkB,GACL,OAAAA,EAST,IALI,IAAAjC,KACAC,GAHGgF,EAAAE,EAASF,EAAMhD,IAGJhC,OACdmF,EAAYnF,EAAS,EACrBoF,EAASpD,EAEI,MAAVoD,KAAoBrF,EAAQC,GAAQ,CACzC,IAAIyC,EAAM4C,EAAML,EAAKjF,IACjBuF,EAAW1E,EAEf,GAAY,cAAR6B,GAA+B,gBAARA,GAAiC,cAARA,EAC3C,OAAAT,EAGT,GAAIjC,GAASoF,EAAW,CAClB,IAAAI,EAAWH,EAAO3C,QAEL,KADjB6C,EAAWL,EAAaA,EAAWM,EAAU9C,EAAK2C,QAAU,KAE1DE,EAAWxE,EAASyE,GAChBA,EACCC,EAAQR,EAAKjF,EAAQ,IAAM,GAAK,CAAA,EAExC,CACW0F,EAAAL,EAAQ3C,EAAK6C,GACzBF,EAASA,EAAO3C,EACjB,CACM,OAAAT,CACT,CCtCA,SAAS0D,GAAiB9E,EAAOG,GAC/B,GAAIH,IAAUG,EAAO,CACf,IAAA4E,OAAyB,IAAV/E,EACfgF,EAAsB,OAAVhF,EACZiF,EAAiBjF,GAAUA,EAC3BkF,EAAcjF,EAASD,GAEvBmF,OAAyB,IAAVhF,EACfiF,EAAsB,OAAVjF,EACZkF,EAAiBlF,GAAUA,EAC3BmF,EAAcrF,EAASE,GAEtB,IAACiF,IAAcE,IAAgBJ,GAAelF,EAAQG,GACtD+E,GAAeC,GAAgBE,IAAmBD,IAAcE,GAChEN,GAAaG,GAAgBE,IAC5BN,GAAgBM,IACjBJ,EACI,OAAA,EAEJ,IAACD,IAAcE,IAAgBI,GAAetF,EAAQG,GACtDmF,GAAeP,GAAgBE,IAAmBD,IAAcE,GAChEE,GAAaL,GAAgBE,IAC5BE,GAAgBF,IACjBI,EACI,OAAA,CAEV,CACM,OAAA,CACT,CCnBA,SAASE,GAAY3C,EAAY4C,EAAWC,GAE5BD,EADVA,EAAUpG,OACAkE,EAASkC,GAAW,SAASzC,GACnC,OAAAM,EAAQN,GACH,SAAS/C,GACP,OAAA0F,EAAQ1F,EAA2B,IAApB+C,EAAS3D,OAAe2D,EAAS,GAAKA,EAC7D,EAEIA,CACb,IAEgB,CAACiB,GAGf,IAAI7E,GAAQ,EAUZ,OATAqG,EAAYlC,EAASkC,EAAWG,EAAUhD,ICxB5C,SAAoBnC,EAAOoF,GACzB,IAAIxG,EAASoB,EAAMpB,OAGnB,IADAoB,EAAMqF,KAAKD,GACJxG,KACLoB,EAAMpB,GAAUoB,EAAMpB,GAAQY,MAEzB,OAAAQ,CACT,CDyBSsF,CAPM7C,GAAQL,GAAY,SAAS5C,EAAO6B,EAAKe,GAIpD,MAAO,CAAEmD,SAHMzC,EAASkC,GAAW,SAASzC,GAC1C,OAAOA,EAAS/C,EACtB,IACmCb,QAAWA,EAAOa,MAASA,EAC9D,KAE4B,SAASoB,EAAQjB,GAClC,OE5BX,SAAyBiB,EAAQjB,EAAOsF,GAO/B,IANP,IAAItG,GAAQ,EACR6G,EAAc5E,EAAO2E,SACrBE,EAAc9F,EAAM4F,SACpB3G,EAAS4G,EAAY5G,OACrB8G,EAAeT,EAAOrG,SAEjBD,EAAQC,GAAQ,CACvB,IAAIoD,EAASsC,GAAiBkB,EAAY7G,GAAQ8G,EAAY9G,IAC9D,GAAIqD,EACF,OAAIrD,GAAS+G,EACJ1D,EAGFA,GAAmB,QADdiD,EAAOtG,IACqB,EAAA,EAE3C,CAQM,OAAAiC,EAAOjC,MAAQgB,EAAMhB,KAC9B,CFGWgH,CAAgB/E,EAAQjB,EAAOsF,EAC1C,GACA,CGlCA,SAASW,GAAShF,EAAQiF,GACxB,OCAF,SAAoBjF,EAAQiF,EAAO/D,GAK1B,IAJP,IAAInD,GACA,EAAAC,EAASiH,EAAMjH,OACfoD,EAAS,CAAA,IAEJrD,EAAQC,GAAQ,CACvB,IAAIgF,EAAOiC,EAAMlH,GACba,EAAQ0F,EAAQtE,EAAQgD,GAExB9B,EAAUtC,EAAOoE,IACnBD,GAAQ3B,EAAQ8B,EAASF,EAAMhD,GAASpB,EAE3C,CACM,OAAAwC,CACT,CDdS8D,CAAWlF,EAAQiF,GAAO,SAASrG,EAAOoE,GACxC,OAAAmC,EAAMnF,EAAQgD,EACzB,GACA,CEIA,ICTkBoC,GDalB,MAAAC,GCZSC,EAAYC,EADHH,GDSE,SAASpF,EAAQiF,GACnC,OAAiB,MAAVjF,EAAiB,CAAA,EAAKgF,GAAShF,EAAQiF,EAChD,OCVoC,EAAW9F,GAAUiG,GAAO,ICXhE,IAAII,GAAazE,KAAK0E,KAClB3E,GAAYC,KAAKC,ICyCrB,IChCqB0E,GDgCjBC,GC/BK,SAASC,EAAOC,EAAKC,GAa1B,OAZIA,GAAuB,iBAARA,GAAoB3F,EAAeyF,EAAOC,EAAKC,KAChED,EAAMC,OAAO,GAGfF,EAAQjH,EAASiH,QACL,IAARC,GACIA,EAAAD,EACEA,EAAA,GAERC,EAAMlH,EAASkH,GFPrB,SAAmBD,EAAOC,EAAKC,EAAMJ,GAKnC,IAJA,IAAI3H,GAAQ,EACRC,EAAS8C,GAAU0E,IAAYK,EAAMD,IAAUE,GAAQ,IAAK,GAC5D1E,EAASU,MAAM9D,GAEZA,KACLoD,EAAOsE,EAAY1H,IAAWD,GAAS6H,EAC9BA,GAAAE,EAEJ,OAAA1E,CACT,CEAW2E,CAAUH,EAAOC,EADxBC,OAAgB,IAATA,EAAsBF,EAAQC,EAAM,GAAI,EAAMlH,EAASmH,GAC3BJ,GACvC,EDmBA,MAAAM,GAAeL,GEEf,MAAAM,GAbalG,GAAS,SAASyB,EAAY4C,GACzC,GAAkB,MAAd5C,EACF,MAAO,GAET,IAAIxD,EAASoG,EAAUpG,OAMvB,OALIA,EAAS,GAAKmC,EAAeqB,EAAY4C,EAAU,GAAIA,EAAU,IACnEA,EAAY,GACHpG,EAAS,GAAKmC,EAAeiE,EAAU,GAAIA,EAAU,GAAIA,EAAU,MAChEA,EAAA,CAACA,EAAU,KAElBD,GAAY3C,EAAYnC,EAAY+E,EAAW,GAAI,GAC5D,IC1CA,IAAI8B,GAAY,EAmBhB,SAASC,GAASC,GAChB,IAAIC,IAAOH,GACJ,OAAAI,EAASF,GAAUC,CAC5B,CClBA,MAAME,GACJ,WAAAC,GACE,IAAIC,EAAW,CAAA,EACNA,EAAAC,MAAQD,EAASE,MAAQF,EAClCG,KAAKC,UAAYJ,CAClB,CACD,OAAAK,GACE,IAAIL,EAAWG,KAAKC,UAChBE,EAAQN,EAASE,MACrB,GAAII,IAAUN,EAEL,OADPO,GAAOD,GACAA,CAEV,CACD,OAAAE,CAAQF,GACN,IAAIN,EAAWG,KAAKC,UAChBE,EAAMJ,OAASI,EAAML,OACvBM,GAAOD,GAETA,EAAML,MAAQD,EAASC,MACvBD,EAASC,MAAMC,MAAQI,EACvBN,EAASC,MAAQK,EACjBA,EAAMJ,MAAQF,CACf,CACD,QAAAH,GAIE,IAHA,IAAIY,EAAO,GACPT,EAAWG,KAAKC,UAChBM,EAAOV,EAASE,MACbQ,IAASV,GACdS,EAAKE,KAAKC,KAAKC,UAAUH,EAAMI,KAC/BJ,EAAOA,EAAKR,MAEd,MAAO,IAAMO,EAAKM,KAAK,MAAQ,GAChC,EAGH,SAASR,GAAOD,GACRA,EAAAJ,MAAMD,MAAQK,EAAML,MACpBK,EAAAL,MAAMC,MAAQI,EAAMJ,aACnBI,EAAML,aACNK,EAAMJ,KACf,CAEA,SAASY,GAAeE,EAAGC,GACrB,GAAM,UAAND,GAAuB,UAANA,EACZ,OAAAC,CAEX,CCzCA,IAAIC,GAAoBC,EAAW,GAEnC,SAASC,GAAUC,EAAGC,GAChB,GAAAD,EAAEE,aAAe,EACnB,MAAO,GAET,IAAIC,EAkEN,SAAoBH,EAAGC,GACjB,IAAAG,EAAW,IAAIC,EACfC,EAAQ,EACRC,EAAS,EAEbC,EAAUR,EAAES,SAAS,SAAUb,GACpBQ,EAAAM,QAAQd,EAAG,CAAEA,IAAMe,GAAI,EAAGC,IAAK,GAC5C,IAIEJ,EAAUR,EAAEa,SAAS,SAAUC,GAC7B,IAAIC,EAAaX,EAASY,KAAKF,EAAElB,EAAGkB,EAAEG,IAAM,EACxCC,EAASjB,EAASa,GAClBK,EAAaJ,EAAaG,EAC9Bd,EAASgB,QAAQN,EAAElB,EAAGkB,EAAEG,EAAGE,GAClBZ,EAAAtH,KAAKC,IAAIqH,EAASH,EAASiB,KAAKP,EAAElB,GAAGgB,KAAOM,GAC7CZ,EAAArH,KAAKC,IAAIoH,EAAQF,EAASiB,KAAKP,EAAEG,GAAO,IAAKC,EACzD,IAEE,IAAII,EAAUC,GAAQhB,EAASD,EAAQ,GAAGpG,KAAI,WAC5C,OAAO,IAAIuE,EACf,IACM+C,EAAUlB,EAAQ,EAMtB,OAJAE,EAAUJ,EAASK,SAAS,SAAUb,GACpC6B,GAAaH,EAASE,EAASpB,EAASiB,KAAKzB,GACjD,IAES,CAAE8B,MAAOtB,EAAUkB,UAAkBE,UAC9C,CAhGcG,CAAW3B,EAAGC,GAAYJ,IAClC+B,EAUN,SAAqB5B,EAAGsB,EAASE,GAC/B,IAIIvC,EAJA2C,EAAU,GACVzJ,EAAUmJ,EAAQA,EAAQpL,OAAS,GACnC2L,EAAQP,EAAQ,GAGb,KAAAtB,EAAEE,aAAa,CACZ,KAAAjB,EAAQ4C,EAAM7C,WACT8C,GAAA9B,EAAGsB,EAASE,EAASvC,GAE1B,KAAAA,EAAQ9G,EAAQ6G,WACX8C,GAAA9B,EAAGsB,EAASE,EAASvC,GAE9B,GAAAe,EAAEE,YACJ,IAAA,IAAS6B,EAAIT,EAAQpL,OAAS,EAAG6L,EAAI,IAAKA,EAExC,GADQ9C,EAAAqC,EAAQS,GAAG/C,UACR,CACC4C,EAAAA,EAAQI,OAAOF,GAAW9B,EAAGsB,EAASE,EAASvC,GAAO,IAChE,KACD,CAGN,CAEM,OAAA2C,CACT,CAnCgBK,CAAY9B,EAAMuB,MAAOvB,EAAMmB,QAASnB,EAAMqB,SAGrDU,OAAAA,EACLC,GAAMP,GAAS,SAAUd,GACvB,OAAOd,EAAEoC,SAAStB,EAAElB,EAAGkB,EAAEG,EAC/B,IAEA,CA6BA,SAASa,GAAW9B,EAAGsB,EAASE,EAASvC,EAAOoD,GAC1C,IAAAT,EAAUS,EAAsB,QAAK,EAwBlC,OAtBP7B,EAAUR,EAAEsC,QAAQrD,EAAMW,IAAI,SAAUoB,GAClC,IAAAE,EAASlB,EAAEgB,KAAKA,GAChBuB,EAASvC,EAAEqB,KAAKL,EAAKpB,GAErByC,GACMT,EAAAtC,KAAK,CAAEM,EAAGoB,EAAKpB,EAAGqB,EAAGD,EAAKC,IAGpCsB,EAAO3B,KAAOM,EACDO,GAAAH,EAASE,EAASe,EACnC,IAEE/B,EAAUR,EAAEoC,SAASnD,EAAMW,IAAI,SAAUoB,GACnC,IAAAE,EAASlB,EAAEgB,KAAKA,GAChBC,EAAID,EAAKC,EACTuB,EAASxC,EAAEqB,KAAKJ,GACpBuB,EAAW,IAAKtB,EACHO,GAAAH,EAASE,EAASgB,EACnC,IAEIxC,EAAA8B,WAAW7C,EAAMW,GAEZgC,CACT,CAkCA,SAASH,GAAaH,EAASE,EAASvC,GACjCA,EAAM2B,IAEC3B,EAAU,GAGZqC,EAAArC,EAAM2B,IAAM3B,EAAU,GAAIuC,GAASrC,QAAQF,GAFnDqC,EAAQA,EAAQpL,OAAS,GAAGiJ,QAAQF,GAF5BqC,EAAA,GAAGnC,QAAQF,EAMvB,CCxHA,SAASwD,GAAIzC,GACX,IASkBA,EATd0C,EAA8B,WAAxB1C,EAAE0B,QAAQiB,UAAyB5C,GAAUC,GASrCA,EATiDA,EAU1D,SAAUc,GACRd,OAAAA,EAAEgB,KAAKF,GAAGI,MACvB,IAIA,SAAgBlB,GACd,IAAI0C,EAAM,GACNE,EAAQ,CAAA,EACRC,EAAU,CAAA,EAEd,SAASC,EAAIlD,GACPmD,EAAMF,EAASjD,KAGnBiD,EAAQjD,IAAK,EACbgD,EAAMhD,IAAK,EACXY,EAAUR,EAAEoC,SAASxC,IAAI,SAAUkB,GAC7BiC,EAAMH,EAAO9B,EAAEG,GACjByB,EAAIpD,KAAKwB,GAETgC,EAAIhC,EAAEG,EAEd,WACW2B,EAAMhD,GACd,CAGM,OADGoD,EAAAhD,EAAES,QAASqC,GACdJ,CACT,CAvC2EO,CAAOjD,GACtEgD,EAAAN,GAAK,SAAU5B,GACnB,IAAAoC,EAAQlD,EAAEgB,KAAKF,GACnBd,EAAEmD,WAAWrC,GACboC,EAAME,YAActC,EAAEuC,KACtBH,EAAMI,UAAW,EACftD,EAAAoB,QAAQN,EAAEG,EAAGH,EAAElB,EAAGsD,EAAOK,GAAW,OAC1C,GAOA,CCGA,SAASC,GAAaxD,EAAGyD,EAAMC,EAAOL,GAChC,IAAAzD,EACD,GACDA,EAAI2D,GAAWF,SACRrD,EAAE2D,QAAQ/D,IAIZ,OAFP8D,EAAME,MAAQH,EACZzD,EAAAU,QAAQd,EAAG8D,GACN9D,CACT,CAsBA,SAASiE,GAAmB7D,GAC1B,IAAI8D,EAAa,IAAIzD,EAAM,CAAE0D,WAAY/D,EAAEgE,iBAAkBC,SAASjE,EAAE0B,SASjE,OARPlB,EAAUR,EAAES,SAAS,SAAUb,GACxBI,EAAEkE,SAAStE,GAAG1J,QACjB4N,EAAWpD,QAAQd,EAAGI,EAAEqB,KAAKzB,GAEnC,IACEY,EAAUR,EAAEa,SAAS,SAAUC,GAC7BgD,EAAW1C,QAAQN,EAAGd,EAAEgB,KAAKF,GACjC,IACSgD,CACT,CA4BA,SAASK,GAAcC,EAAMC,GAC3B,IAcIC,EAAIC,EAdJC,EAAIJ,EAAKI,EACTC,EAAIL,EAAKK,EAITC,EAAKL,EAAMG,EAAIA,EACfG,EAAKN,EAAMI,EAAIA,EACfxD,EAAImD,EAAKQ,MAAQ,EACjBC,EAAIT,EAAKU,OAAS,EAElB,IAACJ,IAAOC,EACJ,MAAA,IAAII,MAAM,6DAoBlB,OAhBI9L,KAAK+L,IAAIL,GAAM1D,EAAIhI,KAAK+L,IAAIN,GAAMG,GAEhCF,EAAK,IACPE,GAAKA,GAEPP,EAAMO,EAAIH,EAAMC,EACXJ,EAAAM,IAGDH,EAAK,IACPzD,GAAKA,GAEFqD,EAAArD,EACLsD,EAAMtD,EAAI0D,EAAMD,GAGX,CAAEF,EAAGA,EAAIF,EAAIG,EAAGA,EAAIF,EAC7B,CAMA,SAASU,GAAiBjF,GACpB,IAAAkF,EAAW/C,GAAMZ,GAAQ4D,GAAQnF,GAAK,IAAI,WAC5C,MAAO,EACX,IAQS,OAPPQ,EAAUR,EAAES,SAAS,SAAUb,GACzB,IAAAyB,EAAOrB,EAAEqB,KAAKzB,GACdwF,EAAO/D,EAAK+D,KACXC,EAAcD,KACjBF,EAASE,GAAM/D,EAAKiE,OAAS1F,EAEnC,IACSsF,CACT,CAkDA,SAASK,GAAcvF,EAAG1B,EAAQ8G,EAAME,GACtC,IAAIjE,EAAO,CACTuD,MAAO,EACPE,OAAQ,GAMV,OAJIU,UAAUtP,QAAU,IACtBmL,EAAK+D,KAAOA,EACZ/D,EAAKiE,MAAQA,GAER9B,GAAaxD,EAAG,SAAUqB,EAAM/C,EACzC,CAEA,SAAS6G,GAAQnF,GACRyF,OAAAA,GACLtD,GAAMnC,EAAES,SAAS,SAAUb,GACzB,IAAIwF,EAAOpF,EAAEqB,KAAKzB,GAAGwF,KACjB,IAACC,EAAcD,GACVA,OAAAA,CAEf,IAEA,CAuBA,SAASM,GAAKrC,EAAMsC,GAClB,IAAI7H,EAAQ8H,IACR,IACF,OAAOD,GACX,CAAY,QACRE,QAAQC,IAAIzC,EAAO,WAAauC,IAAU9H,GAAS,KACpD,CACH,CAEA,SAASiI,GAAO1C,EAAMsC,GACpB,OAAOA,GACT,CC/NA,SAASJ,GAAcvF,EAAGgG,EAAM1H,EAAQ2H,EAAIC,EAAQd,GAC9C,IAAAlC,EAAQ,CAAE0B,MAAO,EAAGE,OAAQ,EAAGM,KAAMA,EAAMe,WAAYH,GACvDI,EAAOF,EAAOF,GAAMZ,EAAO,GAC3B/F,EAAOgH,GAAkBrG,EAAG,SAAUkD,EAAO5E,GAC1C4H,EAAAF,GAAMZ,GAAQ/F,EACnBW,EAAAsG,UAAUjH,EAAM4G,GACdG,GACFpG,EAAEoB,QAAQgF,EAAM/G,EAAM,CAAE6B,OAAQ,GAEpC,CCxBA,SAASqF,GAAKvG,GACZ,IAAIwG,EAAUxG,EAAE0B,QAAQ+E,QAAQC,cAChB,OAAZF,GAAgC,OAAZA,GAyB1B,SAAkBxG,GAChBQ,EAAUR,EAAES,SAAS,SAAUb,GACjB+G,GAAA3G,EAAEqB,KAAKzB,GACvB,IAEEY,EAAUR,EAAEa,SAAS,SAAUC,GACzB,IAAAE,EAAOhB,EAAEgB,KAAKF,GACRkC,EAAAhC,EAAK4F,OAAQD,IACnB5D,EAAM/B,EAAM,MACd2F,GAAY3F,EAElB,GACA,CApCI6F,CAAS7G,GAGK,OAAZwG,GAAgC,OAAZA,KAuC1B,SAAgBxG,GACdQ,EAAUR,EAAES,SAAS,SAAUb,GACnBkH,GAAA9G,EAAEqB,KAAKzB,GACrB,IAEEY,EAAUR,EAAEa,SAAS,SAAUC,GACzB,IAAAE,EAAOhB,EAAEgB,KAAKF,GACRkC,EAAAhC,EAAK4F,OAAQE,IACnB/D,EAAM/B,EAAM,MACd8F,GAAU9F,EAEhB,GACA,CAlDI+F,CAAO/G,GACPgH,GAAgBhH,GAEpB,CAEA,SAASgH,GAAgBhH,GACvBQ,EAAUR,EAAES,SAAS,SAAUb,GACVqH,GAAAjH,EAAEqB,KAAKzB,GAC9B,IACEY,EAAUR,EAAEa,SAAS,SAAUC,GACVmG,GAAAjH,EAAEgB,KAAKF,GAC9B,GACA,CAEA,SAASmG,GAAmBvD,GAC1B,IAAIzC,EAAIyC,EAAMkB,MACdlB,EAAMkB,MAAQlB,EAAMoB,OACpBpB,EAAMoB,OAAS7D,CACjB,CAgBA,SAAS0F,GAAYjD,GACbA,EAAAe,GAAKf,EAAMe,CACnB,CAgBA,SAASqC,GAAUpD,GACjB,IAAIc,EAAId,EAAMc,EACdd,EAAMc,EAAId,EAAMe,EAChBf,EAAMe,EAAID,CACZ,CCrDA,SAAS/B,GAAIzC,GACTA,EAAA0B,QAAQwF,YAAc,GACxB1G,EAAUR,EAAEa,SAAS,SAAUG,IAKjC,SAAuBhB,EAAGc,GACxB,IAYI8C,EAAOF,EAAO3B,EAZdnC,EAAIkB,EAAElB,EACNuH,EAAQnH,EAAEqB,KAAKzB,GAAGwF,KAClBnE,EAAIH,EAAEG,EACNmG,EAAQpH,EAAEqB,KAAKJ,GAAGmE,KAClB/B,EAAOvC,EAAEuC,KACTgE,EAAYrH,EAAEgB,KAAKF,GACnBwG,EAAYD,EAAUC,UAE1B,GAAIF,IAAUD,EAAQ,EAAG,OAKpB,IAHLnH,EAAEmD,WAAWrC,GAGRiB,EAAI,IAAKoF,EAAOA,EAAQC,IAASrF,IAAKoF,EACzCE,EAAUT,OAAS,GAQnBhD,EAAQyC,GAAkBrG,EAAG,OAPrB0D,EAAA,CACNkB,MAAO,EACPE,OAAQ,EACRuC,YACAE,QAASzG,EACTsE,KAAM+B,GAEoC,MACxCA,IAAUG,IACZ5D,EAAMkB,MAAQyC,EAAUzC,MACxBlB,EAAMoB,OAASuC,EAAUvC,OAEzBpB,EAAME,MAAQ,aAEdF,EAAM8D,SAAWH,EAAUG,UAE3BxH,EAAAoB,QAAQxB,EAAGgE,EAAO,CAAE1C,OAAQmG,EAAUnG,QAAUmC,GACxC,IAANtB,GACF/B,EAAE0B,QAAQwF,YAAY5H,KAAKsE,GAEzBhE,EAAAgE,EAGJ5D,EAAAoB,QAAQxB,EAAGqB,EAAG,CAAEC,OAAQmG,EAAUnG,QAAUmC,EAChD,CA5CIoE,CAAczH,EAAGgB,EACrB,GACA,CCDA,SAAS0G,GAAY1H,GACnB,IAAI6C,EAAU,CAAA,EA2BJG,EAAAhD,EAAE7H,WAzBZ,SAAS2K,EAAIlD,GACP,IAAAsD,EAAQlD,EAAEqB,KAAKzB,GACfmD,GAAAA,EAAMF,EAASjD,GACjB,OAAOsD,EAAMkC,KAEfvC,EAAQjD,IAAK,EAEb,IAAIwF,EAAOuC,GACTxF,GAAMnC,EAAEoC,SAASxC,IAAI,SAAUkB,GAC7B,OAAOgC,EAAIhC,EAAEG,GAAKjB,EAAEgB,KAAKF,GAAG8G,MACpC,KAYI,OARExC,IAASyC,OAAOC,mBAAhB1C,MACAA,IAIAA,EAAO,GAGDlC,EAAMkC,KAAOA,CACtB,GAGH,CAMA,SAAS2C,GAAM/H,EAAGc,GAChB,OAAOd,EAAEqB,KAAKP,EAAEG,GAAGmE,KAAOpF,EAAEqB,KAAKP,EAAElB,GAAGwF,KAAOpF,EAAEgB,KAAKF,GAAG8G,MACzD,CC/BA,SAASI,GAAahI,GACpB,IAOIgB,EAAMiH,EAPNC,EAAI,IAAI7H,EAAM,CAAE8H,UAAU,IAG1BrK,EAAQkC,EAAES,QAAQ,GAClB2H,EAAOpI,EAAEE,YAIb,IAHEgI,EAAAxH,QAAQ5C,EAAO,CAAA,GAGVuK,GAAUH,EAAGlI,GAAKoI,GAChBpH,EAAAsH,GAAiBJ,EAAGlI,GAC3BiI,EAAQC,EAAEvE,QAAQ3C,EAAKpB,GAAKmI,GAAM/H,EAAGgB,IAAS+G,GAAM/H,EAAGgB,GAC5CuH,GAAAL,EAAGlI,EAAGiI,GAGZ,OAAAC,CACT,CAMA,SAASG,GAAUH,EAAGlI,GAcpB,OADUgD,EAAAkF,EAAEzH,SAZZ,SAASqC,EAAIlD,GACXY,EAAUR,EAAEwI,UAAU5I,IAAI,SAAUkB,GAClC,IAAI2H,EAAQ3H,EAAElB,EACZqB,EAAIrB,IAAM6I,EAAQ3H,EAAEG,EAAIwH,EACrBP,EAAEvE,QAAQ1C,IAAO8G,GAAM/H,EAAGc,KAC3BoH,EAAAxH,QAAQO,EAAG,CAAA,GACbiH,EAAE9G,QAAQxB,EAAGqB,EAAG,CAAE,GAClB6B,EAAI7B,GAEZ,GACG,IAGMiH,EAAEhI,WACX,CAMA,SAASoI,GAAiBJ,EAAGlI,GAC3B,OAAO0I,GAAQ1I,EAAEa,SAAS,SAAUC,GAC9B,GAAAoH,EAAEvE,QAAQ7C,EAAElB,KAAOsI,EAAEvE,QAAQ7C,EAAEG,GAC1B,OAAA8G,GAAM/H,EAAGc,EAEtB,GACA,CAEA,SAASyH,GAAWL,EAAGlI,EAAGiI,GACxBzH,EAAU0H,EAAEzH,SAAS,SAAUb,GAC3BI,EAAAqB,KAAKzB,GAAGwF,MAAQ6C,CACtB,GACA,CC1EA,SAASnF,GAAI9C,EAAG2I,EAAIrD,GACbsD,EAAUD,KACbA,EAAK,CAACA,IAGJ,IAAAE,GAAc7I,EAAE8I,aAAe9I,EAAE+I,WAAa/I,EAAEgJ,WAAWC,KAAKjJ,GAEhEkJ,EAAM,GACNrG,EAAU,CAAA,EAQP,OAPAG,EAAA2F,GAAI,SAAU/I,GACnB,IAAKI,EAAE2D,QAAQ/D,GACP,MAAA,IAAImF,MAAM,6BAA+BnF,GAGjDuJ,GAAMnJ,EAAGJ,EAAa,SAAV0F,EAAkBzC,EAASgG,EAAYK,EACvD,IACSA,CACT,CAEA,SAASC,GAAMnJ,EAAGJ,EAAGwJ,EAAWvG,EAASgG,EAAYK,GAC9CnG,EAAMF,EAASjD,KAClBiD,EAAQjD,IAAK,EAERwJ,GACHF,EAAI5J,KAAKM,GAEXyJ,EAAOR,EAAWjJ,IAAI,SAAUqB,GAC9BkI,GAAMnJ,EAAGiB,EAAGmI,EAAWvG,EAASgG,EAAYK,EAClD,IACQE,GACFF,EAAI5J,KAAKM,GAGf,CCIA,SAAS0J,GAAetJ,GACtBA,EPZF,SAAkBA,GAChB,IAAI8D,GAAa,IAAIzD,GAAQ4D,SAASjE,EAAE0B,SAYjC,OAXPlB,EAAUR,EAAES,SAAS,SAAUb,GAC7BkE,EAAWpD,QAAQd,EAAGI,EAAEqB,KAAKzB,GACjC,IACEY,EAAUR,EAAEa,SAAS,SAAUC,GAC7B,IAAIyI,EAAczF,EAAW9C,KAAKF,EAAElB,EAAGkB,EAAEG,IAAM,CAAEC,OAAQ,EAAG0G,OAAQ,GAChE1E,EAAQlD,EAAEgB,KAAKF,GACnBgD,EAAW1C,QAAQN,EAAElB,EAAGkB,EAAEG,EAAG,CAC3BC,OAAQqI,EAAYrI,OAASgC,EAAMhC,OACnC0G,OAAQ3O,KAAKC,IAAIqQ,EAAY3B,OAAQ1E,EAAM0E,SAEjD,IACS9D,CACT,COFM0F,CAASxJ,GACb0H,GAAY1H,GACR,IAIAc,EAJAoH,EAAIF,GAAahI,GAKb,IAJRyJ,GAAiBvB,GACjBwB,GAAcxB,EAAGlI,GAGTc,EAAI6I,GAAUzB,IAEN0B,GAAA1B,EAAGlI,EAAGc,EADhB+I,GAAU3B,EAAGlI,EAAGc,GAGxB,CAKA,SAAS4I,GAAcxB,EAAGlI,GACxB,IAAI2I,EC/DN,SAAmB3I,EAAG2I,GACb7F,OAAAA,GAAI9C,EAAG2I,EAAI,OACpB,CD6DWmB,CAAc5B,EAAGA,EAAEzH,SAC5BkI,EAAKA,EAAG3S,MAAM,EAAG2S,EAAGzS,OAAS,GACnB8M,EAAA2F,GAAI,SAAU/I,IAK1B,SAAwBsI,EAAGlI,EAAG+J,GACxB,IAAAC,EAAW9B,EAAE7G,KAAK0I,GAClBE,EAASD,EAASC,OACpB/B,EAAAlH,KAAK+I,EAAOE,GAAQC,SAAWC,GAAajC,EAAGlI,EAAG+J,EACtD,CARmBK,CAAAlC,EAAGlI,EAAGJ,EACzB,GACA,CAYA,SAASuK,GAAajC,EAAGlI,EAAG+J,GACtB,IACAE,EADW/B,EAAE7G,KAAK0I,GACAE,OAElBI,GAAc,EAEdC,EAAYtK,EAAEgB,KAAK+I,EAAOE,GAE1BM,EAAW,EAyBR,OAvBFD,IACWD,GAAA,EACFC,EAAAtK,EAAEgB,KAAKiJ,EAAQF,IAG7BQ,EAAWD,EAAUpJ,OAErBV,EAAUR,EAAEwI,UAAUuB,IAAQ,SAAUjJ,GAClC,IA2HkB0J,EAAG5K,EA3HrB6K,EAAY3J,EAAElB,IAAMmK,EACtB9S,EAAQwT,EAAY3J,EAAEG,EAAIH,EAAElB,EAE9B,GAAI3I,IAAUgT,EAAQ,CACpB,IAAIS,EAAeD,IAAcJ,EAC/BM,EAAc3K,EAAEgB,KAAKF,GAAGI,OAG1B,GADYqJ,GAAAG,EAAeC,GAAeA,EAoHtBH,EAnHFT,EAmHKnK,EAnHE3I,EAAViR,EAoHP0C,QAAQJ,EAAG5K,GApHc,CAC/B,IAAIiL,EAAgB3C,EAAElH,KAAK+I,EAAO9S,GAAOiT,SAC7BK,GAAAG,GAAgBG,EAAgBA,CAC7C,CACF,CACL,IAESN,CACT,CAEA,SAASd,GAAiBqB,EAAMrT,GAC1B+N,UAAUtP,OAAS,IACrBuB,EAAOqT,EAAKrK,QAAQ,IAEtBsK,GAAgBD,EAAM,CAAA,EAAI,EAAGrT,EAC/B,CAEA,SAASsT,GAAgBD,EAAMjI,EAASmI,EAASpL,EAAGqK,GAClD,IAAIgB,EAAMD,EACN9H,EAAQ4H,EAAKzJ,KAAKzB,GAkBf,OAhBPiD,EAAQjD,IAAK,EACbY,EAAUsK,EAAK9B,UAAUpJ,IAAI,SAAUqB,GAChC8B,EAAMF,EAAS5B,KAClB+J,EAAUD,GAAgBD,EAAMjI,EAASmI,EAAS/J,EAAGrB,GAE3D,IAEEsD,EAAM+H,IAAMA,EACZ/H,EAAMgI,IAAMF,IACRf,EACF/G,EAAM+G,OAASA,SAGR/G,EAAM+G,OAGRe,CACT,CAEA,SAASrB,GAAUmB,GACjB,OAAOK,GAAOL,EAAKjK,SAAS,SAAUC,GACpC,OAAOgK,EAAK9J,KAAKF,GAAGoJ,SAAW,CACnC,GACA,CAEA,SAASL,GAAU3B,EAAGlI,EAAGgB,GACvB,IAAIpB,EAAIoB,EAAKpB,EACTqB,EAAID,EAAKC,EAKRjB,EAAE4K,QAAQhL,EAAGqB,KAChBrB,EAAIoB,EAAKC,EACTA,EAAID,EAAKpB,GAGP,IAAAwL,EAASlD,EAAE7G,KAAKzB,GAChByL,EAASnD,EAAE7G,KAAKJ,GAChBqK,EAAYF,EACZG,GAAO,EAgBJ7C,OAZH0C,EAAOF,IAAMG,EAAOH,MACVI,EAAAD,EACLE,GAAA,GAUF7C,GAPU8C,EAASxL,EAAEa,SAAS,SAAUG,GAC7C,OACEuK,IAASE,GAAavD,EAAGA,EAAE7G,KAAKL,EAAKpB,GAAI0L,IACzCC,IAASE,GAAavD,EAAGA,EAAE7G,KAAKL,EAAKC,GAAIqK,EAE/C,KAE6B,SAAUtK,GAC5B,OAAA+G,GAAM/H,EAAGgB,EACpB,GACA,CAEA,SAAS4I,GAAc1B,EAAGlI,EAAGc,EAAG4K,GAC9B,IAAI9L,EAAIkB,EAAElB,EACNqB,EAAIH,EAAEG,EACRiH,EAAA/E,WAAWvD,EAAGqB,GAChBiH,EAAE9G,QAAQsK,EAAE9L,EAAG8L,EAAEzK,EAAG,CAAA,GACpBwI,GAAiBvB,GACjBwB,GAAcxB,EAAGlI,GAInB,SAAqBkI,EAAGlI,GACtB,IAAIvI,EAAO0T,GAAOjD,EAAEzH,SAAS,SAAUb,GACrC,OAAQI,EAAEqB,KAAKzB,GAAGqK,MACtB,IACMtB,EE1MN,SAAkB3I,EAAG2I,GACZ7F,OAAAA,GAAI9C,EAAG2I,EAAI,MACpB,CFwMWgD,CAAazD,EAAGzQ,GACpBkR,EAAAA,EAAG3S,MAAM,GACJgN,EAAA2F,GAAI,SAAU/I,GACtB,IAAIqK,EAAS/B,EAAE7G,KAAKzB,GAAGqK,OACrBjJ,EAAOhB,EAAEgB,KAAKpB,EAAGqK,GACjB2B,GAAU,EAEP5K,IACIA,EAAAhB,EAAEgB,KAAKiJ,EAAQrK,GACZgM,GAAA,GAGZ5L,EAAEqB,KAAKzB,GAAGwF,KAAOpF,EAAEqB,KAAK4I,GAAQ7E,MAAQwG,EAAU5K,EAAK4G,QAAU5G,EAAK4G,OAC1E,GACA,CArBEiE,CAAY3D,EAAGlI,EACjB,CAiCA,SAASyL,GAAaX,EAAMM,EAAQU,GAClC,OAAOA,EAAUb,KAAOG,EAAOF,KAAOE,EAAOF,KAAOY,EAAUZ,GAChE,CGlNA,SAAS9F,GAAKpF,GACJ,OAAAA,EAAE0B,QAAQqK,QAChB,IAAK,kBASL,QACEC,GAAqBhM,SAPvB,IAAK,cAcT,SAAyBA,GACvB0H,GAAY1H,GACZgI,GAAahI,EACf,CAhBMiM,CAAgBjM,GAChB,MACF,IAAK,eACHkM,GAAkBlM,GAKxB,CCJ2B,IAAI+E,MJ1B/BuE,GAAeG,iBAAmBA,GAClCH,GAAeI,cAAgBA,GAC/BJ,GAAea,aAAeA,GAC9Bb,GAAeK,UAAYA,GAC3BL,GAAeO,UAAYA,GAC3BP,GAAeM,cAAgBA,GG4B/B,IAAIsC,GAAoBxE,GAOxB,SAASsE,GAAqBhM,GAC5BsJ,GAAetJ,EACjB,CEvBA,SAASyC,GAAIzC,GACX,IAAIvI,EAAO4O,GAAkBrG,EAAG,OAAQ,CAAA,EAAI,SACxCmM,EAqEN,SAAoBnM,GAClB,IAAImM,EAAS,CAAA,EACJrJ,SAAAA,EAAIlD,EAAGwM,GACV,IAAAlI,EAAWlE,EAAEkE,SAAStE,GACtBsE,GAAYA,EAAShO,QACb8M,EAAAkB,GAAU,SAAU6F,GAC5BjH,EAAIiH,EAAOqC,EAAQ,EAC3B,IAEID,EAAOvM,GAAKwM,CACb,CAIM,OAHP5L,EAAUR,EAAEkE,YAAY,SAAUtE,GAChCkD,EAAIlD,EAAG,EACX,IACSuM,CACT,CApFeE,CAAWrM,GACpB8E,EAASW,GAAM6G,EAASH,IAAW,EACnCI,EAAU,EAAIzH,EAAS,EAEzB9E,EAAA0B,QAAQ8K,YAAc/U,EAGxB+I,EAAUR,EAAEa,SAAS,SAAUC,GAC3Bd,EAAAgB,KAAKF,GAAG8G,QAAU2E,CACxB,IAGM,IAAArL,EA0EN,SAAoBlB,GACXyM,OAAAA,EACLzM,EAAEa,SACF,SAAUqI,EAAKpI,GACb,OAAOoI,EAAMlJ,EAAEgB,KAAKF,GAAGI,MACxB,GACD,EAEJ,CAlFewL,CAAW1M,GAAK,EAG7BQ,EAAUR,EAAEkE,YAAY,SAAU6F,GAChCjH,GAAI9C,EAAGvI,EAAM8U,EAASrL,EAAQ4D,EAAQqH,EAAQpC,EAClD,IAII/J,EAAA0B,QAAQiL,eAAiBJ,CAC7B,CAEA,SAASzJ,GAAI9C,EAAGvI,EAAM8U,EAASrL,EAAQ4D,EAAQqH,EAAQvM,GACjD,IAAAsE,EAAWlE,EAAEkE,SAAStE,GACtB,GAACsE,EAAShO,OAAV,CAOA,IAAA0W,EAAMC,GAAmB7M,EAAG,OAC5B8M,EAASD,GAAmB7M,EAAG,OAC/BkD,EAAQlD,EAAEqB,KAAKzB,GAEjBI,EAAAsG,UAAUsG,EAAKhN,GACjBsD,EAAM6J,UAAYH,EAChB5M,EAAAsG,UAAUwG,EAAQlN,GACpBsD,EAAM8J,aAAeF,EAEX9J,EAAAkB,GAAU,SAAU6F,GAC5BjH,GAAI9C,EAAGvI,EAAM8U,EAASrL,EAAQ4D,EAAQqH,EAAQpC,GAE1C,IAAAkD,EAAYjN,EAAEqB,KAAK0I,GACnBmD,EAAWD,EAAUF,UAAYE,EAAUF,UAAYhD,EACvDoD,EAAcF,EAAUD,aAAeC,EAAUD,aAAejD,EAChEqD,EAAaH,EAAUF,UAAY7L,EAAS,EAAIA,EAChD0G,EAASsF,IAAaC,EAAc,EAAIrI,EAASqH,EAAOvM,GAAK,EAE/DI,EAAAoB,QAAQwL,EAAKM,EAAU,CACvBhM,OAAQkM,EACRxF,SACAyF,aAAa,IAGbrN,EAAAoB,QAAQ+L,EAAaL,EAAQ,CAC7B5L,OAAQkM,EACRxF,SACAyF,aAAa,GAEnB,IAEOrN,EAAEiK,OAAOrK,IACVI,EAAAoB,QAAQ3J,EAAMmV,EAAK,CAAE1L,OAAQ,EAAG0G,OAAQ9C,EAASqH,EAAOvM,IAlC3D,MAJKA,IAAMnI,GACNuI,EAAAoB,QAAQ3J,EAAMmI,EAAG,CAAEsB,OAAQ,EAAG0G,OAAQ2E,GAuC9C,CC9DA,SAASe,GAAgBtN,EAAGoF,EAAMmI,GAC5B9V,IAAAA,EAmCN,SAAwBuI,GAClB,IAAAJ,EACJ,KAAOI,EAAE2D,QAAS/D,EAAI2D,GAAW,YAC1B,OAAA3D,CACT,CAvCa4N,CAAexN,GACxB1G,EAAS,IAAI+G,EAAM,CAAEoN,UAAU,IAC5BxJ,SAAS,CAAExM,KAAMA,IACjBiW,qBAAoB,SAAU9N,GACtB,OAAAI,EAAEqB,KAAKzB,EACtB,IA2BS,OAzBPY,EAAUR,EAAES,SAAS,SAAUb,GACzB,IAAAyB,EAAOrB,EAAEqB,KAAKzB,GAChBqK,EAASjK,EAAEiK,OAAOrK,IAEhByB,EAAK+D,OAASA,GAAS/D,EAAKsM,SAAWvI,GAAQA,GAAQ/D,EAAK8D,WAC9D7L,EAAOoH,QAAQd,GACRtG,EAAAgN,UAAU1G,EAAGqK,GAAUxS,GAG9B+I,EAAUR,EAAEuN,GAAc3N,IAAI,SAAUkB,GAClC,IAAA0J,EAAI1J,EAAElB,IAAMA,EAAIkB,EAAEG,EAAIH,EAAElB,EAC1BoB,EAAO1H,EAAO0H,KAAKwJ,EAAG5K,GACtBsB,EAAUmE,EAAcrE,GAAsB,EAAdA,EAAKE,OAChC5H,EAAA8H,QAAQoJ,EAAG5K,EAAG,CAAEsB,OAAQlB,EAAEgB,KAAKF,GAAGI,OAASA,GAC1D,IAEU6B,EAAM1B,EAAM,YACd/H,EAAOoH,QAAQd,EAAG,CAChBgO,WAAYvM,EAAKuM,WAAWxI,GAC5ByI,YAAaxM,EAAKwM,YAAYzI,KAIxC,IAES9L,CACT,CCjDA,SAASwU,GAAW9N,EAAGkF,GAErB,IADA,IAAI6I,EAAK,EACAhM,EAAI,EAAGA,EAAImD,EAAShP,SAAU6L,EAC/BgM,GAAAC,GAAmBhO,EAAGkF,EAASnD,EAAI,GAAImD,EAASnD,IAEjD,OAAAgM,CACT,CAEA,SAASC,GAAmBhO,EAAGiO,EAAYC,GAuBzC,IAnBA,ICbiB3V,EAAO4V,EDapBC,GCba7V,EDcf2V,ECdsBC,EDetBhM,GAAM+L,GAAY,SAAUtO,EAAGmC,GACtB,OAAAA,CACb,IE3BA,SAAuBxJ,EAAO4V,EAAQE,GAM7B,IALH,IAAApY,KACAC,EAASqC,EAAMrC,OACfoY,EAAaH,EAAOjY,OACpBoD,EAAS,CAAA,IAEJrD,EAAQC,GAAQ,CACvB,IAAIY,EAAQb,EAAQqY,EAAaH,EAAOlY,QAAS,EACjDoY,EAAW/U,EAAQf,EAAMtC,GAAQa,EAClC,CACM,OAAAwC,CACT,CDASiV,CAAchW,GAAS,GAAI4V,GAAU,GAAIxS,IDkB5C6S,EAAetM,EACjBC,GAAM8L,GAAY,SAAUrO,GACnB6O,OAAAA,GACLtM,GAAMnC,EAAEoC,SAASxC,IAAI,SAAUkB,GACtB,MAAA,CAAE4N,IAAKN,EAAStN,EAAEG,GAAIC,OAAQlB,EAAEgB,KAAKF,GAAGI,OACzD,IACQ,MAER,KAIMyN,EAAa,EACVA,EAAaT,EAAWhY,QAAuByY,IAAA,EAClD,IAAAC,EAAW,EAAID,EAAa,EAClBA,GAAA,EACd,IAAI7D,EAAO3I,GAAM,IAAInI,MAAM4U,IAAW,WAC7B,OAAA,CACX,IAGMb,EAAK,EAqBF,OApBPvN,EAEEgO,EAAaxL,SAAQ,SAAU/D,GACzB,IAAAhJ,EAAQgJ,EAAMyP,IAAMC,EACnB7D,EAAA7U,IAAUgJ,EAAMiC,OAGrB,IAFA,IAAI2N,EAAY,EAET5Y,EAAQ,GAETA,EAAQ,IACG4Y,GAAA/D,EAAK7U,EAAQ,IAIvB6U,EADL7U,EAASA,EAAQ,GAAM,IACRgJ,EAAMiC,OAEvB6M,GAAM9O,EAAMiC,OAAS2N,CAC3B,KAGSd,CACT,CGpDA,SAASe,GAAiBC,EAASC,GACjC,IAAIC,EAAgB,CAAA,EA+BpB,OA9BUjM,EAAA+L,GAAS,SAAU9P,EAAO8C,GAClC,IAAImN,EAAOD,EAAchQ,EAAMW,GAAK,CAClCuP,SAAU,EACVxO,GAAI,GACJC,IAAK,GACL+H,GAAI,CAAC1J,EAAMW,GACXmC,KAEGsD,EAAcpG,EAAMmQ,cAEvBF,EAAIE,WAAanQ,EAAMmQ,WAEvBF,EAAIhO,OAASjC,EAAMiC,OAEzB,IAEEV,EAAUwO,EAAGnO,SAAS,SAAUC,GAC1B,IAAAuO,EAASJ,EAAcnO,EAAElB,GACzB0P,EAASL,EAAcnO,EAAEG,GACxBoE,EAAcgK,IAAYhK,EAAciK,KACpCA,EAAAH,WACPE,EAAOzO,IAAItB,KAAK2P,EAAcnO,EAAEG,IAEtC,IAUA,SAA4BsO,GAC1B,IAAIR,EAAU,GAEd,SAASS,EAASC,GAChB,OAAO,SAAUlN,GACXA,EAAOmN,SAITrK,EAAc9C,EAAO6M,aACrB/J,EAAcoK,EAAOL,aACrB7M,EAAO6M,YAAcK,EAAOL,aAiCpC,SAAsBO,EAAQrX,GAC5B,IAAIsX,EAAM,EACN1O,EAAS,EAETyO,EAAOzO,SACF0O,GAAAD,EAAOP,WAAaO,EAAOzO,OAClCA,GAAUyO,EAAOzO,QAGf5I,EAAO4I,SACF0O,GAAAtX,EAAO8W,WAAa9W,EAAO4I,OAClCA,GAAU5I,EAAO4I,QAGnByO,EAAOhH,GAAKrQ,EAAOqQ,GAAG3G,OAAO2N,EAAOhH,IACpCgH,EAAOP,WAAaQ,EAAM1O,EAC1ByO,EAAOzO,OAASA,EAChByO,EAAO5N,EAAI9I,KAAK8B,IAAIzC,EAAOyJ,EAAG4N,EAAO5N,GACrCzJ,EAAOoX,QAAS,CAClB,CAlDQG,CAAaJ,EAAQlN,EAE7B,CACG,CAED,SAASuN,EAAUL,GACjB,OAAO,SAAUjN,GACRA,EAAI,GAAElD,KAAKmQ,GACQ,KAApBjN,EAAO2M,UACXI,EAAUjQ,KAAKkD,EAEvB,CACG,CAED,KAAO+M,EAAUrZ,QAAQ,CACnB,IAAA+I,EAAQsQ,EAAUQ,MACtBhB,EAAQzP,KAAKL,GACbuB,EAAUvB,EAAU,GAAE+Q,UAAWR,EAASvQ,IAC1CuB,EAAUvB,EAAM2B,IAAKkP,EAAU7Q,GAChC,CAEMkD,OAAAA,GACLqJ,EAASuD,GAAS,SAAU9P,GAC1B,OAAQA,EAAMyQ,MACpB,KACI,SAAUzQ,GACR,OAAOgR,GAAOhR,EAAO,CAAC,KAAM,IAAK,aAAc,UAChD,GAEL,CA7CSiR,CALS1E,EAASyD,GAAe,SAAUhQ,GAEhD,OAAQA,EAAMkQ,QAClB,IAGA,CCzDA,SAASxS,GAAKoS,EAASoB,GACrB,IA0CuBC,EA1CnBC,ElBwNN,SAAmB3W,EAAYiM,GAC7B,IAAIrM,EAAS,CAAEgX,IAAK,GAAIC,IAAK,IAQtB,OAPGvN,EAAAtJ,GAAY,SAAU5C,GAC1B6O,EAAG7O,GACEwC,EAAAgX,IAAIhR,KAAKxI,GAETwC,EAAAiX,IAAIjR,KAAKxI,EAEtB,IACSwC,CACT,CkBlOckX,CAAezB,GAAS,SAAU9P,GACrC8D,OAAAA,EAAM9D,EAAO,aACxB,IACMwR,EAAWJ,EAAMC,IACnBI,EAAajC,GAAS4B,EAAME,KAAK,SAAUtR,GACzC,OAAQA,EAAM8C,CACpB,IACI4G,EAAK,GACLiH,EAAM,EACN1O,EAAS,EACTyP,EAAU,EAEZF,EAAS9T,MA8BcyT,IA9BSD,EA+BzB,SAAUd,EAAQC,GACnB,OAAAD,EAAOD,WAAaE,EAAOF,YACtB,EACEC,EAAOD,WAAaE,EAAOF,WAC7B,EAGDgB,EAA6Bd,EAAOvN,EAAIsN,EAAOtN,EAAxCsN,EAAOtN,EAAIuN,EAAOvN,CACrC,IArCY4O,EAAAC,GAAkBjI,EAAI+H,EAAYC,GAElC3N,EAAAyN,GAAU,SAAUxR,GAC5B0R,GAAW1R,EAAM0J,GAAGzS,OACjByS,EAAArJ,KAAKL,EAAM0J,IACPiH,GAAA3Q,EAAMmQ,WAAanQ,EAAMiC,OAChCA,GAAUjC,EAAMiC,OACNyP,EAAAC,GAAkBjI,EAAI+H,EAAYC,EAChD,IAEE,IAAIrX,EAAS,CAAEqP,GAAIzG,EAAUyG,IAKtB,OAJHzH,IACF5H,EAAO8V,WAAaQ,EAAM1O,EAC1B5H,EAAO4H,OAASA,GAEX5H,CACT,CAEA,SAASsX,GAAkBjI,EAAI+H,EAAYza,GAEzC,IADI6C,IAAAA,EACG4X,EAAWxa,SAAW4C,EAAO+X,GAAOH,IAAa3O,GAAK9L,GAC3Dya,EAAWX,MACRpH,EAAArJ,KAAKxG,EAAK6P,IACb1S,IAEK,OAAAA,CACT,CCvCA,SAAS6a,GAAa9Q,EAAGJ,EAAGoP,EAAImB,GAC1B,IAAAY,EAAU/Q,EAAEkE,SAAStE,GACrByB,EAAOrB,EAAEqB,KAAKzB,GACdoR,EAAK3P,EAAOA,EAAKuM,gBAAa,EAC9BqD,EAAK5P,EAAOA,EAAKwM,iBAAc,EAC/BqD,EAAY,CAAA,EAEZF,IACQxF,EAAAA,EAASuF,GAAS,SAAU9P,GAC7B,OAAAA,IAAM+P,GAAM/P,IAAMgQ,CAC/B,KAGM,IAAAE,EChBN,SAAoBnR,EAAG+Q,GACd5O,OAAAA,GAAM4O,GAAS,SAAUnR,GAC1B,IAAAwR,EAAMpR,EAAEsC,QAAQ1C,GAChB,GAACwR,EAAIlb,OAEF,CACL,IAAIoD,EAASmT,EACX2E,GACA,SAAUlI,EAAKpI,GACT,IAAAE,EAAOhB,EAAEgB,KAAKF,GAChBuQ,EAAQrR,EAAEqB,KAAKP,EAAElB,GACZ,MAAA,CACLgQ,IAAK1G,EAAI0G,IAAM5O,EAAKE,OAASmQ,EAAM/L,MACnCpE,OAAQgI,EAAIhI,OAASF,EAAKE,OAE7B,GACD,CAAE0O,IAAK,EAAG1O,OAAQ,IAGb,MAAA,CACLtB,IACAwP,WAAY9V,EAAOsW,IAAMtW,EAAO4H,OAChCA,OAAQ5H,EAAO4H,OAElB,CApBC,MAAO,CAAEtB,IAqBf,GACA,CDVoBwP,CAAWpP,EAAG+Q,GACtB/N,EAAAmO,GAAa,SAAUlS,GAC/B,GAAIe,EAAEkE,SAASjF,EAAMW,GAAG1J,OAAQ,CAC9B,IAAIob,EAAiBR,GAAa9Q,EAAGf,EAAMW,EAAGoP,EAAImB,GACxCe,EAAAjS,EAAMW,GAAK0R,EACjBvO,EAAMuO,EAAgB,gBA0CEra,EAzCFqa,EA0CzBjM,GADmBsK,EAzCD1Q,GA0CGmQ,aAMxBO,EAAOP,WAAanY,EAAMmY,WAC1BO,EAAOzO,OAASjK,EAAMiK,SANfyO,EAAAP,YACJO,EAAOP,WAAaO,EAAOzO,OAASjK,EAAMmY,WAAanY,EAAMiK,SAC7DyO,EAAOzO,OAASjK,EAAMiK,QACzByO,EAAOzO,QAAUjK,EAAMiK,QA5CtB,CAuCL,IAA0ByO,EAAQ1Y,CAtClC,IAEM,IAAA8X,EAAUD,GAAiBqC,EAAanC,IAuB9C,SAAyBD,EAASmC,GACtBlO,EAAA+L,GAAS,SAAU9P,GAC3BA,EAAM0J,GAAKzG,EACTjD,EAAM0J,GAAGzO,KAAI,SAAU0F,GACjB,OAAAsR,EAAUtR,GACLsR,EAAUtR,GAAG+I,GAEf/I,CACf,IAEA,GACA,CAjCE2R,CAAgBxC,EAASmC,GAErB,IAAA5X,EAASqD,GAAKoS,EAASoB,GAE3B,GAAIa,IACF1X,EAAOqP,GAAKzG,EAAU,CAAC8O,EAAI1X,EAAOqP,GAAIsI,IAClCjR,EAAEwR,aAAaR,GAAI9a,QAAQ,CAC7B,IAAIub,EAASzR,EAAEqB,KAAKrB,EAAEwR,aAAaR,GAAI,IACrCU,EAAS1R,EAAEqB,KAAKrB,EAAEwR,aAAaP,GAAI,IAChClO,EAAMzJ,EAAQ,gBACjBA,EAAO8V,WAAa,EACpB9V,EAAO4H,OAAS,GAEX5H,EAAA8V,YACJ9V,EAAO8V,WAAa9V,EAAO4H,OAASuQ,EAAOnM,MAAQoM,EAAOpM,QAAUhM,EAAO4H,OAAS,GACvF5H,EAAO4H,QAAU,CAClB,CAGI,OAAA5H,CACT,CE1BA,SAASgM,GAAMtF,GACTmF,IAAAA,EAAUwM,GAAa3R,GACzB4R,EAAkBC,GAAiB7R,EAAGuB,GAAQ,EAAG4D,EAAU,GAAI,WAC/D2M,EAAgBD,GAAiB7R,EAAGuB,GAAQ4D,EAAU,GAAG,GAAM,GAAG,YAEhED,EChBN,SAAmBlF,GACjB,IAAI6C,EAAU,CAAA,EACVkP,EAAcvG,EAASxL,EAAES,SAAS,SAAUb,GAC9C,OAAQI,EAAEkE,SAAStE,GAAG1J,MAC1B,IACMiP,EAAUM,GACZtD,GAAM4P,GAAa,SAAUnS,GACpB,OAAAI,EAAEqB,KAAKzB,GAAGwF,IACvB,KAEM4M,EAAS7P,GAAMZ,GAAQ4D,EAAU,IAAI,WACvC,MAAO,EACX,IAUM8M,EAAYxD,GAASsD,GAAa,SAAUnS,GACvC,OAAAI,EAAEqB,KAAKzB,GAAGwF,IACrB,IAGS,OAFP5E,EAAUyR,GAXV,SAASnP,EAAIlD,GACPmD,IAAAA,EAAMF,EAASjD,GAAfmD,CACJF,EAAQjD,IAAK,EACT,IAAAyB,EAAOrB,EAAEqB,KAAKzB,GAClBoS,EAAO3Q,EAAK+D,MAAM9F,KAAKM,GACvBY,EAAUR,EAAE+I,WAAWnJ,GAAIkD,EAJJ,CAKxB,IAOMkP,CACT,CDZiBE,CAAUlS,GACzBmS,GAAYnS,EAAGkF,GAKN,IAHL,IACFkN,EADEC,EAASxK,OAAOC,kBAGX/F,EAAI,EAAGuQ,EAAW,EAAGA,EAAW,IAAKvQ,IAAKuQ,EAAU,CAC3DC,GAAiBxQ,EAAI,EAAI6P,EAAkBE,EAAe/P,EAAI,GAAK,GAG/D,IAAAgM,EAAKD,GAAW9N,EADpBkF,EAAWsN,GAAsBxS,IAE7B+N,EAAKsE,IACIC,EAAA,EACXF,EEnBGK,EFmBgBvN,EEnBCwN,GFoBXL,EAAAtE,EAEZ,CAEDoE,GAAYnS,EAAGoS,EACjB,CAEA,SAASP,GAAiB7R,EAAG2S,EAAOpF,GAC3BpL,OAAAA,GAAMwQ,GAAO,SAAUvN,GACrB,OAAAkI,GAAgBtN,EAAGoF,EAAMmI,EACpC,GACA,CAEA,SAASgF,GAAiBK,EAAazC,GACjC,IAAAnB,EAAK,IAAI3O,EACH2C,EAAA4P,GAAa,SAAUC,GAC3Bpb,IAAAA,EAAOob,EAAGnR,QAAQjK,KAClBqb,EAAShC,GAAa+B,EAAIpb,EAAMuX,EAAImB,GACxC3P,EAAUsS,EAAOnK,IAAI,SAAU/I,EAAGmC,GAC7B8Q,EAAAxR,KAAKzB,GAAG0F,MAAQvD,CACzB,IG7DA,SAAgC/B,EAAGgP,EAAIrG,GACjC,IACFoK,EADE3M,EAAO,CAAE,EAGHpD,EAAA2F,GAAI,SAAU/I,GAItB,IAHA,IACEqK,EACA+I,EAFEjJ,EAAQ/J,EAAEiK,OAAOrK,GAGdmK,GAAO,CASR,IARKE,EAAAjK,EAAEiK,OAAOF,KAEhBiJ,EAAY5M,EAAK6D,GACjB7D,EAAK6D,GAAUF,IAEHiJ,EAAAD,EACDA,EAAAhJ,GAETiJ,GAAaA,IAAcjJ,EAE7B,YADGiF,EAAA5N,QAAQ4R,EAAWjJ,GAGhBA,EAAAE,CACT,CACL,GAyBA,CHc2BgJ,CAAAJ,EAAI7D,EAAI8D,EAAOnK,GAC1C,GACA,CAEA,SAASwJ,GAAYnS,EAAGkF,GACZlC,EAAAkC,GAAU,SAAUgO,GAClBlQ,EAAAkQ,GAAO,SAAUtT,EAAGmC,GAC1B/B,EAAAqB,KAAKzB,GAAG0F,MAAQvD,CACxB,GACA,GACA,CIxEA,SAASoR,GAAkBnT,GACrB,IAAAoT,EAoEN,SAAmBpT,GACjB,IAAI1G,EAAS,CAAA,EACT4R,EAAM,EAEV,SAASpI,EAAIlD,GACX,IAAIqL,EAAMC,EACV1K,EAAUR,EAAEkE,SAAStE,GAAIkD,GACzBxJ,EAAOsG,GAAK,CAAEqL,MAAUC,IAAKA,IAC9B,CAGM,OAFGlI,EAAAhD,EAAEkE,WAAYpB,GAEjBxJ,CACT,CAhFsB8P,CAAUpJ,GAE9BQ,EAAUR,EAAE0B,QAAQwF,aAAa,SAAUtH,GAUlC,IATH,IAAAyB,EAAOrB,EAAEqB,KAAKzB,GACd2H,EAAUlG,EAAKkG,QACf8L,EAsCR,SAAkBrT,EAAGoT,EAAexT,EAAGqB,GACrC,IAIIgJ,EACAqJ,EALAC,EAAQ,GACRC,EAAQ,GACRvI,EAAMhS,KAAK8B,IAAIqY,EAAcxT,GAAGqL,IAAKmI,EAAcnS,GAAGgK,KACtDC,EAAMjS,KAAKC,IAAIka,EAAcxT,GAAGsL,IAAKkI,EAAcnS,GAAGiK,KAKjDjB,EAAArK,EACN,GACQqK,EAAAjK,EAAEiK,OAAOA,GAClBsJ,EAAMjU,KAAK2K,SACJA,IAAWmJ,EAAcnJ,GAAQgB,IAAMA,GAAOC,EAAMkI,EAAcnJ,GAAQiB,MAC7EoI,EAAArJ,EAGGA,EAAAhJ,EACT,MAAQgJ,EAASjK,EAAEiK,OAAOA,MAAaqJ,GACrCE,EAAMlU,KAAK2K,GAGN,MAAA,CAAE/O,KAAMqY,EAAMvR,OAAOwR,EAAMxD,WAAYsD,MAChD,CA7DmBG,CAASzT,EAAGoT,EAAe7L,EAAQ3H,EAAG2H,EAAQtG,GACzD/F,EAAOmY,EAASnY,KAChBoY,EAAMD,EAASC,IACfI,EAAU,EACVC,EAAQzY,EAAKwY,GACbE,GAAY,EAEThU,IAAM2H,EAAQtG,GAAG,CAGtB,GAFOI,EAAArB,EAAEqB,KAAKzB,GAEVgU,EAAW,CACL,MAAAD,EAAQzY,EAAKwY,MAAcJ,GAAOtT,EAAEqB,KAAKsS,GAAOxO,QAAU9D,EAAK+D,MACrEsO,IAGEC,IAAUL,IACAM,GAAA,EAEf,CAED,IAAKA,EAAW,CACd,KACEF,EAAUxY,EAAKhF,OAAS,GACxB8J,EAAEqB,KAAMsS,EAAQzY,EAAKwY,EAAU,IAAK/F,SAAWtM,EAAK+D,MAEpDsO,IAEFC,EAAQzY,EAAKwY,EACd,CAEC1T,EAAAsG,UAAU1G,EAAG+T,GACf/T,EAAII,EAAE+I,WAAWnJ,GAAG,EACrB,CACL,GACA,CCLA,SAASiU,GAAmB7T,EAAGkF,GAC7B,IAAI4O,EAAY,CAAA,EAoCT,OADPrH,EAASvH,GAjCA,SAAW6O,EAAWb,GAG3B,IAAAc,EAAK,EAGLC,EAAU,EACVC,EAAkBH,EAAU7d,OAC5Bie,EAAWtD,GAAOqC,GAsBb,OApBGlQ,EAAAkQ,GAAO,SAAUtT,EAAGmC,GACxB,IAAAd,EAsEV,SAAmCjB,EAAGJ,GACpC,GAAII,EAAEqB,KAAKzB,GAAGgE,MACZ,OAAOuH,GAAOnL,EAAEwR,aAAa5R,IAAI,SAAU4K,GAClC,OAAAxK,EAAEqB,KAAKmJ,GAAG5G,KACvB,GAEA,CA5EcwQ,CAA0BpU,EAAGJ,GACnCyU,EAAKpT,EAAIjB,EAAEqB,KAAKJ,GAAGqE,MAAQ4O,GAEzBjT,GAAKrB,IAAMuU,KACb3T,EAAU0S,EAAMld,MAAMie,EAASlS,EAAI,IAAI,SAAUuS,GAC/C9T,EAAUR,EAAEwR,aAAa8C,IAAW,SAAU9J,GAC5C,IAAI+J,EAASvU,EAAEqB,KAAKmJ,GAClBgK,EAAOD,EAAOjP,QACXkP,EAAOR,GAAMK,EAAKG,IAAWD,EAAO3Q,OAAS5D,EAAEqB,KAAKiT,GAAU1Q,OACrD6Q,GAAAX,EAAWtJ,EAAG8J,EAExC,GACA,IAEQL,EAAUlS,EAAI,EACTiS,EAAAK,EAEb,IAEWnB,CACR,IAGMY,CACT,CAsDA,SAASW,GAAYX,EAAWlU,EAAGqB,GACjC,GAAIrB,EAAIqB,EAAG,CACT,IAAIiO,EAAMtP,EACNA,EAAAqB,EACAA,EAAAiO,CACL,CAEG,IAAAwF,EAAaZ,EAAUlU,GACtB8U,IACOZ,EAAAlU,GAAK8U,EAAa,IAE9BA,EAAWzT,IAAK,CAClB,CAEA,SAAS0T,GAAYb,EAAWlU,EAAGqB,GACjC,GAAIrB,EAAIqB,EAAG,CACT,IAAIiO,EAAMtP,EACNA,EAAAqB,EACAA,EAAAiO,CACL,CACD,OAAOnM,EAAM+Q,EAAUlU,GAAIqB,EAC7B,CAkDA,SAAS2T,GAAqB5U,EAAGkF,EAAUzN,EAAMod,EAAOC,GAMtD,IAAIC,EAAK,CAAE,EACTC,EAkDJ,SAAyBhV,EAAGkF,EAAUzN,EAAMqd,GAC1C,IAAIG,EAAa,IAAI5U,EACnB6U,EAAalV,EAAE0B,QACfyT,EAgHJ,SAAa5I,EAAS6I,EAASN,GACtB,OAAA,SAAU9U,EAAGJ,EAAGqB,GACjB,IAGAgH,EAHAmD,EAASpL,EAAEqB,KAAKzB,GAChByL,EAASrL,EAAEqB,KAAKJ,GAChB2O,EAAM,EAIN7M,GADJ6M,GAAOxE,EAAOxG,MAAQ,EAClB7B,EAAMqI,EAAQ,YACR,OAAAA,EAAO5D,SAASd,eACtB,IAAK,IACKuB,GAACmD,EAAOxG,MAAQ,EACxB,MACF,IAAK,IACHqD,EAAQmD,EAAOxG,MAAQ,EAazB7B,GATAkF,IACK2H,GAAAkF,EAAa7M,GAASA,GAEvBA,EAAA,EAEA2H,IAAAxE,EAAOxH,MAAQwR,EAAU7I,GAAW,EACpCqD,IAAAvE,EAAOzH,MAAQwR,EAAU7I,GAAW,EAE5CqD,GAAOvE,EAAOzG,MAAQ,EAClB7B,EAAMsI,EAAQ,YACR,OAAAA,EAAO7D,SAASd,eACtB,IAAK,IACHuB,EAAQoD,EAAOzG,MAAQ,EACvB,MACF,IAAK,IACKqD,GAACoD,EAAOzG,MAAQ,EASvB,OALHqD,IACK2H,GAAAkF,EAAa7M,GAASA,GAEvBA,EAAA,EAED2H,CACX,CACA,CA5JYyF,CAAIH,EAAWI,QAASJ,EAAWK,QAAST,GAgB/C,OAdG9R,EAAAkC,GAAU,SAAUgO,GACxB,IAAA1I,EACMxH,EAAAkQ,GAAO,SAAUtT,GACrB,IAAA4V,EAAQ/d,EAAKmI,GAEjB,GADAqV,EAAWvU,QAAQ8U,GACfhL,EAAG,CACD,IAAAiL,EAAQhe,EAAK+S,GACfkL,EAAUT,EAAWjU,KAAKyU,EAAOD,GACnCP,EAAW7T,QAAQqU,EAAOD,EAAOvc,KAAKC,IAAIic,EAAMnV,EAAGJ,EAAG4K,GAAIkL,GAAW,GACtE,CACGlL,EAAA5K,CACV,GACA,IAESqV,CACT,CAtEaU,CAAgB3V,EAAGkF,EAAUzN,EAAMqd,GAC5C3O,EAAa2O,EAAa,aAAe,cAElC,SAAAc,EAAQC,EAAWC,GAI1B,IAHI,IAAAlT,EAAQoS,EAAOvU,QACfsV,EAAOnT,EAAMmN,MACblN,EAAU,CAAA,EACPkT,GACDlT,EAAQkT,GACVF,EAAUE,IAEVlT,EAAQkT,IAAQ,EAChBnT,EAAMtD,KAAKyW,GACXnT,EAAQA,EAAMZ,OAAO8T,EAAcC,KAGrCA,EAAOnT,EAAMmN,KAEhB,CA6BM,OARP6F,GAlBA,SAAeG,GACVhB,EAAAgB,GAAQf,EAAO1S,QAAQyT,GAAMC,QAAO,SAAU9M,EAAKpI,GAC7C,OAAA7H,KAAKC,IAAIgQ,EAAK6L,EAAGjU,EAAElB,GAAKoV,EAAOhU,KAAKF,GAC5C,GAAE,EACJ,GAcckU,EAAOxD,aAAavI,KAAK+L,IACxCY,GAZA,SAAeG,GACThb,IAAAA,EAAMia,EAAO5S,SAAS2T,GAAMC,QAAO,SAAU9M,EAAKpI,GAC7C,OAAA7H,KAAK8B,IAAImO,EAAK6L,EAAGjU,EAAEG,GAAK+T,EAAOhU,KAAKF,GACjD,GAAO+G,OAAOC,mBAENzG,EAAOrB,EAAEqB,KAAK0U,GACdhb,IAAQ8M,OAAOC,mBAAqBzG,EAAK8E,aAAeA,IAC1D4O,EAAGgB,GAAQ9c,KAAKC,IAAI6b,EAAGgB,GAAOhb,GAEjC,GAGcia,EAAOjM,WAAWE,KAAK+L,IAG5BhS,EAAA6R,GAAO,SAAUjV,GACzBmV,EAAGnV,GAAKmV,EAAGtd,EAAKmI,GACpB,IAESmV,CACT,CA2BA,SAASkB,GAA2BjW,EAAGkW,GACrC,OAAOxN,GAAQ4D,EAAS4J,IAAM,SAAUnB,GACtC,IC9PW7c,EAAQ2B,ED8PfX,EAAM2O,OAAOsO,kBACbpb,EAAM8M,OAAOC,kBASjB,OCxQmBjO,EDiQP,SAAU2K,EAAG5E,GACvB,IAAIwW,EAkIV,SAAepW,EAAGJ,GACT,OAAAI,EAAEqB,KAAKzB,GAAGgF,KACnB,CApIsBA,CAAM5E,EAAGJ,GAAK,EAE9B1G,EAAMD,KAAKC,IAAIsL,EAAI4R,EAAWld,GAC9B6B,EAAM9B,KAAK8B,IAAIyJ,EAAI4R,EAAWrb,EACpC,ECrQmB,OADJ7C,EDiQH6c,IC9PNsB,EAAQne,EAAQoe,EAAazc,GAAWrB,GDqQnCU,EAAM6B,CACjB,GACA,CA4CA,SAASwb,GAAUvW,GACb,IAIAwW,EAJAtR,EAAWsN,GAAsBxS,GACjC8T,EAAY2C,EAAQ5C,GAAmB7T,EAAGkF,GAzQhD,SAA4BlF,EAAGkF,GAC7B,IAAI4O,EAAY,CAAA,EAEhB,SAAS4C,EAAKC,EAAOvI,EAAUwI,EAAUC,EAAiBC,GACpD,IAAAlX,EACJY,EAAUe,GAAQ6M,EAAUwI,IAAW,SAAU7U,GAC/CnC,EAAI+W,EAAM5U,GACN/B,EAAEqB,KAAKzB,GAAGgE,OACZpD,EAAUR,EAAEwR,aAAa5R,IAAI,SAAU4K,GACjC,IAAAuM,EAAQ/W,EAAEqB,KAAKmJ,GACfuM,EAAMnT,QAAUmT,EAAMzR,MAAQuR,GAAmBE,EAAMzR,MAAQwR,IACrDrC,GAAAX,EAAWtJ,EAAG5K,EAEtC,GAEA,GACG,CAyBM,OADP6M,EAASvH,GAtBA,SAAW8R,EAAOL,GACrB,IACFM,EADEC,GACF,EACA9I,EAAW,EAgBN,OAdGpL,EAAA2T,GAAO,SAAU/W,EAAGuX,GAC5B,GAAwB,WAApBnX,EAAEqB,KAAKzB,GAAGgE,MAAoB,CAC5B,IAAA4N,EAAexR,EAAEwR,aAAa5R,GAC9B4R,EAAatb,SACf+gB,EAAejX,EAAEqB,KAAKmQ,EAAa,IAAIlM,MACvCoR,EAAKC,EAAOvI,EAAU+I,EAAgBD,EAAcD,GAEzC7I,EAAA+I,EACID,EAAAD,EAElB,CACDP,EAAKC,EAAOvI,EAAUuI,EAAMzgB,OAAQ+gB,EAAcD,EAAM9gB,OAC9D,IAEWygB,CACR,IAGM7C,CACT,CA+N2DsD,CAAmBpX,EAAGkF,IAE3EgR,EAAM,CAAA,EAEV1V,EAAU,CAAC,IAAK,MAAM,SAAU6W,GAC9Bb,EAA4B,MAATa,EAAenS,EAAWoH,EAASpH,GAAU8K,UAChExP,EAAU,CAAC,IAAK,MAAM,SAAU8W,GAChB,MAAVA,IACiBnV,EAAAA,GAAMqU,GAAkB,SAAUe,GAC5CjL,OAAAA,EAASiL,GAAOvH,SACjC,KAGU,IAAAwH,GAAuB,MAATH,EAAerX,EAAEwR,aAAexR,EAAE+I,YAAYE,KAAKjJ,GACjE6U,EApMV,SAA2B7U,EAAGkF,EAAU4O,EAAW0D,GACjD,IAAI/f,EAAO,CAAE,EACXod,EAAQ,CAAE,EACVnG,EAAM,CAAA,EAkCD,OA7BG1L,EAAAkC,GAAU,SAAUgO,GAClBlQ,EAAAkQ,GAAO,SAAUtT,EAAG0F,GAC5B7N,EAAKmI,GAAKA,EACViV,EAAMjV,GAAKA,EACX8O,EAAI9O,GAAK0F,CACf,GACA,IAEYtC,EAAAkC,GAAU,SAAUgO,GAC5B,IAAIuE,GAAU,EACJzU,EAAAkQ,GAAO,SAAUtT,GACrB,IAAA8X,EAAKF,EAAW5X,GACpB,GAAI8X,EAAGxhB,OAKL,IADI,IAAAyhB,IAHClJ,EAAAA,GAASiJ,GAAI,SAAUzW,GAC1B,OAAOyN,EAAIzN,EACrB,KACqB/K,OAAS,GAAK,EAClB6L,EAAI9I,KAAK2e,MAAMD,GAAKE,EAAK5e,KAAK0E,KAAKga,GAAK5V,GAAK8V,IAAM9V,EAAG,CACzD,IAAAd,EAAIyW,EAAG3V,GACP8S,EAAMjV,KAAOA,GAAK6X,EAAU/I,EAAIzN,KAAO0T,GAAYb,EAAWlU,EAAGqB,KACnE4T,EAAM5T,GAAKrB,EACXiV,EAAMjV,GAAKnI,EAAKmI,GAAKnI,EAAKwJ,GAC1BwW,EAAU/I,EAAIzN,GAEjB,CAET,GACA,IAES,CAAExJ,KAAMA,EAAMod,QACvB,CA8JkBiD,CAAkB9X,EAAGwW,EAAkB1C,EAAW0D,GAC1DzC,EAAKH,GAAqB5U,EAAGwW,EAAkB3B,EAAMpd,KAAMod,EAAMA,MAAiB,MAAVyC,GAC9D,MAAVA,IACGS,EAAAA,GAAYhD,GAAI,SAAUvQ,GAC7B,OAAQA,CAClB,KAEU0R,EAAAmB,EAAOC,GAASvC,CAC1B,GACA,IAEM,IAAAiD,EAAgB/B,GAA2BjW,EAAGkW,GAElD,OAhEF,SAA0BA,EAAK+B,GACzB,IAAAC,EAAc5L,EAAS2L,GACzBE,EAAaxQ,GAAMuQ,GACnBE,EAAa3S,GAAMyS,GAErB1X,EAAU,CAAC,IAAK,MAAM,SAAU6W,GAC9B7W,EAAU,CAAC,IAAK,MAAM,SAAU8W,GAC9B,IAEErP,EAFEoQ,EAAYhB,EAAOC,EACrBvC,EAAKmB,EAAImC,GAEX,GAAItD,IAAOkD,EAAX,CAEI,IAAAK,EAAShM,EAASyI,IACd9M,EAAU,MAAVqP,EAAgBa,EAAaxQ,GAAM2Q,GAAUF,EAAa3S,GAAM6S,MAGtEpC,EAAImC,GAAaN,GAAYhD,GAAI,SAAUvQ,GACzC,OAAOA,EAAIyD,CACrB,IAR0B,CAU1B,GACA,GACA,CAyCEsQ,CAAiBrC,EAAK8B,GAvCxB,SAAiB9B,EAAKrB,GACpB,OAAOkD,GAAY7B,EAAIsC,IAAI,SAAUC,EAAQ7Y,GAC3C,GAAIiV,EACF,OAAOqB,EAAIrB,EAAMnO,eAAe9G,GAEhC,IAAImV,EAAKtG,GAAStM,GAAM+T,EAAKtW,IAC7B,OAAQmV,EAAG,GAAKA,EAAG,IAAM,CAE/B,GACA,CA+BS2D,CAAQxC,EAAKlW,EAAE0B,QAAQmT,MAChC,CE9WA,SAAS8D,GAAS3Y,GCyBlB,IAAgB9H,EAAQ2B,GDhBxB,SAAmBmG,GACb,IAAAkF,EAAWsN,GAAsBxS,GACjC4Y,EAAU5Y,EAAE0B,QAAQmX,QACpBC,EAAQ,EACF9V,EAAAkC,GAAU,SAAUgO,GAC5B,IAAI6F,EAAYtT,GACdtD,GAAM+Q,GAAO,SAAUtT,GACd,OAAAI,EAAEqB,KAAKzB,GAAGkF,MACzB,KAEc9B,EAAAkQ,GAAO,SAAUtT,GACzBI,EAAEqB,KAAKzB,GAAG6E,EAAIqU,EAAQC,EAAY,CACxC,IACID,GAASC,EAAYH,CACzB,GACA,EArBEI,CAFAhZ,EAAIiZ,GAAwBjZ,ICwBd9H,EDrBLqe,GAAUvW,GCqBGnG,EDrBC,SAAU2K,EAAG5E,GAChCI,EAAAqB,KAAKzB,GAAG4E,EAAIA,CAClB,ECoBStM,GAAUsC,EAAWtC,EAAQoe,EAAazc,GDnBnD,CEEA,SAASqf,GAAOlZ,EAAGmZ,GACjB,IAAIzT,EAAOyT,GAAQA,EAAKC,YAAcC,GAAYC,GAClD5T,EAAK,UAAU,WACT,IAAA6T,EAAc7T,EAAK,sBAAsB,WAC3C,OA0JN,SAA0B8T,GACpB,IAAAxZ,EAAI,IAAIK,EAAM,CAAE0D,YAAY,EAAM0J,UAAU,IAC5C/L,EAAQ+X,GAAaD,EAAW9X,SAoB7B,OAlBL1B,EAAAiE,SACAwS,EAAQ,CAAA,EAAIiD,GAAeC,GAAkBjY,EAAOkY,IAAgB3J,GAAOvO,EAAOmY,MAGpFrZ,EAAUgZ,EAAW/Y,SAAS,SAAUb,GACtC,IAAIyB,EAAOoY,GAAaD,EAAWnY,KAAKzB,IACtCI,EAAAU,QAAQd,EAAGka,EAAWH,GAAkBtY,EAAM0Y,IAAeC,KAC/Dha,EAAEsG,UAAU1G,EAAG4Z,EAAWvP,OAAOrK,GACrC,IAEEY,EAAUgZ,EAAW3Y,SAAS,SAAUC,GACtC,IAAIE,EAAOyY,GAAaD,EAAWxY,KAAKF,IACtCd,EAAAoB,QACAN,EACA2V,EAAQ,CAAA,EAAIwD,GAAcN,GAAkB3Y,EAAMkZ,IAAejK,GAAOjP,EAAMmZ,KAEpF,IAESna,CACT,CAjLaoa,CAAiBpa,EAC9B,IACI0F,EAAK,eAAe,YASxB,SAAmB1F,EAAG0F,GACpBA,EAAK,8BAA8B,YA+KrC,SAAgC1F,GAC1B,IAAA0B,EAAQ1B,EAAE0B,QACdA,EAAMmX,SAAW,EACjBrY,EAAUR,EAAEa,SAAS,SAAUC,GACzB,IAAAE,EAAOhB,EAAEgB,KAAKF,GAClBE,EAAK4G,QAAU,EACqB,MAAhC5G,EAAKwG,SAASd,gBACM,OAAlBhF,EAAM+E,SAAsC,OAAlB/E,EAAM+E,QAClCzF,EAAK4D,OAAS5D,EAAKqZ,YAEnBrZ,EAAK8D,QAAU9D,EAAKqZ,YAG5B,GACA,CA5LIC,CAAuBta,EAC3B,IACE0F,EAAK,uBAAuB,YAqW9B,SAAyB1F,GACvBQ,EAAUR,EAAEa,SAAS,SAAUC,GACzB,GAAAA,EAAElB,IAAMkB,EAAEG,EAAG,CACf,IAAII,EAAOrB,EAAEqB,KAAKP,EAAElB,GACfyB,EAAKkZ,YACRlZ,EAAKkZ,UAAY,IAEdlZ,EAAAkZ,UAAUjb,KAAK,CAAEwB,IAAMoC,MAAOlD,EAAEgB,KAAKF,KAC1Cd,EAAEmD,WAAWrC,EACd,CACL,GACA,CA/WI0Z,CAAgBxa,EACpB,IACE0F,EAAK,eAAe,WAClB+U,GAAYza,EAChB,IACE0F,EAAK,wBAAwB,WAC3BgV,GAAiB1a,EACrB,IACE0F,EAAK,YAAY,WACVuT,GAAAA,GAAwBjZ,GACjC,IACE0F,EAAK,8BAA8B,YAsLrC,SAAgC1F,GAC9BQ,EAAUR,EAAEa,SAAS,SAAUC,GACzB,IAAAE,EAAOhB,EAAEgB,KAAKF,GACd,GAAAE,EAAK4D,OAAS5D,EAAK8D,OAAQ,CAC7B,IAAIlF,EAAII,EAAEqB,KAAKP,EAAElB,GAEbsD,EAAQ,CAAEkC,MADNpF,EAAEqB,KAAKP,EAAEG,GACMmE,KAAOxF,EAAEwF,MAAQ,EAAIxF,EAAEwF,KAAMtE,KAClC0C,GAAAxD,EAAG,aAAckD,EAAO,MAC3C,CACL,GACA,CA/LIyX,CAAuB3a,EAC3B,IACE0F,EAAK,wBAAwB,Y9BmH/B,SAA0B1F,GAExB,IAAI4a,EAASjT,GACXxF,GAAMnC,EAAES,SAAS,SAAUb,GAClB,OAAAI,EAAEqB,KAAKzB,GAAGwF,IACvB,KAGM4M,EAAS,GACbxR,EAAUR,EAAES,SAAS,SAAUb,GAC7B,IAAIwF,EAAOpF,EAAEqB,KAAKzB,GAAGwF,KAAOwV,EACvB5I,EAAO5M,KACHA,EAAAA,GAAQ,IAEVA,EAAAA,GAAM9F,KAAKM,EACtB,IAEE,IAAIqI,EAAQ,EACR0E,EAAiB3M,EAAE0B,QAAQiL,eACrB3J,EAAAgP,GAAQ,SAAUrJ,EAAI5G,GAC1BsD,EAAcsD,IAAO5G,EAAI4K,GAAmB,IAC5C1E,EACOA,GACCjF,EAAA2F,GAAI,SAAU/I,GACpBI,EAAAqB,KAAKzB,GAAGwF,MAAQ6C,CAC1B,GAEA,GACA,C8B9II4S,CAAsB7a,EAC1B,IACE0F,EAAK,4BAA4B,YlB0EnC,SAAiB1F,GACX,IAAAkV,EAAalV,EAAE0B,QACjB1B,EAAA8B,WAAWoT,EAAW1I,oBACjB0I,EAAW1I,YAClBhM,EAAUR,EAAEa,SAAS,SAAUC,GAClBd,EAAEgB,KAAKF,GACTuM,aACPrN,EAAEmD,WAAWrC,EAEnB,GACA,CkBnFIga,CAAqB9a,EACzB,IACE0F,EAAK,sBAAsB,Y9B+F7B,SAAwB1F,GACtB,IAAIjF,EAAM4M,GACRxF,GAAMnC,EAAES,SAAS,SAAUb,GAClB,OAAAI,EAAEqB,KAAKzB,GAAGwF,IACvB,KAEE5E,EAAUR,EAAES,SAAS,SAAUb,GACzB,IAAAyB,EAAOrB,EAAEqB,KAAKzB,GACdmD,EAAM1B,EAAM,UACdA,EAAK+D,MAAQrK,EAEnB,GACA,C8B1GIggB,CAAoB/a,EACxB,IACE0F,EAAK,wBAAwB,YAsL/B,SAA0B1F,GACxB,IAAImF,EAAU,EACd3E,EAAUR,EAAES,SAAS,SAAUb,GACzB,IAAAyB,EAAOrB,EAAEqB,KAAKzB,GACdyB,EAAK0L,YACP1L,EAAKsM,QAAU3N,EAAEqB,KAAKA,EAAK0L,WAAW3H,KACtC/D,EAAK8D,QAAUnF,EAAEqB,KAAKA,EAAK2L,cAAc5H,KAEzCD,EAAUM,GAAMN,EAAS9D,EAAK8D,SAEpC,IACInF,EAAA0B,QAAQyD,QAAUA,CACtB,CAjMI6V,CAAiBhb,EACrB,IACE0F,EAAK,8BAA8B,YAiMrC,SAAgC1F,GAC9BQ,EAAUR,EAAES,SAAS,SAAUb,GACzB,IAAAyB,EAAOrB,EAAEqB,KAAKzB,GACC,eAAfyB,EAAKuC,QACP5D,EAAEgB,KAAKK,EAAKP,GAAGwG,UAAYjG,EAAK+D,KAChCpF,EAAE8B,WAAWlC,GAEnB,GACA,CAxMIqb,CAAuBjb,EAC3B,IACE0F,EAAK,qBAAqB,WACxBwV,GAAclb,EAClB,IACE0F,EAAK,yBAAyB,WAC5ByN,GAAkBnT,EACtB,IACE0F,EAAK,yBAAyB,Y7BjEhC,SAA2B1F,GAkBfgD,EAAAhD,EAAEkE,YAjBZ,SAASpB,EAAIlD,GACP,IAAAsE,EAAWlE,EAAEkE,SAAStE,GACtByB,EAAOrB,EAAEqB,KAAKzB,GAKdmD,GAJAmB,EAAShO,QACXsK,EAAU0D,EAAUpB,GAGlBC,EAAM1B,EAAM,WAAY,CAC1BA,EAAKuM,WAAa,GAClBvM,EAAKwM,YAAc,GACVzI,IAAAA,IAAAA,EAAO/D,EAAKsM,QAASxI,EAAU9D,EAAK8D,QAAU,EAAGC,EAAOD,IAAWC,EAC1EG,GAAcvF,EAAG,aAAc,MAAOJ,EAAGyB,EAAM+D,GAC/CG,GAAcvF,EAAG,cAAe,MAAOJ,EAAGyB,EAAM+D,EAEnD,CACF,GAGH,C6B+CI+V,CAAkBnb,EACtB,IACE0F,EAAK,aAAa,WAChBJ,GAAMtF,EACV,IACE0F,EAAK,uBAAuB,YAwU9B,SAAyB1F,GACnB,IAAAgS,EAASQ,GAAsBxS,GACzBgD,EAAAgP,GAAQ,SAAUkB,GAC1B,IAAIkI,EAAa,EACPpY,EAAAkQ,GAAO,SAAUtT,EAAGmC,GACxB,IAAAV,EAAOrB,EAAEqB,KAAKzB,GAClByB,EAAKiE,MAAQvD,EAAIqZ,EACPpY,EAAA3B,EAAKkZ,WAAW,SAAUc,GAClChV,GACErG,EACA,WACA,CACE4E,MAAOyW,EAASnY,MAAM0B,MACtBE,OAAQuW,EAASnY,MAAM4B,OACvBM,KAAM/D,EAAK+D,KACXE,MAAOvD,KAAMqZ,EACbta,EAAGua,EAASva,EACZoC,MAAOmY,EAASnY,OAElB,MAEV,WACa7B,EAAKkZ,SAClB,GACA,GACA,CAhWIe,CAAgBtb,EACpB,IACE0F,EAAK,8BAA8B,Y5B3ErC,SAAgB1F,GACd,IAAIwG,EAAUxG,EAAE0B,QAAQ+E,QAAQC,cAChB,OAAZF,GAAgC,OAAZA,GACtBQ,GAAgBhH,EAEpB,C4BuEIub,CAAwBvb,EAC5B,IACE0F,EAAK,gBAAgB,WACnBiT,GAAS3Y,EACb,IACE0F,EAAK,yBAAyB,YA0VhC,SAA2B1F,GACzBQ,EAAUR,EAAES,SAAS,SAAUb,GACzB,IAAAyB,EAAOrB,EAAEqB,KAAKzB,GACd,GAAe,aAAfyB,EAAKuC,MAAsB,CAC7B,IAAI4X,EAAWxb,EAAEqB,KAAKA,EAAKP,EAAElB,GACzB4E,EAAIgX,EAAShX,EAAIgX,EAAS5W,MAAQ,EAClCH,EAAI+W,EAAS/W,EACbC,EAAKrD,EAAKmD,EAAIA,EACdG,EAAK6W,EAAS1W,OAAS,EAC3B9E,EAAEoB,QAAQC,EAAKP,EAAGO,EAAK6B,OACvBlD,EAAE8B,WAAWlC,GACbyB,EAAK6B,MAAM0D,OAAS,CAClB,CAAEpC,EAAGA,EAAK,EAAIE,EAAM,EAAGD,EAAGA,EAAIE,GAC9B,CAAEH,EAAGA,EAAK,EAAIE,EAAM,EAAGD,EAAGA,EAAIE,GAC9B,CAAEH,EAAGA,EAAIE,EAAID,KACb,CAAED,EAAGA,EAAK,EAAIE,EAAM,EAAGD,EAAGA,EAAIE,GAC9B,CAAEH,EAAGA,EAAK,EAAIE,EAAM,EAAGD,EAAGA,EAAIE,IAE3BtD,EAAA6B,MAAMsB,EAAInD,EAAKmD,EACfnD,EAAA6B,MAAMuB,EAAIpD,EAAKoD,CACrB,CACL,GACA,CA/WIgX,CAAkBzb,EACtB,IACE0F,EAAK,yBAAyB,YAwRhC,SAA2B1F,GACzBQ,EAAUR,EAAES,SAAS,SAAUb,GAC7B,GAAII,EAAEkE,SAAStE,GAAG1J,OAAQ,CACpB,IAAAmL,EAAOrB,EAAEqB,KAAKzB,GACdsI,EAAIlI,EAAEqB,KAAKA,EAAK0L,WAChB2O,EAAI1b,EAAEqB,KAAKA,EAAK2L,cAChB2O,EAAI3b,EAAEqB,KAAKwP,GAAOxP,EAAKuM,aACvBgO,EAAI5b,EAAEqB,KAAKwP,GAAOxP,EAAKwM,cAE3BxM,EAAKuD,MAAQ3L,KAAK+L,IAAI4W,EAAEpX,EAAImX,EAAEnX,GAC9BnD,EAAKyD,OAAS7L,KAAK+L,IAAI0W,EAAEjX,EAAIyD,EAAEzD,GAC/BpD,EAAKmD,EAAImX,EAAEnX,EAAInD,EAAKuD,MAAQ,EAC5BvD,EAAKoD,EAAIyD,EAAEzD,EAAIpD,EAAKyD,OAAS,CAC9B,CACL,IAEEtE,EAAUR,EAAES,SAAS,SAAUb,GACL,WAApBI,EAAEqB,KAAKzB,GAAGgE,OACZ5D,EAAE8B,WAAWlC,EAEnB,GACA,CA5SIic,CAAkB7b,EACtB,IACE0F,EAAK,sBAAsB,Y3BrB7B,SAAc1F,GACZQ,EAAUR,EAAE0B,QAAQwF,aAAa,SAAUtH,GACrC,IAEAqB,EAFAI,EAAOrB,EAAEqB,KAAKzB,GACdkc,EAAYza,EAAKgG,UAGrB,IADErH,EAAAoB,QAAQC,EAAKkG,QAASuU,GACjBza,EAAKuC,OACV3C,EAAIjB,EAAE+I,WAAWnJ,GAAG,GACpBI,EAAE8B,WAAWlC,GACHkc,EAAAlV,OAAOtH,KAAK,CAAEkF,EAAGnD,EAAKmD,EAAGC,EAAGpD,EAAKoD,IACxB,eAAfpD,EAAKuC,QACPkY,EAAUtX,EAAInD,EAAKmD,EACnBsX,EAAUrX,EAAIpD,EAAKoD,EACnBqX,EAAUlX,MAAQvD,EAAKuD,MACvBkX,EAAUhX,OAASzD,EAAKyD,QAEtBlF,EAAAqB,EACGI,EAAArB,EAAEqB,KAAKzB,EAEpB,GACA,C2BEImc,CAAe/b,EACnB,IACE0F,EAAK,4BAA4B,YAsPnC,SAA8B1F,GAC5BQ,EAAUR,EAAEa,SAAS,SAAUC,GACzB,IAAAE,EAAOhB,EAAEgB,KAAKF,GACdiC,GAAAA,EAAM/B,EAAM,KAId,OAHsB,MAAlBA,EAAKwG,UAAsC,MAAlBxG,EAAKwG,WAChCxG,EAAK4D,OAAS5D,EAAKqZ,aAEbrZ,EAAKwG,UACX,IAAK,IACHxG,EAAKwD,GAAKxD,EAAK4D,MAAQ,EAAI5D,EAAKqZ,YAChC,MACF,IAAK,IACHrZ,EAAKwD,GAAKxD,EAAK4D,MAAQ,EAAI5D,EAAKqZ,YAI1C,GACA,CAtQI2B,CAAqBhc,EACzB,IACE0F,EAAK,4BAA4B,WAC/BuW,GAAsBjc,EAC1B,IACE0F,EAAK,sBAAsB,YAoK7B,SAAwB1F,GACtB,IAAIkc,EAAOrU,OAAOC,kBACdqU,EAAO,EACPC,EAAOvU,OAAOC,kBACduU,EAAO,EACPnH,EAAalV,EAAE0B,QACf4a,EAAUpH,EAAWqH,SAAW,EAChCC,EAAUtH,EAAWuH,SAAW,EAEpC,SAASC,EAAYhZ,GACnB,IAAIc,EAAId,EAAMc,EACVC,EAAIf,EAAMe,EACVxD,EAAIyC,EAAMkB,MACVC,EAAInB,EAAMoB,OACdoX,EAAOjjB,KAAK8B,IAAImhB,EAAM1X,EAAIvD,EAAI,GAC9Bkb,EAAOljB,KAAKC,IAAIijB,EAAM3X,EAAIvD,EAAI,GAC9Bmb,EAAOnjB,KAAK8B,IAAIqhB,EAAM3X,EAAII,EAAI,GAC9BwX,EAAOpjB,KAAKC,IAAImjB,EAAM5X,EAAII,EAAI,EAC/B,CAEDrE,EAAUR,EAAES,SAAS,SAAUb,GACjB8c,EAAA1c,EAAEqB,KAAKzB,GACvB,IACEY,EAAUR,EAAEa,SAAS,SAAUC,GACzB,IAAAE,EAAOhB,EAAEgB,KAAKF,GACdiC,EAAM/B,EAAM,MACd0b,EAAY1b,EAElB,IAEUkb,GAAAI,EACAF,GAAAI,EAERhc,EAAUR,EAAES,SAAS,SAAUb,GACzB,IAAAyB,EAAOrB,EAAEqB,KAAKzB,GAClByB,EAAKmD,GAAK0X,EACV7a,EAAKoD,GAAK2X,CACd,IAEE5b,EAAUR,EAAEa,SAAS,SAAUC,GACzB,IAAAE,EAAOhB,EAAEgB,KAAKF,GACRkC,EAAAhC,EAAK4F,QAAQ,SAAU+V,GAC/BA,EAAEnY,GAAK0X,EACPS,EAAElY,GAAK2X,CACb,IACQrZ,EAAM/B,EAAM,OACdA,EAAKwD,GAAK0X,GAERnZ,EAAM/B,EAAM,OACdA,EAAKyD,GAAK2X,EAEhB,IAEalH,EAAAtQ,MAAQuX,EAAOD,EAAOI,EACtBpH,EAAApQ,OAASuX,EAAOD,EAAOI,CACpC,CA1NII,CAAe5c,EACnB,IACE0F,EAAK,4BAA4B,YA0NnC,SAA8B1F,GAC5BQ,EAAUR,EAAEa,SAAS,SAAUC,GACzB,IAGA+b,EAAIC,EAHJ9b,EAAOhB,EAAEgB,KAAKF,GACdic,EAAQ/c,EAAEqB,KAAKP,EAAElB,GACjBod,EAAQhd,EAAEqB,KAAKP,EAAEG,GAEhBD,EAAK4F,QAKHiW,EAAA7b,EAAK4F,OAAO,GACjBkW,EAAK9b,EAAK4F,OAAO5F,EAAK4F,OAAO1Q,OAAS,KALtC8K,EAAK4F,OAAS,GACTiW,EAAAG,EACAF,EAAAC,GAKP/b,EAAK4F,OAAOqW,QAAQC,GAAmBH,EAAOF,IAC9C7b,EAAK4F,OAAOtH,KAAK4d,GAAmBF,EAAOF,GAC/C,GACA,CA1OIK,CAAqBnd,EACzB,IACE0F,EAAK,qBAAqB,YA6P5B,SAAuC1F,GACrCQ,EAAUR,EAAEa,SAAS,SAAUC,GACzB,IAAAE,EAAOhB,EAAEgB,KAAKF,GACdE,EAAKsC,UACPtC,EAAK4F,OAAOoJ,SAElB,GACA,CAnQIoN,CAA8Bpd,EAClC,IACE0F,EAAK,oBAAoB,Y/B9D3B,SAAc1F,GACZQ,EAAUR,EAAEa,SAAS,SAAUC,GACzB,IAAAoC,EAAQlD,EAAEgB,KAAKF,GACnB,GAAIoC,EAAMI,SAAU,CAClBtD,EAAEmD,WAAWrC,GAEb,IAAIsC,EAAcF,EAAME,mBACjBF,EAAMI,gBACNJ,EAAME,YACbpD,EAAEoB,QAAQN,EAAEG,EAAGH,EAAElB,EAAGsD,EAAOE,EAC5B,CACL,GACA,C+BmDIia,CAAard,EACjB,GACA,CA1FMsd,CAAU/D,EAAa7T,EAC7B,IACIA,EAAK,sBAAsB,YAgG/B,SAA0B8T,EAAYD,GACpC/Y,EAAUgZ,EAAW/Y,SAAS,SAAUb,GAClC,IAAA2d,EAAa/D,EAAWnY,KAAKzB,GAC7B4d,EAAcjE,EAAYlY,KAAKzB,GAE/B2d,IACFA,EAAW/Y,EAAIgZ,EAAYhZ,EAC3B+Y,EAAW9Y,EAAI+Y,EAAY/Y,EAEvB8U,EAAYrV,SAAStE,GAAG1J,SAC1BqnB,EAAW3Y,MAAQ4Y,EAAY5Y,MAC/B2Y,EAAWzY,OAAS0Y,EAAY1Y,QAGxC,IAEEtE,EAAUgZ,EAAW3Y,SAAS,SAAUC,GAClC,IAAAyc,EAAa/D,EAAWxY,KAAKF,GAC7B0c,EAAcjE,EAAYvY,KAAKF,GAEnCyc,EAAW3W,OAAS4W,EAAY5W,OAC5B7D,EAAMya,EAAa,OACrBD,EAAW/Y,EAAIgZ,EAAYhZ,EAC3B+Y,EAAW9Y,EAAI+Y,EAAY/Y,EAEjC,IAEE+U,EAAW9X,QAAQkD,MAAQ2U,EAAY7X,QAAQkD,MAC/C4U,EAAW9X,QAAQoD,OAASyU,EAAY7X,QAAQoD,MAClD,CA5HM2Y,CAAiBzd,EAAGuZ,EAC1B,GACA,GACA,CA2HA,IAAIK,GAAgB,CAAC,UAAW,UAAW,UAAW,UAAW,WAC7DF,GAAgB,CAAEb,QAAS,GAAItD,QAAS,GAAID,QAAS,GAAI7O,QAAS,MAClEoT,GAAa,CAAC,YAAa,SAAU,UAAW,SAChDE,GAAe,CAAC,QAAS,UACzBC,GAAe,CAAEpV,MAAO,EAAGE,OAAQ,GACnCoV,GAAe,CAAC,SAAU,SAAU,QAAS,SAAU,eACvDD,GAAe,CACjBrS,OAAQ,EACR1G,OAAQ,EACR0D,MAAO,EACPE,OAAQ,EACRuV,YAAa,GACb7S,SAAU,KAER2S,GAAY,CAAC,YAkSjB,SAASR,GAAkB+D,EAAKha,GAC9B,OAAOqU,GAAY9H,GAAOyN,EAAKha,GAAQmE,OACzC,CAEA,SAAS4R,GAAa/V,GACpB,IAAIia,EAAW,CAAA,EAIR,OAHG3a,EAAAU,GAAO,SAAU9D,EAAGD,GACnBge,EAAAhe,EAAE+G,eAAiB9G,CAChC,IACS+d,CACT","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68]}