{"version":3,"file":"jinja2-65f0b2f8.js","sources":["../../node_modules/@codemirror/legacy-modes/mode/jinja2.js"],"sourcesContent":["var keywords = [\"and\", \"as\", \"block\", \"endblock\", \"by\", \"cycle\", \"debug\", \"else\", \"elif\",\n                \"extends\", \"filter\", \"endfilter\", \"firstof\", \"do\", \"for\",\n                \"endfor\", \"if\", \"endif\", \"ifchanged\", \"endifchanged\",\n                \"ifequal\", \"endifequal\", \"ifnotequal\", \"set\", \"raw\", \"endraw\",\n                \"endifnotequal\", \"in\", \"include\", \"load\", \"not\", \"now\", \"or\",\n                \"parsed\", \"regroup\", \"reversed\", \"spaceless\", \"call\", \"endcall\", \"macro\",\n                \"endmacro\", \"endspaceless\", \"ssi\", \"templatetag\", \"openblock\",\n                \"closeblock\", \"openvariable\", \"closevariable\", \"without\", \"context\",\n                \"openbrace\", \"closebrace\", \"opencomment\",\n                \"closecomment\", \"widthratio\", \"url\", \"with\", \"endwith\",\n                \"get_current_language\", \"trans\", \"endtrans\", \"noop\", \"blocktrans\",\n                \"endblocktrans\", \"get_available_languages\",\n                \"get_current_language_bidi\", \"pluralize\", \"autoescape\", \"endautoescape\"],\n    operator = /^[+\\-*&%=<>!?|~^]/,\n    sign = /^[:\\[\\(\\{]/,\n    atom = [\"true\", \"false\"],\n    number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n\nkeywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\natom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\nfunction tokenBase (stream, state) {\n  var ch = stream.peek();\n\n  //Comment\n  if (state.incomment) {\n    if(!stream.skipTo(\"#}\")) {\n      stream.skipToEnd();\n    } else {\n      stream.eatWhile(/\\#|}/);\n      state.incomment = false;\n    }\n    return \"comment\";\n    //Tag\n  } else if (state.intag) {\n    //After operator\n    if(state.operator) {\n      state.operator = false;\n      if(stream.match(atom)) {\n        return \"atom\";\n      }\n      if(stream.match(number)) {\n        return \"number\";\n      }\n    }\n    //After sign\n    if(state.sign) {\n      state.sign = false;\n      if(stream.match(atom)) {\n        return \"atom\";\n      }\n      if(stream.match(number)) {\n        return \"number\";\n      }\n    }\n\n    if(state.instring) {\n      if(ch == state.instring) {\n        state.instring = false;\n      }\n      stream.next();\n      return \"string\";\n    } else if(ch == \"'\" || ch == '\"') {\n      state.instring = ch;\n      stream.next();\n      return \"string\";\n    } else if (state.inbraces > 0 && ch ==\")\") {\n      stream.next()\n      state.inbraces--;\n    }\n    else if (ch == \"(\") {\n      stream.next()\n      state.inbraces++;\n    }\n    else if (state.inbrackets > 0 && ch ==\"]\") {\n      stream.next()\n      state.inbrackets--;\n    }\n    else if (ch == \"[\") {\n      stream.next()\n      state.inbrackets++;\n    } else if (!state.lineTag && (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\"))) {\n      state.intag = false;\n      return \"tag\";\n    } else if(stream.match(operator)) {\n      state.operator = true;\n      return \"operator\";\n    } else if(stream.match(sign)) {\n      state.sign = true;\n    } else {\n      if (stream.column() == 1 && state.lineTag && stream.match(keywords)) {\n        //allow nospace after tag before the keyword\n        return \"keyword\";\n      }\n      if(stream.eat(\" \") || stream.sol()) {\n        if(stream.match(keywords)) {\n          return \"keyword\";\n        }\n        if(stream.match(atom)) {\n          return \"atom\";\n        }\n        if(stream.match(number)) {\n          return \"number\";\n        }\n        if(stream.sol()) {\n          stream.next();\n        }\n      } else {\n        stream.next();\n      }\n\n    }\n    return \"variable\";\n  } else if (stream.eat(\"{\")) {\n    if (stream.eat(\"#\")) {\n      state.incomment = true;\n      if(!stream.skipTo(\"#}\")) {\n        stream.skipToEnd();\n      } else {\n        stream.eatWhile(/\\#|}/);\n        state.incomment = false;\n      }\n      return \"comment\";\n      //Open tag\n    } else if (ch = stream.eat(/\\{|%/)) {\n      //Cache close tag\n      state.intag = ch;\n      state.inbraces = 0;\n      state.inbrackets = 0;\n      if(ch == \"{\") {\n        state.intag = \"}\";\n      }\n      stream.eat(\"-\");\n      return \"tag\";\n    }\n    //Line statements\n  } else if (stream.eat('#')) {\n    if (stream.peek() == '#') {\n      stream.skipToEnd();\n      return \"comment\"\n    }\n    else if (!stream.eol()) {\n      state.intag = true;\n      state.lineTag = true;\n      state.inbraces = 0;\n      state.inbrackets = 0;\n      return \"tag\";\n    }\n  }\n  stream.next();\n};\n\nexport const jinja2 = {\n  name: \"jinja2\",\n  startState: function () {\n    return {tokenize: tokenBase, inbrackets: 0, inbraces: 0};\n  },\n  token: function(stream, state) {\n    var style = state.tokenize(stream, state);\n    if (stream.eol() && state.lineTag && !state.instring && state.inbraces == 0 && state.inbrackets == 0) {\n      //Close line statement at the EOL\n      state.intag = false\n      state.lineTag = false\n    }\n    return style;\n  },\n  languageData: {\n    commentTokens: {block: {open: \"{#\", close: \"#}\", line: \"##\"}}\n  }\n};\n"],"names":["keywords","operator","sign","atom","number","tokenBase","stream","state","ch","peek","incomment","skipTo","eatWhile","skipToEnd","intag","match","instring","next","inbraces","inbrackets","lineTag","eat","column","sol","eol","RegExp","join","jinja2","name","startState","tokenize","token","style","languageData","commentTokens","block","open","close","line"],"mappings":"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","x_google_ignoreList":[0]}