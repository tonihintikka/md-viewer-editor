{"version":3,"file":"elm-ef978723.js","sources":["../../node_modules/@codemirror/legacy-modes/mode/elm.js"],"sourcesContent":["function switchState(source, setState, f)\n{\n  setState(f);\n  return f(source, setState);\n}\n\nvar lowerRE = /[a-z]/;\nvar upperRE = /[A-Z]/;\nvar innerRE = /[a-zA-Z0-9_]/;\n\nvar digitRE = /[0-9]/;\nvar hexRE = /[0-9A-Fa-f]/;\nvar symbolRE = /[-&*+.\\\\/<>=?^|:]/;\nvar specialRE = /[(),[\\]{}]/;\nvar spacesRE = /[ \\v\\f]/; // newlines are handled in tokenizer\n\nfunction normal()\n{\n  return function(source, setState)\n  {\n    if (source.eatWhile(spacesRE))\n    {\n      return null;\n    }\n\n    var char = source.next();\n\n    if (specialRE.test(char))\n    {\n      return (char === '{' && source.eat('-'))\n        ? switchState(source, setState, chompMultiComment(1))\n        : (char === '[' && source.match('glsl|'))\n        ? switchState(source, setState, chompGlsl)\n        : 'builtin';\n    }\n\n    if (char === '\\'')\n    {\n      return switchState(source, setState, chompChar);\n    }\n\n    if (char === '\"')\n    {\n      return source.eat('\"')\n        ? source.eat('\"')\n        ? switchState(source, setState, chompMultiString)\n        : 'string'\n      : switchState(source, setState, chompSingleString);\n    }\n\n    if (upperRE.test(char))\n    {\n      source.eatWhile(innerRE);\n      return 'type';\n    }\n\n    if (lowerRE.test(char))\n    {\n      var isDef = source.pos === 1;\n      source.eatWhile(innerRE);\n      return isDef ? \"def\" : \"variable\";\n    }\n\n    if (digitRE.test(char))\n    {\n      if (char === '0')\n      {\n        if (source.eat(/[xX]/))\n        {\n          source.eatWhile(hexRE); // should require at least 1\n          return \"number\";\n        }\n      }\n      else\n      {\n        source.eatWhile(digitRE);\n      }\n      if (source.eat('.'))\n      {\n        source.eatWhile(digitRE); // should require at least 1\n      }\n      if (source.eat(/[eE]/))\n      {\n        source.eat(/[-+]/);\n        source.eatWhile(digitRE); // should require at least 1\n      }\n      return \"number\";\n    }\n\n    if (symbolRE.test(char))\n    {\n      if (char === '-' && source.eat('-'))\n      {\n        source.skipToEnd();\n        return \"comment\";\n      }\n      source.eatWhile(symbolRE);\n      return \"keyword\";\n    }\n\n    if (char === '_')\n    {\n      return \"keyword\";\n    }\n\n    return \"error\";\n  }\n}\n\nfunction chompMultiComment(nest)\n{\n  if (nest == 0)\n  {\n    return normal();\n  }\n  return function(source, setState)\n  {\n    while (!source.eol())\n    {\n      var char = source.next();\n      if (char == '{' && source.eat('-'))\n      {\n        ++nest;\n      }\n      else if (char == '-' && source.eat('}'))\n      {\n        --nest;\n        if (nest === 0)\n        {\n          setState(normal());\n          return 'comment';\n        }\n      }\n    }\n    setState(chompMultiComment(nest));\n    return 'comment';\n  }\n}\n\nfunction chompMultiString(source, setState)\n{\n  while (!source.eol())\n  {\n    var char = source.next();\n    if (char === '\"' && source.eat('\"') && source.eat('\"'))\n    {\n      setState(normal());\n      return 'string';\n    }\n  }\n  return 'string';\n}\n\nfunction chompSingleString(source, setState)\n{\n  while (source.skipTo('\\\\\"')) { source.next(); source.next(); }\n  if (source.skipTo('\"'))\n  {\n    source.next();\n    setState(normal());\n    return 'string';\n  }\n  source.skipToEnd();\n  setState(normal());\n  return 'error';\n}\n\nfunction chompChar(source, setState)\n{\n  while (source.skipTo(\"\\\\'\")) { source.next(); source.next(); }\n  if (source.skipTo(\"'\"))\n  {\n    source.next();\n    setState(normal());\n    return 'string';\n  }\n  source.skipToEnd();\n  setState(normal());\n  return 'error';\n}\n\nfunction chompGlsl(source, setState)\n{\n  while (!source.eol())\n  {\n    var char = source.next();\n    if (char === '|' && source.eat(']'))\n    {\n      setState(normal());\n      return 'string';\n    }\n  }\n  return 'string';\n}\n\nvar wellKnownWords = {\n  case: 1,\n  of: 1,\n  as: 1,\n  if: 1,\n  then: 1,\n  else: 1,\n  let: 1,\n    in: 1,\n  type: 1,\n  alias: 1,\n  module: 1,\n  where: 1,\n  import: 1,\n  exposing: 1,\n  port: 1\n};\n\nexport const elm = {\n  name: \"elm\",\n  startState: function ()  { return { f: normal() }; },\n  copyState:  function (s) { return { f: s.f }; },\n\n  token: function(stream, state) {\n    var type = state.f(stream, function(s) { state.f = s; });\n    var word = stream.current();\n    return (wellKnownWords.hasOwnProperty(word)) ? 'keyword' : type;\n  },\n\n  languageData: {\n    commentTokens: {line: \"--\"}\n  }\n};\n"],"names":["switchState","source","setState","f","lowerRE","upperRE","innerRE","digitRE","hexRE","symbolRE","specialRE","spacesRE","normal","eatWhile","char","next","test","eat","chompMultiComment","match","chompGlsl","chompChar","chompMultiString","chompSingleString","isDef","pos","skipToEnd","nest","eol","skipTo","wellKnownWords","case","of","as","if","then","else","let","in","type","alias","module","where","import","exposing","port","elm","name","startState","copyState","s","token","stream","state","word","current","hasOwnProperty","languageData","commentTokens","line"],"mappings":"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","x_google_ignoreList":[0]}