{"version":3,"file":"stateDiagram-v2-d93cdb3a-e1cc7f58.js","sources":["../../node_modules/mermaid/dist/stateDiagram-v2-d93cdb3a.js"],"sourcesContent":["import { D as DEFAULT_STATE_TYPE, a as DIVIDER_TYPE, S as STMT_RELATION, b as STMT_STATE, c as DEFAULT_NESTED_DOC_DIR, p as parser, d as db, s as styles } from \"./styles-6aaf32cf.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { select } from \"d3\";\nimport { l as log, c as getConfig, u as utils, i as configureSvgSize, e as common } from \"./mermaid-b5860b54.js\";\nimport { r as render } from \"./index-3862675e.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nimport \"dagre-d3-es/src/dagre/index.js\";\nimport \"dagre-d3-es/src/graphlib/json.js\";\nimport \"./edges-e0da2a9e.js\";\nimport \"./createText-2e5e7dd3.js\";\nimport \"mdast-util-from-markdown\";\nconst SHAPE_STATE = \"rect\";\nconst SHAPE_STATE_WITH_DESC = \"rectWithTitle\";\nconst SHAPE_START = \"start\";\nconst SHAPE_END = \"end\";\nconst SHAPE_DIVIDER = \"divider\";\nconst SHAPE_GROUP = \"roundedWithTitle\";\nconst SHAPE_NOTE = \"note\";\nconst SHAPE_NOTEGROUP = \"noteGroup\";\nconst CSS_DIAGRAM = \"statediagram\";\nconst CSS_STATE = \"state\";\nconst CSS_DIAGRAM_STATE = `${CSS_DIAGRAM}-${CSS_STATE}`;\nconst CSS_EDGE = \"transition\";\nconst CSS_NOTE = \"note\";\nconst CSS_NOTE_EDGE = \"note-edge\";\nconst CSS_EDGE_NOTE_EDGE = `${CSS_EDGE} ${CSS_NOTE_EDGE}`;\nconst CSS_DIAGRAM_NOTE = `${CSS_DIAGRAM}-${CSS_NOTE}`;\nconst CSS_CLUSTER = \"cluster\";\nconst CSS_DIAGRAM_CLUSTER = `${CSS_DIAGRAM}-${CSS_CLUSTER}`;\nconst CSS_CLUSTER_ALT = \"cluster-alt\";\nconst CSS_DIAGRAM_CLUSTER_ALT = `${CSS_DIAGRAM}-${CSS_CLUSTER_ALT}`;\nconst PARENT = \"parent\";\nconst NOTE = \"note\";\nconst DOMID_STATE = \"state\";\nconst DOMID_TYPE_SPACER = \"----\";\nconst NOTE_ID = `${DOMID_TYPE_SPACER}${NOTE}`;\nconst PARENT_ID = `${DOMID_TYPE_SPACER}${PARENT}`;\nconst G_EDGE_STYLE = \"fill:none\";\nconst G_EDGE_ARROWHEADSTYLE = \"fill: #333\";\nconst G_EDGE_LABELPOS = \"c\";\nconst G_EDGE_LABELTYPE = \"text\";\nconst G_EDGE_THICKNESS = \"normal\";\nlet nodeDb = {};\nlet graphItemCount = 0;\nconst setConf = function(cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    cnf[key];\n  }\n};\nconst getClasses = function(text, diagramObj) {\n  diagramObj.db.extract(diagramObj.db.getRootDocV2());\n  return diagramObj.db.getClasses();\n};\nfunction getClassesFromDbInfo(dbInfoItem) {\n  if (dbInfoItem === void 0 || dbInfoItem === null) {\n    return \"\";\n  } else {\n    if (dbInfoItem.classes) {\n      return dbInfoItem.classes.join(\" \");\n    } else {\n      return \"\";\n    }\n  }\n}\nfunction stateDomId(itemId = \"\", counter = 0, type = \"\", typeSpacer = DOMID_TYPE_SPACER) {\n  const typeStr = type !== null && type.length > 0 ? `${typeSpacer}${type}` : \"\";\n  return `${DOMID_STATE}-${itemId}${typeStr}-${counter}`;\n}\nconst setupNode = (g, parent, parsedItem, diagramStates, diagramDb, altFlag) => {\n  const itemId = parsedItem.id;\n  const classStr = getClassesFromDbInfo(diagramStates[itemId]);\n  if (itemId !== \"root\") {\n    let shape = SHAPE_STATE;\n    if (parsedItem.start === true) {\n      shape = SHAPE_START;\n    }\n    if (parsedItem.start === false) {\n      shape = SHAPE_END;\n    }\n    if (parsedItem.type !== DEFAULT_STATE_TYPE) {\n      shape = parsedItem.type;\n    }\n    if (!nodeDb[itemId]) {\n      nodeDb[itemId] = {\n        id: itemId,\n        shape,\n        description: common.sanitizeText(itemId, getConfig()),\n        classes: `${classStr} ${CSS_DIAGRAM_STATE}`\n      };\n    }\n    const newNode = nodeDb[itemId];\n    if (parsedItem.description) {\n      if (Array.isArray(newNode.description)) {\n        newNode.shape = SHAPE_STATE_WITH_DESC;\n        newNode.description.push(parsedItem.description);\n      } else {\n        if (newNode.description.length > 0) {\n          newNode.shape = SHAPE_STATE_WITH_DESC;\n          if (newNode.description === itemId) {\n            newNode.description = [parsedItem.description];\n          } else {\n            newNode.description = [newNode.description, parsedItem.description];\n          }\n        } else {\n          newNode.shape = SHAPE_STATE;\n          newNode.description = parsedItem.description;\n        }\n      }\n      newNode.description = common.sanitizeTextOrArray(newNode.description, getConfig());\n    }\n    if (newNode.description.length === 1 && newNode.shape === SHAPE_STATE_WITH_DESC) {\n      newNode.shape = SHAPE_STATE;\n    }\n    if (!newNode.type && parsedItem.doc) {\n      log.info(\"Setting cluster for \", itemId, getDir(parsedItem));\n      newNode.type = \"group\";\n      newNode.dir = getDir(parsedItem);\n      newNode.shape = parsedItem.type === DIVIDER_TYPE ? SHAPE_DIVIDER : SHAPE_GROUP;\n      newNode.classes = newNode.classes + \" \" + CSS_DIAGRAM_CLUSTER + \" \" + (altFlag ? CSS_DIAGRAM_CLUSTER_ALT : \"\");\n    }\n    const nodeData = {\n      labelStyle: \"\",\n      shape: newNode.shape,\n      labelText: newNode.description,\n      // typeof newNode.description === 'object'\n      //   ? newNode.description[0]\n      //   : newNode.description,\n      classes: newNode.classes,\n      style: \"\",\n      //styles.style,\n      id: itemId,\n      dir: newNode.dir,\n      domId: stateDomId(itemId, graphItemCount),\n      type: newNode.type,\n      padding: 15\n      //getConfig().flowchart.padding\n    };\n    nodeData.centerLabel = true;\n    if (parsedItem.note) {\n      const noteData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTE,\n        labelText: parsedItem.note.text,\n        classes: CSS_DIAGRAM_NOTE,\n        // useHtmlLabels: false,\n        style: \"\",\n        // styles.style,\n        id: itemId + NOTE_ID + \"-\" + graphItemCount,\n        domId: stateDomId(itemId, graphItemCount, NOTE),\n        type: newNode.type,\n        padding: 15\n        //getConfig().flowchart.padding\n      };\n      const groupData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTEGROUP,\n        labelText: parsedItem.note.text,\n        classes: newNode.classes,\n        style: \"\",\n        // styles.style,\n        id: itemId + PARENT_ID,\n        domId: stateDomId(itemId, graphItemCount, PARENT),\n        type: \"group\",\n        padding: 0\n        //getConfig().flowchart.padding\n      };\n      graphItemCount++;\n      const parentNodeId = itemId + PARENT_ID;\n      g.setNode(parentNodeId, groupData);\n      g.setNode(noteData.id, noteData);\n      g.setNode(itemId, nodeData);\n      g.setParent(itemId, parentNodeId);\n      g.setParent(noteData.id, parentNodeId);\n      let from = itemId;\n      let to = noteData.id;\n      if (parsedItem.note.position === \"left of\") {\n        from = noteData.id;\n        to = itemId;\n      }\n      g.setEdge(from, to, {\n        arrowhead: \"none\",\n        arrowType: \"\",\n        style: G_EDGE_STYLE,\n        labelStyle: \"\",\n        classes: CSS_EDGE_NOTE_EDGE,\n        arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n        labelpos: G_EDGE_LABELPOS,\n        labelType: G_EDGE_LABELTYPE,\n        thickness: G_EDGE_THICKNESS\n      });\n    } else {\n      g.setNode(itemId, nodeData);\n    }\n  }\n  if (parent && parent.id !== \"root\") {\n    log.trace(\"Setting node \", itemId, \" to be child of its parent \", parent.id);\n    g.setParent(itemId, parent.id);\n  }\n  if (parsedItem.doc) {\n    log.trace(\"Adding nodes children \");\n    setupDoc(g, parsedItem, parsedItem.doc, diagramStates, diagramDb, !altFlag);\n  }\n};\nconst setupDoc = (g, parentParsedItem, doc, diagramStates, diagramDb, altFlag) => {\n  log.trace(\"items\", doc);\n  doc.forEach((item) => {\n    switch (item.stmt) {\n      case STMT_STATE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case DEFAULT_STATE_TYPE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case STMT_RELATION:\n        {\n          setupNode(g, parentParsedItem, item.state1, diagramStates, diagramDb, altFlag);\n          setupNode(g, parentParsedItem, item.state2, diagramStates, diagramDb, altFlag);\n          const edgeData = {\n            id: \"edge\" + graphItemCount,\n            arrowhead: \"normal\",\n            arrowTypeEnd: \"arrow_barb\",\n            style: G_EDGE_STYLE,\n            labelStyle: \"\",\n            label: common.sanitizeText(item.description, getConfig()),\n            arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n            labelpos: G_EDGE_LABELPOS,\n            labelType: G_EDGE_LABELTYPE,\n            thickness: G_EDGE_THICKNESS,\n            classes: CSS_EDGE\n          };\n          g.setEdge(item.state1.id, item.state2.id, edgeData, graphItemCount);\n          graphItemCount++;\n        }\n        break;\n    }\n  });\n};\nconst getDir = (parsedItem, defaultDir = DEFAULT_NESTED_DOC_DIR) => {\n  let dir = defaultDir;\n  if (parsedItem.doc) {\n    for (let i = 0; i < parsedItem.doc.length; i++) {\n      const parsedItemDoc = parsedItem.doc[i];\n      if (parsedItemDoc.stmt === \"dir\") {\n        dir = parsedItemDoc.value;\n      }\n    }\n  }\n  return dir;\n};\nconst draw = async function(text, id, _version, diag) {\n  log.info(\"Drawing state diagram (v2)\", id);\n  nodeDb = {};\n  diag.db.getDirection();\n  const { securityLevel, state: conf } = getConfig();\n  const nodeSpacing = conf.nodeSpacing || 50;\n  const rankSpacing = conf.rankSpacing || 50;\n  log.info(diag.db.getRootDocV2());\n  diag.db.extract(diag.db.getRootDocV2());\n  log.info(diag.db.getRootDocV2());\n  const diagramStates = diag.db.getStates();\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: getDir(diag.db.getRootDocV2()),\n    nodesep: nodeSpacing,\n    ranksep: rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  setupNode(g, void 0, diag.db.getRootDocV2(), diagramStates, diag.db, true);\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const svg = root.select(`[id=\"${id}\"]`);\n  const element = root.select(\"#\" + id + \" g\");\n  await render(element, g, [\"barb\"], CSS_DIAGRAM, id);\n  const padding = 8;\n  utils.insertTitle(svg, \"statediagramTitleText\", conf.titleTopMargin, diag.db.getDiagramTitle());\n  const bounds = svg.node().getBBox();\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n  svg.attr(\"class\", CSS_DIAGRAM);\n  const svgBounds = svg.node().getBBox();\n  configureSvgSize(svg, height, width, conf.useMaxWidth);\n  const vBox = `${svgBounds.x - padding} ${svgBounds.y - padding} ${width} ${height}`;\n  log.debug(`viewBox ${vBox}`);\n  svg.attr(\"viewBox\", vBox);\n  const labels = document.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n  for (const label of labels) {\n    const dim = label.getBBox();\n    const rect = document.createElementNS(\"http://www.w3.org/2000/svg\", SHAPE_STATE);\n    rect.setAttribute(\"rx\", 0);\n    rect.setAttribute(\"ry\", 0);\n    rect.setAttribute(\"width\", dim.width);\n    rect.setAttribute(\"height\", dim.height);\n    label.insertBefore(rect, label.firstChild);\n  }\n};\nconst renderer = {\n  setConf,\n  getClasses,\n  draw\n};\nconst diagram = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  }\n};\nexport {\n  diagram\n};\n"],"names":["SHAPE_STATE","SHAPE_STATE_WITH_DESC","CSS_DIAGRAM","CSS_DIAGRAM_STATE","CSS_EDGE","CSS_EDGE_NOTE_EDGE","CSS_DIAGRAM_NOTE","CSS_DIAGRAM_CLUSTER","CSS_DIAGRAM_CLUSTER_ALT","PARENT","NOTE","DOMID_TYPE_SPACER","NOTE_ID","PARENT_ID","G_EDGE_STYLE","G_EDGE_ARROWHEADSTYLE","G_EDGE_LABELTYPE","G_EDGE_THICKNESS","nodeDb","graphItemCount","stateDomId","itemId","counter","type","typeSpacer","length","setupNode","g","parent","parsedItem","diagramStates","diagramDb","altFlag","id","classStr","dbInfoItem","classes","join","shape","start","DEFAULT_STATE_TYPE","description","common","sanitizeText","getConfig","newNode","Array","isArray","push","sanitizeTextOrArray","doc","log","info","getDir","dir","DIVIDER_TYPE","nodeData","labelStyle","labelText","style","domId","padding","note","noteData","text","groupData","parentNodeId","setNode","setParent","from","to","position","setEdge","arrowhead","arrowType","arrowheadStyle","labelpos","labelType","thickness","trace","setupDoc","parentParsedItem","log$1","forEach","item","stmt","STMT_STATE","STMT_RELATION","state1","state2","edgeData","arrowTypeEnd","label","defaultDir","DEFAULT_NESTED_DOC_DIR","i","parsedItemDoc","value","diagram","parser","db","renderer","setConf","cnf","keys","Object","key","getClasses","diagramObj","extract","getRootDocV2","draw","async","_version","diag","getDirection","securityLevel","state","conf","nodeSpacing","rankSpacing","getStates","graphlib.Graph","multigraph","compound","setGraph","rankdir","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","sandboxElement","select","root","nodes","contentDocument","body","svg","element","render","utils","insertTitle","titleTopMargin","getDiagramTitle","bounds","node","getBBox","width","height","attr","svgBounds","configureSvgSize","useMaxWidth","vBox","x","y","debug","labels","document","querySelectorAll","dim","rect","createElementNS","setAttribute","insertBefore","firstChild","styles","init","arrowMarkerAbsolute","clear"],"mappings":"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","x_google_ignoreList":[0]}