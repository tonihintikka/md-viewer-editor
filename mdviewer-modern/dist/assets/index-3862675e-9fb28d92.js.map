{"version":3,"file":"index-3862675e-9fb28d92.js","sources":["../../node_modules/dagre-d3-es/src/graphlib/json.js","../../node_modules/mermaid/dist/index-3862675e.js"],"sourcesContent":["import * as _ from 'lodash-es';\nimport { Graph } from './graph.js';\n\nexport { write, read };\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound(),\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g),\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function (e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function (entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n","import { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\nimport { c as createLabel, g as getSubGraphTitleMargins, i as intersectRect, a as insertMarkers, b as clear$2, d as clear$3, u as updateNodeBounds, s as setNodeElem, e as insertNode, f as insertEdgeLabel, p as positionNode, h as insertEdge, j as positionEdgeLabel } from \"./edges-e0da2a9e.js\";\nimport { l as log, c as getConfig, m as evaluate } from \"./mermaid-b5860b54.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { a as createText } from \"./createText-2e5e7dd3.js\";\nimport { select } from \"d3\";\nlet clusterDb = {};\nlet descendants = {};\nlet parents = {};\nconst clear$1 = () => {\n  descendants = {};\n  parents = {};\n  clusterDb = {};\n};\nconst isDescendant = (id, ancestorId) => {\n  log.trace(\"In isDescendant\", ancestorId, \" \", id, \" = \", descendants[ancestorId].includes(id));\n  if (descendants[ancestorId].includes(id)) {\n    return true;\n  }\n  return false;\n};\nconst edgeInCluster = (edge, clusterId) => {\n  log.info(\"Descendants of \", clusterId, \" is \", descendants[clusterId]);\n  log.info(\"Edge is \", edge);\n  if (edge.v === clusterId) {\n    return false;\n  }\n  if (edge.w === clusterId) {\n    return false;\n  }\n  if (!descendants[clusterId]) {\n    log.debug(\"Tilt, \", clusterId, \",not in descendants\");\n    return false;\n  }\n  return descendants[clusterId].includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || descendants[clusterId].includes(edge.w);\n};\nconst copy = (clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    \"Copying children of \",\n    clusterId,\n    \"root\",\n    rootId,\n    \"data\",\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn(\"Setting parent\", node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug(\"Setting parent\", node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n        log.debug(\n          \"Not Setting parent for node=\",\n          node,\n          \"cluster!==rootId\",\n          clusterId !== rootId,\n          \"node!==clusterId\",\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug(\"Copying Edges\", edges);\n      edges.forEach((edge) => {\n        log.info(\"Edge\", edge);\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\n        log.info(\"Edge data\", data2, rootId);\n        try {\n          if (edgeInCluster(edge, rootId)) {\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              \"Skipping copy of edge \",\n              edge.v,\n              \"-->\",\n              edge.w,\n              \" rootId: \",\n              rootId,\n              \" clusterId:\",\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug(\"Removing node\", node);\n    graph.removeNode(node);\n  });\n};\nconst extractDescendants = (id, graph) => {\n  const children = graph.children(id);\n  let res = [...children];\n  for (const child of children) {\n    parents[child] = id;\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n  return res;\n};\nconst findNonClusterChild = (id, graph) => {\n  log.trace(\"Searching\", id);\n  const children = graph.children(id);\n  log.trace(\"Searching children of id \", id, children);\n  if (children.length < 1) {\n    log.trace(\"This is a valid node\", id);\n    return id;\n  }\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph);\n    if (_id) {\n      log.trace(\"Found replacement for\", id, \" => \", _id);\n      return _id;\n    }\n  }\n};\nconst getAnchorId = (id) => {\n  if (!clusterDb[id]) {\n    return id;\n  }\n  if (!clusterDb[id].externalConnections) {\n    return id;\n  }\n  if (clusterDb[id]) {\n    return clusterDb[id].id;\n  }\n  return id;\n};\nconst adjustClustersAndEdges = (graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug(\"Opting out, no graph \");\n    return;\n  } else {\n    log.debug(\"Opting in, graph \");\n  }\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        \"Cluster identified\",\n        id,\n        \" Replacement id in edges: \",\n        findNonClusterChild(id, graph)\n      );\n      descendants[id] = extractDescendants(id, graph);\n      clusterDb[id] = { id: findNonClusterChild(id, graph), clusterData: graph.node(id) };\n    }\n  });\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug(\"Cluster identified\", id, descendants);\n      edges.forEach((edge) => {\n        if (edge.v !== id && edge.w !== id) {\n          const d1 = isDescendant(edge.v, id);\n          const d2 = isDescendant(edge.w, id);\n          if (d1 ^ d2) {\n            log.warn(\"Edge: \", edge, \" leaves cluster \", id);\n            log.warn(\"Descendants of XXX \", id, \": \", descendants[id]);\n            clusterDb[id].externalConnections = true;\n          }\n        }\n      });\n    } else {\n      log.debug(\"Not a cluster \", id, descendants);\n    }\n  });\n  for (let id of Object.keys(clusterDb)) {\n    const nonClusterChild = clusterDb[id].id;\n    const parent = graph.parent(nonClusterChild);\n    if (parent !== id && clusterDb[parent] && !clusterDb[parent].externalConnections) {\n      clusterDb[id].id = parent;\n    }\n  }\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n    let v = e.v;\n    let w = e.w;\n    log.warn(\n      \"Fix XXX\",\n      clusterDb,\n      \"ids:\",\n      e.v,\n      e.w,\n      \"Translating: \",\n      clusterDb[e.v],\n      \" --- \",\n      clusterDb[e.w]\n    );\n    if (clusterDb[e.v] && clusterDb[e.w] && clusterDb[e.v] === clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing link to self - removing XXX\", e.v, e.w, e.name);\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      const specialId = e.w + \"---\" + e.v;\n      graph.setNode(specialId, {\n        domId: specialId,\n        id: specialId,\n        labelStyle: \"\",\n        labelText: edge.label,\n        padding: 0,\n        shape: \"labelRect\",\n        style: \"\"\n      });\n      const edge1 = structuredClone(edge);\n      const edge2 = structuredClone(edge);\n      edge1.label = \"\";\n      edge1.arrowTypeEnd = \"none\";\n      edge2.label = \"\";\n      edge1.fromCluster = e.v;\n      edge2.toCluster = e.v;\n      graph.setEdge(v, specialId, edge1, e.name + \"-cyclic-special\");\n      graph.setEdge(specialId, w, edge2, e.name + \"-cyclic-special\");\n    } else if (clusterDb[e.v] || clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        const parent = graph.parent(v);\n        clusterDb[parent].externalConnections = true;\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        const parent = graph.parent(w);\n        clusterDb[parent].externalConnections = true;\n        edge.toCluster = e.w;\n      }\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\n  extractor(graph, 0);\n  log.trace(clusterDb);\n};\nconst extractor = (graph, depth) => {\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\n  if (depth > 10) {\n    log.error(\"Bailing out\");\n    return;\n  }\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n  if (!hasChildren) {\n    log.debug(\"Done, no node has children\", graph.nodes());\n    return;\n  }\n  log.debug(\"Nodes = \", nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      \"Extracting node\",\n      node,\n      clusterDb,\n      clusterDb[node] && !clusterDb[node].externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children(\"D\"),\n      \" Depth \",\n      depth\n    );\n    if (!clusterDb[node]) {\n      log.debug(\"Not a cluster\", node, depth);\n    } else if (!clusterDb[node].externalConnections && // !graph.parent(node) &&\n    graph.children(node) && graph.children(node).length > 0) {\n      log.warn(\n        \"Cluster without external connections, without a parent and with children\",\n        node,\n        depth\n      );\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\n      if (clusterDb[node] && clusterDb[node].clusterData && clusterDb[node].clusterData.dir) {\n        dir = clusterDb[node].clusterData.dir;\n        log.warn(\"Fixing dir\", clusterDb[node].clusterData.dir, dir);\n      }\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true\n      }).setGraph({\n        rankdir: dir,\n        // Todo: set proper spacing\n        nodesep: 50,\n        ranksep: 50,\n        marginx: 8,\n        marginy: 8\n      }).setDefaultEdgeLabel(function() {\n        return {};\n      });\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb[node].clusterData,\n        labelText: clusterDb[node].labelText,\n        graph: clusterGraph\n      });\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\n    } else {\n      log.warn(\n        \"Cluster ** \",\n        node,\n        \" **not meeting the criteria !externalConnections:\",\n        !clusterDb[node].externalConnections,\n        \" no parent: \",\n        !graph.parent(node),\n        \" children \",\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children(\"D\"),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n  nodes = graph.nodes();\n  log.warn(\"New list of nodes\", nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(\" Now next level\", node, data);\n    if (data.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n};\nconst sorter = (graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign(nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n  return result;\n};\nconst sortNodesByHierarchy = (graph) => sorter(graph, graph.children());\nconst rect = (parent, node) => {\n  log.info(\"Creating subgraph rect for \", node.id, node);\n  const siteConfig = getConfig();\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"cluster\" + (node.class ? \" \" + node.class : \"\")).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const useHtmlLabels = evaluate(siteConfig.flowchart.htmlLabels);\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const text = node.labelType === \"markdown\" ? createText(label, node.labelText, { style: node.labelStyle, useHtmlLabels }) : label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(siteConfig.flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + padding ? bbox.width + padding : node.width;\n  if (node.width <= bbox.width + padding) {\n    node.diff = (bbox.width - node.width) / 2 - node.padding / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  log.trace(\"Data \", node, JSON.stringify(node));\n  rect2.attr(\"style\", node.style).attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - width / 2).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width).attr(\"height\", node.height + padding);\n  const { subGraphTitleTopMargin } = getSubGraphTitleMargins(siteConfig);\n  if (useHtmlLabels) {\n    label.attr(\n      \"transform\",\n      // This puts the label on top of the box instead of inside it\n      `translate(${node.x - bbox.width / 2}, ${node.y - node.height / 2 + subGraphTitleTopMargin})`\n    );\n  } else {\n    label.attr(\n      \"transform\",\n      // This puts the label on top of the box instead of inside it\n      `translate(${node.x}, ${node.y - node.height / 2 + subGraphTitleTopMargin})`\n    );\n  }\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst noteGroup = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"note-cluster\").attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding).attr(\"fill\", \"none\");\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst roundedWithTitle = (parent, node) => {\n  const siteConfig = getConfig();\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const innerRect = shapeSvg.append(\"rect\");\n  const text = label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(siteConfig.flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  bbox = text.getBBox();\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;\n  if (node.width <= bbox.width + node.padding) {\n    node.diff = (bbox.width + node.padding * 0 - node.width) / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  rect2.attr(\"class\", \"outer\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width + padding).attr(\"height\", node.height + padding);\n  innerRect.attr(\"class\", \"inner\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding + bbox.height - 1).attr(\"width\", width + padding).attr(\"height\", node.height + padding - bbox.height - 3);\n  const { subGraphTitleTopMargin } = getSubGraphTitleMargins(siteConfig);\n  label.attr(\n    \"transform\",\n    `translate(${node.x - bbox.width / 2}, ${node.y - node.height / 2 - node.padding / 3 + (evaluate(siteConfig.flowchart.htmlLabels) ? 5 : 3) + subGraphTitleTopMargin})`\n  );\n  const rectBox = rect2.node().getBBox();\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst divider = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"class\", \"divider\").attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding);\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.diff = -node.padding / 2;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst shapes = { rect, roundedWithTitle, noteGroup, divider };\nlet clusterElems = {};\nconst insertCluster = (elem, node) => {\n  log.trace(\"Inserting cluster\");\n  const shape = node.shape || \"rect\";\n  clusterElems[node.id] = shapes[shape](elem, node);\n};\nconst clear = () => {\n  clusterElems = {};\n};\nconst recursiveRender = async (_elem, graph, diagramType, id, parentCluster, siteConfig) => {\n  log.info(\"Graph in recursive render: XXX\", graphlibJson.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace(\"Dir in recursive render - dir:\", dir);\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\n  if (!graph.nodes()) {\n    log.info(\"No nodes found for\", graph);\n  } else {\n    log.info(\"Recursive render XXX\", graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.trace(\"Recursive edges\", graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\n  await Promise.all(\n    graph.nodes().map(async function(v) {\n      const node = graph.node(v);\n      if (parentCluster !== void 0) {\n        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n        log.info(\"Setting data for cluster XXX (\", v, \") \", data, parentCluster);\n        graph.setNode(parentCluster.id, data);\n        if (!graph.parent(v)) {\n          log.trace(\"Setting parent\", v, parentCluster.id);\n          graph.setParent(v, parentCluster.id, data);\n        }\n      }\n      log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\n      if (node && node.clusterNode) {\n        log.info(\"Cluster identified\", v, node.width, graph.node(v));\n        const o = await recursiveRender(\n          nodes,\n          node.graph,\n          diagramType,\n          id,\n          graph.node(v),\n          siteConfig\n        );\n        const newEl = o.elem;\n        updateNodeBounds(node, newEl);\n        node.diff = o.diff || 0;\n        log.info(\"Node bounds (abc123)\", v, node, node.width, node.x, node.y);\n        setNodeElem(newEl, node);\n        log.warn(\"Recursive render complete \", newEl, node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.info(\"Cluster - the non recursive path XXX\", v, node.id, node, graph);\n          log.info(findNonClusterChild(node.id, graph));\n          clusterDb[node.id] = { id: findNonClusterChild(node.id, graph), node };\n        } else {\n          log.info(\"Node - the non recursive path\", v, node.id, node);\n          await insertNode(nodes, graph.node(v), dir);\n        }\n      }\n    })\n  );\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e.v, e.w, e.name);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\n    log.info(\"Fix\", clusterDb, \"ids:\", e.v, e.w, \"Translating: \", clusterDb[e.v], clusterDb[e.w]);\n    insertEdgeLabel(edgeLabels, edge);\n  });\n  graph.edges().forEach(function(e) {\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n  });\n  log.info(\"#############################################\");\n  log.info(\"###                Layout                 ###\");\n  log.info(\"#############################################\");\n  log.info(graph);\n  layout(graph);\n  log.info(\"Graph after layout:\", graphlibJson.write(graph));\n  let diff = 0;\n  const { subGraphTitleTotalMargin } = getSubGraphTitleMargins(siteConfig);\n  sortNodesByHierarchy(graph).forEach(function(v) {\n    const node = graph.node(v);\n    log.info(\"Position \" + v + \": \" + JSON.stringify(graph.node(v)));\n    log.info(\n      \"Position \" + v + \": (\" + node.x,\n      \",\" + node.y,\n      \") width: \",\n      node.width,\n      \" height: \",\n      node.height\n    );\n    if (node && node.clusterNode) {\n      node.y += subGraphTitleTotalMargin;\n      positionNode(node);\n    } else {\n      if (graph.children(v).length > 0) {\n        node.height += subGraphTitleTotalMargin;\n        insertCluster(clusters, node);\n        clusterDb[node.id].node = node;\n      } else {\n        node.y += subGraphTitleTotalMargin / 2;\n        positionNode(node);\n      }\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\n    edge.points.forEach((point) => point.y += subGraphTitleTotalMargin / 2);\n    const paths = insertEdge(edgePaths, e, edge, clusterDb, diagramType, graph, id);\n    positionEdgeLabel(edge, paths);\n  });\n  graph.nodes().forEach(function(v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.type === \"group\") {\n      diff = n.diff;\n    }\n  });\n  return { elem, diff };\n};\nconst render = async (elem, graph, markers, diagramType, id) => {\n  insertMarkers(elem, markers, diagramType, id);\n  clear$2();\n  clear$3();\n  clear();\n  clear$1();\n  log.warn(\"Graph at first:\", JSON.stringify(graphlibJson.write(graph)));\n  adjustClustersAndEdges(graph);\n  log.warn(\"Graph after:\", JSON.stringify(graphlibJson.write(graph)));\n  const siteConfig = getConfig();\n  await recursiveRender(elem, graph, diagramType, id, void 0, siteConfig);\n};\nexport {\n  render as r\n};\n"],"names":["write","g","json","options","directed","isDirected","multigraph","isMultigraph","compound","isCompound","nodes","writeNodes","edges","writeEdges","_.isUndefined","graph","value","_.clone","_.map","v","nodeValue","node","parent","e","edgeValue","edge","w","name","clusterDb","descendants","parents","isDescendant","id","ancestorId","log$1","trace","includes","copy","clusterId","newGraph","rootId","warn","children","push","log","forEach","length","data","info","setNode","setParent","debug","data2","edgeInCluster","setEdge","error","removeNode","extractDescendants","res","child","findNonClusterChild","_id","getAnchorId","externalConnections","extractor","depth","graphlibJson.write","hasChildren","dir","rankdir","clusterData","clusterGraph","graphlib.Graph","setGraph","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","clusterNode","labelText","sorter","result","Object","assign","sorted","shapes","rect","siteConfig","getConfig","shapeSvg","insert","attr","class","rect2","useHtmlLabels","evaluate","flowchart","htmlLabels","label","text","labelType","createText","style","labelStyle","appendChild","createLabel","bbox","getBBox","div","dv","select","getBoundingClientRect","width","height","padding","halfPadding","diff","JSON","stringify","rx","ry","x","y","subGraphTitleTopMargin","getSubGraphTitleMargins","rectBox","intersect","point","intersectRect","roundedWithTitle","classes","innerRect","append","noteGroup","divider","clusterElems","recursiveRender","async","_elem","diagramType","parentCluster","elem","clusters","edgePaths","edgeLabels","Promise","all","map","parse","o","newEl","updateNodeBounds","setNodeElem","insertNode","insertEdgeLabel","layout","subGraphTitleTotalMargin","sortNodesByHierarchy","positionNode","shape","insertCluster","points","paths","insertEdge","positionEdgeLabel","n","type","render","markers","insertMarkers$1","keys","nonClusterChild","removeEdge","specialId","domId","edge1","structuredClone","edge2","arrowTypeEnd","fromCluster","toCluster","adjustClustersAndEdges"],"mappings":"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","x_google_ignoreList":[0,1]}