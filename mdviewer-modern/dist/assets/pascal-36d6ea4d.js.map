{"version":3,"file":"pascal-36d6ea4d.js","sources":["../../node_modules/@codemirror/legacy-modes/mode/pascal.js"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nvar keywords = words(\n  \"absolute and array asm begin case const constructor destructor div do \" +\n    \"downto else end file for function goto if implementation in inherited \" +\n    \"inline interface label mod nil not object of operator or packed procedure \" +\n    \"program record reintroduce repeat self set shl shr string then to type \" +\n    \"unit until uses var while with xor as class dispinterface except exports \" +\n    \"finalization finally initialization inline is library on out packed \" +\n    \"property raise resourcestring threadvar try absolute abstract alias \" +\n    \"assembler bitpacked break cdecl continue cppdecl cvar default deprecated \" +\n    \"dynamic enumerator experimental export external far far16 forward generic \" +\n    \"helper implements index interrupt iocheck local message name near \" +\n    \"nodefault noreturn nostackframe oldfpccall otherwise overload override \" +\n    \"pascal platform private protected public published read register \" +\n    \"reintroduce result safecall saveregisters softfloat specialize static \" +\n    \"stdcall stored strict unaligned unimplemented varargs virtual write\");\nvar atoms = {\"null\": true};\n\nvar isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == \"#\" && state.startOfLine) {\n    stream.skipToEnd();\n    return \"meta\";\n  }\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (ch == \"(\" && stream.eat(\"*\")) {\n    state.tokenize = tokenComment;\n    return tokenComment(stream, state);\n  }\n  if (ch == \"{\") {\n    state.tokenize = tokenCommentBraces;\n    return tokenCommentBraces(stream, state);\n  }\n  if (/[\\[\\]\\(\\),;\\:\\.]/.test(ch)) {\n    return null;\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_]/);\n  var cur = stream.current().toLowerCase();\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {end = true; break;}\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !escaped) state.tokenize = null;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \")\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenCommentBraces(stream, state) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"}\") {\n      state.tokenize = null;\n      break;\n    }\n  }\n  return \"comment\";\n}\n\n// Interface\n\nexport const pascal = {\n  name: \"pascal\",\n\n  startState: function() {\n    return {tokenize: null};\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\" || style == \"meta\") return style;\n    return style;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {block: {open: \"(*\", close: \"*)\"}}\n  }\n};\n"],"names":["keywords","str","obj","words","split","i","length","atoms","null","isOperatorChar","tokenBase","stream","state","quote","ch","next","startOfLine","skipToEnd","tokenize","escaped","end","eat","tokenComment","tokenCommentBraces","test","eatWhile","cur","current","toLowerCase","propertyIsEnumerable","maybeEnd","pascal","name","startState","token","eatSpace","style","languageData","indentOnInput","commentTokens","block","open","close"],"mappings":"AAKA,IAAIA,EALJ,SAAeC,GAEb,IADA,IAAIC,EAAM,CAAA,EAAIC,EAAQF,EAAIG,MAAM,KACvBC,EAAI,EAAGA,EAAIF,EAAMG,SAAUD,EAAOF,EAAAA,EAAME,KAAM,EAChD,OAAAH,CACT,CACeC,CACb,w9BAcEI,EAAQ,CAACC,MAAQ,GAEjBC,EAAiB,mBAErB,SAASC,EAAUC,EAAQC,GACrB,IAyCeC,EAzCfC,EAAKH,EAAOI,OACZ,GAAM,KAAND,GAAaF,EAAMI,YAEd,OADPL,EAAOM,YACA,OAEL,GAAM,KAANH,GAAmB,KAANA,EAER,OADDF,EAAAM,UAmCWL,EAnCYC,EAoCxB,SAASH,EAAQC,GAEtB,IADI,IAAiBG,EAAjBI,GAAU,EAAaC,GAAM,EACA,OAAzBL,EAAOJ,EAAOI,SAAiB,CACjC,GAAAA,GAAQF,IAAUM,EAAS,CAAOC,GAAA,EAAM,KAAM,CACxCD,GAACA,GAAmB,MAARJ,CACvB,CAEM,OADHK,GAAQD,IAASP,EAAMM,SAAW,MAC/B,QACX,GA3CWN,EAAMM,SAASP,EAAQC,GAEhC,GAAU,KAANE,GAAaH,EAAOU,IAAI,KAEnB,OADPT,EAAMM,SAAWI,EACVA,EAAaX,EAAQC,GAE9B,GAAU,KAANE,EAEK,OADPF,EAAMM,SAAWK,EACVA,EAAmBZ,EAAQC,GAEhC,GAAA,mBAAmBY,KAAKV,GACnB,OAAA,KAEL,GAAA,KAAKU,KAAKV,GAEL,OADPH,EAAOc,SAAS,UACT,SAET,GAAU,KAANX,GACEH,EAAOU,IAAI,KAEN,OADPV,EAAOM,YACA,UAGP,GAAAR,EAAee,KAAKV,GAEf,OADPH,EAAOc,SAAShB,GACT,WAETE,EAAOc,SAAS,WAChB,IAAIC,EAAMf,EAAOgB,UAAUC,cACvB,OAAA5B,EAAS6B,qBAAqBH,GAAa,UAC3CnB,EAAMsB,qBAAqBH,GAAa,OACrC,UACT,CAcA,SAASJ,EAAaX,EAAQC,GAErB,IADP,IAAsBE,EAAlBgB,GAAW,EACRhB,EAAKH,EAAOI,QAAQ,CACrB,GAAM,KAAND,GAAagB,EAAU,CACzBlB,EAAMM,SAAW,KACjB,KACD,CACDY,EAAkB,KAANhB,CACb,CACM,MAAA,SACT,CAEA,SAASS,EAAmBZ,EAAQC,GAE3B,IADH,IAAAE,EACGA,EAAKH,EAAOI,QACjB,GAAU,KAAND,EAAW,CACbF,EAAMM,SAAW,KACjB,KACD,CAEI,MAAA,SACT,CAIY,MAACa,EAAS,CACpBC,KAAM,SAENC,WAAY,WACH,MAAA,CAACf,SAAU,KACnB,EAEDgB,MAAO,SAASvB,EAAQC,GACtB,GAAID,EAAOwB,WAAmB,OAAA,KAC9B,IAAIC,GAASxB,EAAMM,UAAYR,GAAWC,EAAQC,GAC9C,OAA8CwB,CAEnD,EAEDC,aAAc,CACZC,cAAe,YACfC,cAAe,CAACC,MAAO,CAACC,KAAM,KAAMC,MAAO","x_google_ignoreList":[0]}