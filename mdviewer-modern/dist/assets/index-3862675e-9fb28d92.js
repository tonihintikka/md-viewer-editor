import{q as e,G as t}from"./graph-1988918b.js";import{m as n,l as r}from"./layout-96c79e73.js";import{c as i}from"./clone-f4609e8d.js";import{i as a,u as o,s as d,a as s,b as c,g as l,p as h,c as g,d as f,e as u,f as w,h as p,j as v}from"./edges-e0da2a9e-1cc631a0.js";import{H as y,A as m,T as x,G as b}from"./index-7485a0e9.js";import{c as E}from"./createText-2e5e7dd3-e84a7774.js";function N(t){var n={options:{directed:t.isDirected(),multigraph:t.isMultigraph(),compound:t.isCompound()},nodes:X(t),edges:C(t)};return e(t.graph())||(n.value=i(t.graph())),n}function X(t){return n(t.nodes(),(function(n){var r=t.node(n),i=t.parent(n),a={v:n};return e(r)||(a.value=r),e(i)||(a.parent=i),a}))}function C(t){return n(t.edges(),(function(n){var r=t.edge(n),i={v:n.v,w:n.w};return e(n.name)||(i.name=n.name),e(r)||(i.value=r),i}))}let S={},T={},D={};const B=(e,t)=>(y.trace("In isDescendant",t," ",e," = ",T[t].includes(e)),!!T[t].includes(e)),O=(e,t,n,r)=>{y.warn("Copying children of ",e,"root",r,"data",t.node(e),r);const i=t.children(e)||[];e!==r&&i.push(e),y.warn("Copying (nodes) clusterId",e,"nodes",i),i.forEach((i=>{if(t.children(i).length>0)O(i,t,n,r);else{const a=t.node(i);y.info("cp ",i," to ",r," with parent ",e),n.setNode(i,a),r!==t.parent(i)&&(y.warn("Setting parent",i,t.parent(i)),n.setParent(i,t.parent(i))),e!==r&&i!==e?(y.debug("Setting parent",i,e),n.setParent(i,e)):(y.info("In copy ",e,"root",r,"data",t.node(e),r),y.debug("Not Setting parent for node=",i,"cluster!==rootId",e!==r,"node!==clusterId",i!==e));const o=t.edges(i);y.debug("Copying Edges",o),o.forEach((i=>{y.info("Edge",i);const a=t.edge(i.v,i.w,i.name);y.info("Edge data",a,r);try{((e,t)=>(y.info("Descendants of ",t," is ",T[t]),y.info("Edge is ",e),e.v!==t&&e.w!==t&&(T[t]?T[t].includes(e.v)||B(e.v,t)||B(e.w,t)||T[t].includes(e.w):(y.debug("Tilt, ",t,",not in descendants"),!1))))(i,r)?(y.info("Copying as ",i.v,i.w,a,i.name),n.setEdge(i.v,i.w,a,i.name),y.info("newGraph edges ",n.edges(),n.edge(n.edges()[0]))):y.info("Skipping copy of edge ",i.v,"--\x3e",i.w," rootId: ",r," clusterId:",e)}catch(o){y.error(o)}}))}y.debug("Removing node",i),t.removeNode(i)}))},G=(e,t)=>{const n=t.children(e);let r=[...n];for(const i of n)D[i]=e,r=[...r,...G(i,t)];return r},J=(e,t)=>{y.trace("Searching",e);const n=t.children(e);if(y.trace("Searching children of id ",e,n),n.length<1)return y.trace("This is a valid node",e),e;for(const r of n){const n=J(r,t);if(n)return y.trace("Found replacement for",e," => ",n),n}},j=e=>S[e]&&S[e].externalConnections&&S[e]?S[e].id:e,I=(e,n)=>{if(y.warn("extractor - ",n,N(e),e.children("D")),n>10)return void y.error("Bailing out");let r=e.nodes(),i=!1;for(const t of r){const n=e.children(t);i=i||n.length>0}if(i){y.debug("Nodes = ",r,n);for(const i of r)if(y.debug("Extracting node",i,S,S[i]&&!S[i].externalConnections,!e.parent(i),e.node(i),e.children("D")," Depth ",n),S[i])if(!S[i].externalConnections&&e.children(i)&&e.children(i).length>0){y.warn("Cluster without external connections, without a parent and with children",i,n);let r="TB"===e.graph().rankdir?"LR":"TB";S[i]&&S[i].clusterData&&S[i].clusterData.dir&&(r=S[i].clusterData.dir,y.warn("Fixing dir",S[i].clusterData.dir,r));const a=new t({multigraph:!0,compound:!0}).setGraph({rankdir:r,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel((function(){return{}}));y.warn("Old graph before copy",N(e)),O(i,e,a,i),e.setNode(i,{clusterNode:!0,id:i,clusterData:S[i].clusterData,labelText:S[i].labelText,graph:a}),y.warn("New graph after copy node: (",i,")",N(a)),y.debug("Old graph after copy",N(e))}else y.warn("Cluster ** ",i," **not meeting the criteria !externalConnections:",!S[i].externalConnections," no parent: ",!e.parent(i)," children ",e.children(i)&&e.children(i).length>0,e.children("D"),n),y.debug(S);else y.debug("Not a cluster",i,n);r=e.nodes(),y.warn("New list of nodes",r);for(const t of r){const r=e.node(t);y.warn(" Now next level",t,r),r.clusterNode&&I(r.graph,n+1)}}else y.debug("Done, no node has children",e.nodes())},R=(e,t)=>{if(0===t.length)return[];let n=Object.assign(t);return t.forEach((t=>{const r=e.children(t),i=R(e,r);n=[...n,...i]})),n},L={rect:(e,t)=>{y.info("Creating subgraph rect for ",t.id,t);const n=m(),r=e.insert("g").attr("class","cluster"+(t.class?" "+t.class:"")).attr("id",t.id),i=r.insert("rect",":first-child"),a=x(n.flowchart.htmlLabels),o=r.insert("g").attr("class","cluster-label"),d="markdown"===t.labelType?E(o,t.labelText,{style:t.labelStyle,useHtmlLabels:a}):o.node().appendChild(p(t.labelText,t.labelStyle,void 0,!0));let s=d.getBBox();if(x(n.flowchart.htmlLabels)){const e=d.children[0],t=b(d);s=e.getBoundingClientRect(),t.attr("width",s.width),t.attr("height",s.height)}const c=0*t.padding,h=c/2,g=t.width<=s.width+c?s.width+c:t.width;t.width<=s.width+c?t.diff=(s.width-t.width)/2-t.padding/2:t.diff=-t.padding/2,y.trace("Data ",t,JSON.stringify(t)),i.attr("style",t.style).attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-g/2).attr("y",t.y-t.height/2-h).attr("width",g).attr("height",t.height+c);const{subGraphTitleTopMargin:f}=l(n);a?o.attr("transform",`translate(${t.x-s.width/2}, ${t.y-t.height/2+f})`):o.attr("transform",`translate(${t.x}, ${t.y-t.height/2+f})`);const u=i.node().getBBox();return t.width=u.width,t.height=u.height,t.intersect=function(e){return v(t,e)},r},roundedWithTitle:(e,t)=>{const n=m(),r=e.insert("g").attr("class",t.classes).attr("id",t.id),i=r.insert("rect",":first-child"),a=r.insert("g").attr("class","cluster-label"),o=r.append("rect"),d=a.node().appendChild(p(t.labelText,t.labelStyle,void 0,!0));let s=d.getBBox();if(x(n.flowchart.htmlLabels)){const e=d.children[0],t=b(d);s=e.getBoundingClientRect(),t.attr("width",s.width),t.attr("height",s.height)}s=d.getBBox();const c=0*t.padding,h=c/2,g=t.width<=s.width+t.padding?s.width+t.padding:t.width;t.width<=s.width+t.padding?t.diff=(s.width+0*t.padding-t.width)/2:t.diff=-t.padding/2,i.attr("class","outer").attr("x",t.x-g/2-h).attr("y",t.y-t.height/2-h).attr("width",g+c).attr("height",t.height+c),o.attr("class","inner").attr("x",t.x-g/2-h).attr("y",t.y-t.height/2-h+s.height-1).attr("width",g+c).attr("height",t.height+c-s.height-3);const{subGraphTitleTopMargin:f}=l(n);a.attr("transform",`translate(${t.x-s.width/2}, ${t.y-t.height/2-t.padding/3+(x(n.flowchart.htmlLabels)?5:3)+f})`);const u=i.node().getBBox();return t.height=u.height,t.intersect=function(e){return v(t,e)},r},noteGroup:(e,t)=>{const n=e.insert("g").attr("class","note-cluster").attr("id",t.id),r=n.insert("rect",":first-child"),i=0*t.padding,a=i/2;r.attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-t.width/2-a).attr("y",t.y-t.height/2-a).attr("width",t.width+i).attr("height",t.height+i).attr("fill","none");const o=r.node().getBBox();return t.width=o.width,t.height=o.height,t.intersect=function(e){return v(t,e)},n},divider:(e,t)=>{const n=e.insert("g").attr("class",t.classes).attr("id",t.id),r=n.insert("rect",":first-child"),i=0*t.padding,a=i/2;r.attr("class","divider").attr("x",t.x-t.width/2-a).attr("y",t.y-t.height/2).attr("width",t.width+i).attr("height",t.height+i);const o=r.node().getBBox();return t.width=o.width,t.height=o.height,t.diff=-t.padding/2,t.intersect=function(e){return v(t,e)},n}};let k={};const F=async(e,t,n,i,a,u)=>{y.info("Graph in recursive render: XXX",N(t),a);const w=t.graph().rankdir;y.trace("Dir in recursive render - dir:",w);const p=e.insert("g").attr("class","root");t.nodes()?y.info("Recursive render XXX",t.nodes()):y.info("No nodes found for",t),t.edges().length>0&&y.trace("Recursive edges",t.edge(t.edges()[0]));const v=p.insert("g").attr("class","clusters"),m=p.insert("g").attr("class","edgePaths"),x=p.insert("g").attr("class","edgeLabels"),b=p.insert("g").attr("class","nodes");await Promise.all(t.nodes().map((async function(e){const r=t.node(e);if(void 0!==a){const n=JSON.parse(JSON.stringify(a.clusterData));y.info("Setting data for cluster XXX (",e,") ",n,a),t.setNode(a.id,n),t.parent(e)||(y.trace("Setting parent",e,a.id),t.setParent(e,a.id,n))}if(y.info("(Insert) Node XXX"+e+": "+JSON.stringify(t.node(e))),r&&r.clusterNode){y.info("Cluster identified",e,r.width,t.node(e));const a=await F(b,r.graph,n,i,t.node(e),u),s=a.elem;o(r,s),r.diff=a.diff||0,y.info("Node bounds (abc123)",e,r,r.width,r.x,r.y),d(s,r),y.warn("Recursive render complete ",s,r)}else t.children(e).length>0?(y.info("Cluster - the non recursive path XXX",e,r.id,r,t),y.info(J(r.id,t)),S[r.id]={id:J(r.id,t),node:r}):(y.info("Node - the non recursive path",e,r.id,r),await s(b,t.node(e),w))}))),t.edges().forEach((function(e){const n=t.edge(e.v,e.w,e.name);y.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),y.info("Edge "+e.v+" -> "+e.w+": ",e," ",JSON.stringify(t.edge(e))),y.info("Fix",S,"ids:",e.v,e.w,"Translating: ",S[e.v],S[e.w]),c(x,n)})),t.edges().forEach((function(e){y.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e))})),y.info("#############################################"),y.info("###                Layout                 ###"),y.info("#############################################"),y.info(t),r(t),y.info("Graph after layout:",N(t));let E=0;const{subGraphTitleTotalMargin:X}=l(u);return(e=>R(e,e.children()))(t).forEach((function(e){const n=t.node(e);y.info("Position "+e+": "+JSON.stringify(t.node(e))),y.info("Position "+e+": ("+n.x,","+n.y,") width: ",n.width," height: ",n.height),n&&n.clusterNode?(n.y+=X,h(n)):t.children(e).length>0?(n.height+=X,((e,t)=>{y.trace("Inserting cluster");const n=t.shape||"rect";k[t.id]=L[n](e,t)})(v,n),S[n.id].node=n):(n.y+=X/2,h(n))})),t.edges().forEach((function(e){const r=t.edge(e);y.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(r),r),r.points.forEach((e=>e.y+=X/2));const a=g(m,e,r,S,n,t,i);f(r,a)})),t.nodes().forEach((function(e){const n=t.node(e);y.info(e,n.type,n.diff),"group"===n.type&&(E=n.diff)})),{elem:p,diff:E}},P=async(e,t,n,r,i)=>{a(e,n,r,i),u(),w(),k={},T={},D={},S={},y.warn("Graph at first:",JSON.stringify(N(t))),((e,t)=>{if(!e||t>10)y.debug("Opting out, no graph ");else{y.debug("Opting in, graph "),e.nodes().forEach((function(t){e.children(t).length>0&&(y.warn("Cluster identified",t," Replacement id in edges: ",J(t,e)),T[t]=G(t,e),S[t]={id:J(t,e),clusterData:e.node(t)})})),e.nodes().forEach((function(t){const n=e.children(t),r=e.edges();n.length>0?(y.debug("Cluster identified",t,T),r.forEach((e=>{e.v!==t&&e.w!==t&&B(e.v,t)^B(e.w,t)&&(y.warn("Edge: ",e," leaves cluster ",t),y.warn("Descendants of XXX ",t,": ",T[t]),S[t].externalConnections=!0)}))):y.debug("Not a cluster ",t,T)}));for(let t of Object.keys(S)){const n=S[t].id,r=e.parent(n);r!==t&&S[r]&&!S[r].externalConnections&&(S[t].id=r)}e.edges().forEach((function(t){const n=e.edge(t);y.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(t)),y.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(e.edge(t)));let r=t.v,i=t.w;if(y.warn("Fix XXX",S,"ids:",t.v,t.w,"Translating: ",S[t.v]," --- ",S[t.w]),S[t.v]&&S[t.w]&&S[t.v]===S[t.w]){y.warn("Fixing and trixing link to self - removing XXX",t.v,t.w,t.name),y.warn("Fixing and trixing - removing XXX",t.v,t.w,t.name),r=j(t.v),i=j(t.w),e.removeEdge(t.v,t.w,t.name);const a=t.w+"---"+t.v;e.setNode(a,{domId:a,id:a,labelStyle:"",labelText:n.label,padding:0,shape:"labelRect",style:""});const o=structuredClone(n),d=structuredClone(n);o.label="",o.arrowTypeEnd="none",d.label="",o.fromCluster=t.v,d.toCluster=t.v,e.setEdge(r,a,o,t.name+"-cyclic-special"),e.setEdge(a,i,d,t.name+"-cyclic-special")}else if(S[t.v]||S[t.w]){if(y.warn("Fixing and trixing - removing XXX",t.v,t.w,t.name),r=j(t.v),i=j(t.w),e.removeEdge(t.v,t.w,t.name),r!==t.v){const i=e.parent(r);S[i].externalConnections=!0,n.fromCluster=t.v}if(i!==t.w){const r=e.parent(i);S[r].externalConnections=!0,n.toCluster=t.w}y.warn("Fix Replacing with XXX",r,i,t.name),e.setEdge(r,i,n,t.name)}})),y.warn("Adjusted Graph",N(e)),I(e,0),y.trace(S)}})(t),y.warn("Graph after:",JSON.stringify(N(t)));const o=m();await F(e,t,r,i,void 0,o)};export{P as r};
//# sourceMappingURL=index-3862675e-9fb28d92.js.map
